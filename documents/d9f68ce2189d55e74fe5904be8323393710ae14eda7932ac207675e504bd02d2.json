{
  "content": "\nPython\nFlask & Django\nFull Stack Python for Web\nDevelopment\nwww.emenwa.com\nContents\nContents\nIntroduction To Full Stack Python Web Development\nFull-stack development with Python\nBack-end development using Python\nDjango\nFlask\nFront-end development using Python\nWhat is Django Used For?\nPart 1 Flask\nChapter 1 – Learning the Strings\nThe PEP Talk\nPEP 8: Style Guide for Python Code\nPEP 257: Docstring Conventions\nRelative imports\nApplication Directory\nInstalling Python\nInstalling Python\nInstall Pip\nChapter 2 – Virtual Environments\nUse virtualenv to manage your environment\nInstall virtualenvwrapper\nMake a Virtual Environment\nInstalling Python Packages\nChapter 3 – Project Organisation\nPatterns of organization\nInitialization\nBlueprints\nChapter 4 – Routing & Configuration\nView decorators\nConfiguration\nInstance folder\nHow to use instance folders\nSecret keys\nConfiguring based on environment variables\nVariable Rule\nChapter 5 – Build A Simple App\nThe actual app\nDevelopment Web Server\nChapter 6 - Dynamic Routes\nConverter\nChapter 7 – Static Templates\nRendering HTML Templates\nA String\nrender_template() function\nFile Structure Strategies\nModule File Structure\nPackage File Structure\nChapter 8 - The Jinja2 Template Engine\nVariables\nFilters\nControl structure\nConditions\nloop\nChapter 9 - Bootstrap Integration with Flask\nWhat is Bootstrap?\nGetting Started\nCode Flask App with Bootstrap\nCreate a Real Flask Website\nGetting Bootsrap\nWeb App\nPage redirect\nTemplate inheritance\nWhat is Template Inheritance\nAdding Bootstrap\nNav bar From Bootstrap\nChapter 10 – HTTP Methods (GET/POST) & Retrieving Form Data\nGET\nPOST\nWeb Forms\nLogin page template\nBack-End\nBootstrap forms\nChapter 11 – Sessions vs. Cookies\nSessions\nSessions or Cookies?\nHow to set up a Session\nSession Data\nSession Duration\nChapter 12 – Message Flashing\nflash() Function\nDisplaying Flash Message\nDisplaying More Than 1 Message\nChapter 13 – SQL Alchemy Set up & Models\nCreating A Simple Profile Page\nDatabase Management with Flask-SQL Alchemy\nHow to use database\nModels\nChapter 14 - CRUD\nThe Flask Book Store\nYour static web page with Flask\nHandling user input in our web application\nTemplates\nBack-end\nAdd a database\nFront-end\nInitializing\nRetrieving books from our database\nUpdating book titles\nDeleting books from our database\nChapter 15 – Deployment\nWeb Hosting\nAmazon Web Services EC2\nHeroku\nDigital Ocean\nRequirements for deployment\nGunicorn\nDeploy!\nSet up Git\nPush your Site\nPart 2 Django\nChapter 1 - Installing to Get Started\nIntroducing the Command Line\nShell Commands\nVirtual Environments\nInstalling Django\nSetup your Virtual Environment for Django on macOS/Linux\nInstalling Pipenv Globally\nYour First Blank Django Project\nIntroducing Text Editors\nSetting Up Django on VS Code\nLastly, Git\nChapter 2 - Create Your First Django Project\nSetup\nHTTP Request/Response Cycle\nModel-View-Controller (MVC) and Model-View-Template (MVT)\nCreating A Blank App\nDesigning Pages\nUsing Git\nChapter 3 - Django App With Pages\nSetup\nAdding Templates\nClass and Views\nOur URLs\nAbout Page\nExtending Templates\nTesting\nWebsite Production\nHeroku\nLet’s Deploy\nChapter 4 - Create Your First Database-Driven App And Use The Django\nAdmin\nInitial Setup\nLet’s Create a Database Model\nActivate the models\nDjango Admin\nViews/Templates/URLs\nLet’s Add New Posts\nTests\nStoring to GitHub\nSetup Heroku\nDeploy to Heroku\nChapter 5 – Blog App\nInitial Set Up\nDatabase Models\nAdmin Access\nURLs\nViews\nTemplates\nAdd some Style!\nIndividual Blog Pages\nTesting\nGit\nChapter 6 – Django Web Forms\nCreateView\nLet Anyone Edit The Blog\nLet Users Delete Posts\nTesting Program\nChapter 7- User Accounts\nUser Login Access\nCalling the User’s Name on The HomePage\nUser Log Out Access\nAllow Users to Sign Up\nLink to Sign Up\nGitHub\nStatic Files\nTime for Heroku\nDeploy to Heroku\nPostgreSQL vs SQLite\nConclusion\nFollow-Up Actions\nThird-party bundles\nI T F S P W\nNTRODUCTION O ULL TACK YTHON EB\nD\nEVELOPMENT\nFull stack developers are hard to find these days! You are among a tiny\npercentage that will stand out as a professional web developer.\nAs technology advances, the technological world undergoes rapid change.\nThe days when a developer can easily keep a job with only one programming\nlanguage for years without picking up new skills are long gone. Many of us\nenter the world of programming and web development knowing only one or\ntwo technologies, like Java, C++, or JavaScript, but that is no longer enough.\nBefore now, web developers used to work in groups on specialized projects,\nsuch as front-end development carried out by a different team of\nprogrammers and back-end development written by a different team of\nprogrammers, also referred to as server-side developers.\nNowadays, everyone is looking for full-stack developers, someone who is\nknowledgeable in both front-end and back-end technology and can work\nindependently to develop a fully functional web application.\nTwo ways that people can use a computer to make websites are Django and\nFlask. Web developers use two different programs to create sites and web\napps. These two programs are called frameworks, and they help people make\nfun, cool sites that look nice and run fast. Django is one of the top\nframeworks because it is open source and works well. But you must learn\nabout web apps to build different web pages and website templates. You will\nneed to create different apps from scratch to develop a single web app. The\nsecond way, Flask, is simpler and easier.\nFlask is a newer framework that is easier to learn for building simple web\napps. That is a lovely place to start learning web development.\nThat is why you should be happy that you are on this journey to learn how to\nbuild websites and web apps with Flask and Django. Two in one!\nLearning a framework that complements your primary area of expertise is\npreferable. For example, a Python developer would learn more from Django\nand Flask than from Angular. Similarly, a JavaScript developer would learn\nReact and Node JS better than Django and Node JS. This book is only for\ndevelopers who are familiar with Python programming language.\nFull-stack development with Python\nThe Python programming language has many advantages, one of which is a\nrelatively quick development cycle. The career opportunities that Python as a\nfull-stack engineer may open up for you, however, may be its best feature.\nFull-stack and back-end Python engineers are still needed. Python is\nfrequently used in data science and machine learning, so as a full-stack\nengineer, you can add these to your repertoire of back-end skills.\nBack-end development using Python\nFlask, Django, Turbogears, CherryPy, Pyramid, Bottle, and Falcon are just a\nfew Python back-end frameworks. However, we'll talk about Django and\nFlask, the two most widely used frameworks.\nDjango\nThe developer community for the free and open-source project Django is\nsizable. As a result, its security, user, and role management, as well as\ndatabase migration management feature, frequently improve. Additionally,\nRESTful Web APIs are fully supported by the REST framework in Django.\nFlask\nAnother well-liked Python web framework is Flask. It's referred to as a\nmicro-framework and is lighter than Django. The back end of APIs is\nfrequently developed using Flask. The Flask community has lots of pluggable\nfeatures available.\nFront-end development using Python\nPython front-end development is still in its infancy in comparison to back-\nend development. Because of this, the front-end typically uses HTML,\nJavaScript, and CSS. In this course, you will learn how to implement\nBootstrap with Django and Flask to create a beautiful front-end interface.\nThe first part of this book focuses on the Flask framework, and the latter part\ndiscusses Django. We hope you find it interesting.\nTypically, it should not take you more than a few weeks at most to learn\nFlask and start to develop apps. However, that depends on your other\ncommitments and reasons for learning.\nThis book is divided into short chapters, which are isolated lessons. Many\nteachers would write their books and tutorials as a long lesson where they\ncreate an example app and update it throughout the book to demonstrate\nconcepts and tasks. That is not the case here. In this book, we include\nexamples in each lesson to illustrate the concepts, but we have examples from\nother chapters that may not even be related to the previous. Hence, the book\nis not meant to be combined into one large project.\nThis book will help you learn Flask by building a series of projects and\nshowing you verifiable screenshots so that you can use the skills to create\ndifferent projects with Flask. Please, as you read this book, I recommend\nopening your computer and implementing the codes as we go. The lessons in\nthis book will help you create a web application on your own.\nThe second part of this book is for Django. Django is exciting if you are\ninterested in building websites. Django is a framework for making websites.\nIt saves you a lot of time and makes building websites easier and more fun.\nDjango makes it easy to build and maintain high-quality web applications.\nWeb development is a creative journey, fun-filled and full of adventure, with\nenough stress to last a day! Django lets you focus on your web application's\nfun and critical parts while making the tedious parts easier. In other words, it\nmakes it easier to create common programming tasks and abstract common\nweb development patterns. It also gives clear rules for how to solve\nproblems. It does all these things and allows you to work outside the\nframework's scope when needed. My goal with this book is to help you learn\nand master Django. I want you to go as far as you possibly want to go in and\nunderstand the Django web framework.\nWhat is Django Used For?\nDjango's ORM layer is powerful. It speeds up development by streamlining\ndata and database management. Without ORM, web developers would have\nto form tabular displays and explain operations or queries, resulting in a large\namount of SQL that is difficult to track.\nIts models are all in one file, unlike other web frameworks. In larger projects,\nmodels.py may be slow.\nDjango supports multiple databases.\nSQLite can be used for development and testing without additional software.\nProduction databases are PostgreSQL or MYSQL.\nFor a NoSQL database, use MongoDB with Django.\nIn this book, you will walk with me as we create really awesome web\ndevelopment projects, CRUD (wiki style) blogs, and so on. The best way to\nlearn is by doing. So, follow along on your computer as you read the steps\nand keep up with me. You don’t have to cram every step. You will always\nhave this book as a reference. Follow me.\nP 1 F\nART LASK\nC 1 – L S\nHAPTER EARNING THE TRINGS\nAssuming that you are an intelligent programmer, you must identify and use\nspecific terms and conventions that guide the format of Python codes. You\nmight even know some of these conventions. This chapter discusses them. It\nwill be brief.\nThe PEP Talk\nA PEP is an abbreviation for \"Python Enhancement Proposal.\" Python.org\nindexes and hosts these proposals. PEPs are classified into several categories\nin the index, including meta-PEPs, which are more informative than\ntechnical. On the other hand, technical PEPs analyze enhancements to\nPython's internals.\nPEPs such as PEP 8 and PEP 257 guide how we write our code. Guidelines\nfor coding style are included in PEP 8. PEP 257 specifies procedures for\ndocstrings, the widely used method of documenting code.\nPEP 8: Style Guide for Python Code\nPython code should follow PEP 8 as the coding style. This is like a format for\nwriting Python programs. You can read about it if you want.\nWhen your code grows to multiple files with hundreds or thousands of lines\nof code, PEP 8 style will make it much more readable. Furthermore, if your\nproject will be open source, potential contributors will likely expect and feel\nat ease working with code written with PEP 8 in mind.\nOne crucial suggestion is to use four spaces per indentation level. Not tabs. If\nyou violate this convention, switching between projects will be difficult for\nyou and other developers. Inconsistency like this is annoying in any\nlanguage. Because that indented space is vital in Python, switching between\ntabs and spaces could result in errors that are difficult to debug.\nPEP 257: Docstring Conventions\nAnother Python standard is covered by PEP 257, and it is called docstrings.\nA docstring is a string literal that appears as the first statement in the\ndefinition of a module, function, class, or method. A docstring of this type\nbecomes the object's __doc__ unique attribute.\nRelative imports\nWhen developing Flask apps, relative imports make things a little easier. The\nidea is straightforward.\nFor example, if you are developing an app and need to import User model\nfrom myapp/models.py module. You might use the app's package name, such\nas myapp.models. This would indicate the location of the target module\nrelative to the source using relative imports. We use a dot notation instead of\na slash, with the first dot representing the current directory and each\nsubsequent dot representing the following parent directory.\n# myapp/views.py\n# An absolute import gives us the User model\nfrom myapp.models import User\n# A relative import does the same thing\nfrom .models import User\nThis method makes the package much more modular, which is a good thing.\nNow you can change the name of your package and use modules from other\nprojects without changing the import statements.\nIn summary, what will help you advance in your development journey is to\nfollow the style used in this book,\nfollow the coding style shown in PEP 8,\nuse docstrings defined in PEP 257 to document your app,\nimport internal modules with relative imports.\nApplication Directory\nI assume you are new to Flask, but you can use Python. Otherwise, I highly\nrecommend starting your journey by learning Python basics.\nAnyway, open your Python text editor or IDE and let us start. The first task is\nto create a folder where your project will sit. I use Visual Studio Code.\nOpen the Terminal, and type in the following code:\nmkdir microblog\nThat will create the folder. Now cd into your new folder with cd microblog.\nInstalling Python\nInstall Python if you don't already have it on your computer. It is possible to\ndownload an installer for Python from the official website if your operating\nsystem does not include a package. Please keep in mind that if you're using\nWSL or Cygwin on Windows, you won't be able to use the Windows native\nPython; instead, you'll need to download a Unix-friendly version from\nUbuntu or Cygwin, depending on your choice.\nInstalling Python\nFirst, go to Python’s official website and download the software. It is pretty\nstraightforward. Now, after downloading, run the program.\nWhen installing, click on Customise, and you can check these boxes. Most\nsignificantly, pip and py launcher. You may leave out the “for all users” if the\ncomputer is not yours.\nClick on next. Check Add Python to environment variables,” and install.\nInstall Pip\nPip is a Python package manager that will be used to add modules and\nlibraries to our environments.\nTo see if Pip is installed, open a command prompt by pressing Win+R, typing\n\"cmd,\" and pressing Enter. Then type \"pip help.\"\nYou should see a list of commands, including one called \"install,\" which we'll\nuse in the next step:\nIt's time for Flask to be installed, but first, I'd like to talk about the best\npractices for installing Python packages.\nFlask, for example, is a Python package available in a public repository and\ncan be downloaded and installed by anyone. PyPI (Python Package Index) is\nthe name of the official Python package repository (some people also refer to\nthis repository as the \"cheese shop\"). A tool called pip makes it easy to install\na package from the PyPI repository.\nYou can use pip to install a program on your computer as follows:\npip install <package-name>\nUnfortunately, this method of installing packages does not work in\nmany cases. To run the command above, you'll need to be an administrator on\nyour computer, which means you'll need to be logged in as an administrator.\nEven if you don't have to deal with that, think about what happens when you\ndo the installation described above. The package will be downloaded from\nPyPI and added to your Python installation using the pip command-line tool.\nAfter that, all your Python scripts can access the package you just installed.\nSuppose you've finished a web application using Flask version 1.1, which\nwas the most current version of Flask when you started but has since been\nreplaced by Flask version 2.0. You'd like to use the 2.0 version for a second\napplication, but if you replace the 1.1 version you already have installed, you\ncould end up causing problems for your older application. Do you see what\nI'm getting at? It would be ideal if Flask 1.1 and Flask 2.0 could coexist on\nthe same computer. Flask 1.1 will work as a backend for your older\napplication, and the newer app will have the current version at the time.\nPython uses virtual environments to deal with the issue of maintaining\nvarious versions of packages for various applications. That is what we will\ndiscuss in the next chapter.\nC 2 – V E\nHAPTER IRTUAL NVIRONMENTS\nYou can install more software now that the application directory has been\nconfigured. For your app to function correctly, you will require various\nsoftware. You must first have at least the Flask package, and the Python\ninstalled. If not, you might be reading the incorrect book. The environment\nfor your program is everything that must be accessible for it to run. There are\nnumerous things we can do to set up and maintain the environment for our\napp. This chapter is focused on that.\nWhen installing packages privately without impacting the Python interpreter\nthat is already installed on your system, you can do so in a virtual\nenvironment, which is a duplicate of the Python interpreter.\nVirtual environments are highly useful because they prevent the system's\nPython interpreter from becoming clogged with mismatched packages and\nversions. You may make sure that applications only have access to the\npackages they require by setting up a virtual environment for each project.\nThis allows you to create more virtual environments and keeps the global\ninterpreter clean. Additionally, since virtual environments may be created and\noperated without administrator privileges, they are superior to the system-\nwide Python interpreter.\nUse virtualenv to manage your environment\nvirtualenv is a program that isolates whatever application you are developing\nin a virtual environment. A virtual environment implies that all the software\nyour program depends on is stored in a single folder. This means that the\nsoftware is only usable by your application.\nThe Python interpreter is a type of virtual environment (a copy). Installing\npackages in a virtual environment has no impact on the Python interpreter\nused by the entire system. Only the copy is. As a result, creating a separate\nvirtual machine just for each application is the best way to ensure you can\ninstall any version of your packages. Additionally, virtual environments do\nnot require an administrator account because they are owned by the user who\ncreates them.\nInstead of using system-wide or user-wide package directories, we can\ndownload them to a separate, dedicated folder for our application. For each\nproject, we can choose the version of Python we want to use and which\ndependencies we want to have available.\nIt's possible to switch between various versions of the same package with\nVirtualenv. This kind of scalability can be crucial when working on an older\nsystem with multiple projects requiring different software versions.\nAs a result of using virtualenv, you'll be limited to a small number of Python\npackages on your machine. Virtualenv will be one of these. Pip may be used\nto install virtualenv.\nVirtual environments can be created as soon as virtualenv is installed on your\ncomputer. Run the virtualenv command in your project's directory to get\nstarted. The virtual environment's destination directory is the only parameter\nrequired.\npip install virtualenv\nNow that we've installed virtualenv, we can make different environments to\ntest our code. But it can be hard to keep track of all of these places. So we'll\npip install another package that will help us.\nInstall virtualenvwrapper\nvirtualenvwrapper is a package that lets you control the virtual environments\nthat virtualenv makes. Use the following line to install the virtual wrapper for\nour Flask projects.\npip install virtualenvwrapper-win\nMake a Virtual Environment\nThe structure of the command that makes a virtual environment looks like\nthis:\npython -m venv virtual-environment-name\nThe -m venv suggestion launches the venv package from the source file as a\nstandalone script with the name given as an argument.\nInside the microblog directory, you will now make a virtual environment.\nMost people call virtual environments \"venv,\" but you can call them\nsomething else if you'd like. Make sure that microblog is your current\ndirectory, and then run this command:\npython3 -m venv venv\n(you can use any name different from venv)\nAfter the command is done, you'll have a subdirectory called venv (or, like\nmine, blog inside the microblog folder. This subdirectory will have a brand-\nnew virtual environment with a Python interpreter for this project only.\nNow, activate the virtual environment by using the following line:\nblog\\Scripts\\activate\nOnce done with activating the virtual environment, You’ll see “(blog)” next\nto the command prompt. The line has made a folder with python.exe, pip, and\nsetuptools already installed and ready to go. It will also turn on the Virtual\nEnvironment, as shown by the (blog).\nThe PATH environment variable is updated to include the newly enabled\nvirtual environment when you activate it. A path to an executable file can be\nspecified in this variable. When you run the activation command, the name of\nthe virtual environment will be appended to the command prompt as a visual\ncue that the environment is now active.\nAfter a virtual environment has been activated, the virtual environment will\nbe used whenever python is typed at the command prompt. Multiple\ncommand prompt windows necessitate individual activation of the virtual\nenvironment.\nInstalling Python Packages\nAll virtual environments have the pip package manager, which is used to\ninstall Python packages. Similar to the python command, entering pip at a\ncommand prompt will launch the version of this program that is a part of the\nactive virtual environment.\nMake sure the virtual environment is active before running the following\ncommand in order to install Flask into it:\npip install flask\nWhen you run this prompt, pip will install Flask, and every software Flask\nneeds to work. You can check the packages installed in your virtual\nenvironment using pip freeze. Type the following command:\nType deactivate at the command prompt to return your Terminal's PATH\nenvironment variable and the command prompt to their default states once\nyou've finished working in the virtual environment.\nEach installed package's version number is shown in the output of pip freeze.\nMost likely, the version numbers you get will be different from those shown\nhere.\nYou can also make sure Flask was installed correctly by starting Python and\ntrying to import it:\nIf there\nare no errors, you can give yourself a pat on the back. You are ready to move\non to the next level.\nC 3 – P O\nHAPTER ROJECT RGANISATION\nFlask doesn't help you to organize your app files. All of your application's\ncode should be contained in a single folder, or it could be distributed among\nnumerous packages. You may streamline developing and deploying software\nby following a few organizational patterns.\nWe'll use different words in this chapter, so let's look at some of them.\nRepository - This is the folder for your program on the server. Version\ncontrol systems are typically used to refer to this word.\nPackage: This is a Python library that holds the code for your application.\nCreating a package for your project will be covered in greater detail later in\nthis chapter, so just know that it is a subdirectory of your repository.\nModule: A module is one Python file that other Python files can import. A\npackage is nothing more than a collection of related modules.\nPatterns of organization\nMost Flask examples will have all the code in a single file, usually called\napp.py. This works well for small projects with a limited number of routes\nand fewer than a few hundred lines of application code, such as those used\nfor tutorials.\nWhen you're working on a project that's a little more complicated, a single\nmodule can get cluttered. Classes for models and forms must be defined, and\nthey will be mixed in with the script for your routes and configuration. All of\nthis can slow down progress. To solve this problem, we can separate the\ndifferent parts of our app into a set of modules that work together. This is\ncalled a package.\nThis listing's structure lets you group the different parts of your application in\na way that makes sense. Model class definitions are grouped together in\nmodels. The definitions of routes and forms are in views.py. and forms.py,\nrespectively (we have a whole chapter for forms later).\nThis table gives a breakdown of the parts included in the majority of Flask\nprojects. You will likely have many additional files in your repository, typical\nof Flask apps.\nThis file is executed to launch a\ndevelopment server. It obtains a copy\nof the application from the package\nrun.py\nand runs it. This will not be used in\nproduction but is heavily utilized\nthroughout the development phase.\nThis file lists all Python packages on\nwhich your application depends. You\nrequirements.txt can have different files for\ndevelopment and production\ndependencies.\nThis file contains most of the\nconfig.py variables your project needs for\nconfiguration.\nThis file includes configuration\nvariables that should not be tracked\nby version control. This includes API\nkeys and database URIs with\nembedded passwords. Additionally,\nthis contains variables unique to this\n/instance/config.py instance of your program. For\nexample, you may have DEBUG =\nFalse in config.py but DEBUG =\nTrue in instance/config.py on your\nlocal development system. Because\nthis file will be read after config.py,\nDEBUG = True.\nThis is the package that contains your\n/yourapp/\napplication.\nThis file initializes your application\n/yourapp/__init__.py and assembles its diverse\ncomponents.\nThis is where route definitions are\nmade. It may be separated into its\n/yourapp/views.py package (yourapp/views/), with\nrelated views organized into\nmodules.\nThis is where you define the\napplication's models. Similar to\n/yourapp/models.py\nviews.py, this may be separated into\nmany modules.py.\nThis directory contains the public\nCSS, JavaScript, images and other\n/yourapp/static/ files you want to make public via\nyour app. It is accessible from\nyourapp.com/static/ by default.\nThis is where you’ll put the Jinja2\n/yourapp/templates/ templates for your app.\nInitialization\nAll Flask applications need to create an application instance. Using a protocol\ncalled WSGI, pronounced \"wiz-ghee\", the web server sends all requests from\nclients to this object so that it can handle them. The application instance is an\nobject of the class Flask. Objects of this class are usually made in this way:\nfrom flask import Flask\napp = Flask(__name__)\nThe only thing that has to be given to the Flask class constructor is the name\nof the application's main module or package. Most of the time, the __name__\nvariable in Python is the correct answer for this argument.\nNew Flask developers often get confused by the __name__ argument passed\nto the application constructor. Flask uses this argument to figure out where\nthe application is, which lets it find other files that make up the application,\nlike images and templates.\nBlueprints\nAt some time, you may discover that there are numerous interconnected\nroutes. If you're like me, your initial inclination will be to divide opinions. Py\ninto a package and organize the views as modules. It may be time at this\nstage to incorporate your application into blueprints.\nBlueprints are essentially self-contained definitions of your application's\ncomponents. They function as apps within your app. The admin panel, front-\nend, and user dashboard may each have their own blueprint. This allows you\nto group views, static files, and templates by component while allowing these\ncomponents to share models, forms, and other features of your application.\nSoon, we will discuss how to organize your application using Blueprints.\nC 4 – R & C\nHAPTER OUTING ONFIGURATION\nWeb applications that run on web browsers send requests to the web server to\nthe Flask application instance. For each URL request, the Flask application\ninstance needs to know the code to execute, so it keeps a map of URLs to\nPython functions. A route is a link between a URL and the function that calls\nit.\nModern web frameworks employ routing to aid users in remembering\napplication URLs. It is useful to be able to browse directly to the required\npage without first visiting the homepage.\nThe Python programming language has them built in. Decorators are often\nused to sign up functions as handler functions that will be called when certain\nevents happen.\nThe app.route decorator made available by the application instance is the\neasiest way to define a route in a Flask application. This decorator is used to\ndeclare a route in the following way:\n@app.route(\"/\")\ndef index():\nreturn \"<h1>Hello World!</h1>\"\nIn the previous example, the handler for the application's root URL is set to\nbe the function index(). Flask prefers to register view functions with the app.\nroute decorator. However, the app.add_url_rule() method is a more traditional\nway to set up the application routes. It takes three arguments: the URL, the\nendpoint name, and the view function. Using the app.add_url_rule(), the\nfollowing example registers an index() function that is the same as the one\nshown above:\ndef index():\nreturn \"<h1>Hello World!</h1>\"\napp.add_url_rule(\"/\", \"index\", index)\nSimilar to index(), view functions manage application URLs. Going to\nhttp://www.example.com/ in your browser would cause the server to run\nindex if the app runs on a server with the domain name www.example.com\n(). This view function's return value is the response the client receives. This\nanswer is the page displayed to the user in the browser window if the client is\na web browser. As we'll see later, a response from a view function could be\nas straightforward as an HTML string, or it might be more intricate.\nYou'll notice that many of the URLs for services you use on a daily basis\nhave sections that can be modified if you pay attention to how they are\nconstructed. For instance, https://www.facebook.com/your-name> is the URL\nfor your Facebook profile page. Your username is a part of this, making it\nparticular to you. Flask can handle these URLs using a special app.route\ndecorator. The steps to configure a route with an active portion are as\nfollows:\n@app.route(\"/user/<name>\")\ndef user(name):\nreturn \"<h1>Hello, {}!</h1>\".format(name)\nThe portion of a URL for a route that is enclosed in angle brackets changes.\nAny URLs that match the static portions will be mapped to this route, and the\nactive part will be supplied as an argument when the view function is called.\nIn the preceding illustration, a personalized greeting was provided in\nresponse using the name argument.\nThe active components of routes can be of other kinds in addition to strings,\nwhich are their default. If the id dynamic segment has an integer, for\nexample, the route /user/int:id> would only match URLs like /user/123.\nRoutes of the types string, int, float, and path are all supported by Flask. The\npath type is a string type that can contain forward slashes, making it distinct\nfrom other string types.\nURL routing is used to link a specific function (with web page content) to its\ncorresponding web page URL.\nWhen an endpoint is reached, the web page will display the message, which\nis the output of the function associated with the URL endpoint via the route.\nView decorators\nDecorators in Python are functions used to tweak other functions. When a\nfunction that has been decorated is called, the decorator is instead invoked.\nThe decorator may then perform an action, modify the parameters, pause\nexecution, or call the original function. You can use decorators to encapsulate\nviews with code to be executed before their execution.\nConfiguration\nWhen learning Flask, configuration appears straightforward. Simply define\nsome variables in config.py, and everything will function properly. This\nsimplicity begins to diminish while managing settings for a production\napplication. You might need to secure private API keys or utilize different\nsetups for various environments. For example, you need a different\nenvironment for production.\nThis chapter will cover advanced Flask capabilities that make configuration\nmanagement easier.\nA basic application might not require these complex features. It may be\njust enough to place config.py at the repository's root and load it in app.py or\nyourapp/__init__.py.\nEach line of the config.py file should contain a variable assignment. The\nvariables in config.py are used to configure Flask and its extensions, which\nare accessible via the app.config dictionary — for example,\napp.config[\"DEBUG\"].\nDEBUG = True # Turns on debugging features in Flask\nBCRYPT_LOG_ROUNDS = 12 # Configuration for the Flask-Bcrypt extension\nMAIL_FROM_EMAIL = \"abby@example.com\" # For use in application emails\nFlask, extensions, and you may utilize configuration variables. In this\nexample, we may use an app.config[\"MAIL_FROM_EMAIL\"] to specify the\ndefault \"from\" address for transactional emails, such as password resets.\nPutting this information into a configuration variable makes future\nmodifications simple.\nInstance folder\nOccasionally, you may be required to define configuration variables\ncontaining sensitive information. These variables will need to be separated\nfrom those in config.py and kept outside of the repository. You may hide\nsecrets such as database passwords and API credentials or setting machine-\nspecific variables. To facilitate this, Flask provides us with the instance folder\nfunctionality. The instance folder is a subdirectory of the repository's root\ndirectory and contains an application-specific configuration file. We do not\nwish to add it under version control.\nHow to use instance folders\nIf you want to load configuration variables from an instance folder, you can\nuse the function app.config.from_pyfile(). First, set the\ninstance_relative_config = True when creating your app with the Flask()\nfunction. The app.config.from_pyfile() will load the file from the instance/\nfolder.\n# app.py or app/__init__.py\napp = Flask(__name__, instance_relative_config=True)\napp.config.from_object(\"config\")\napp.config.from_pyfile(\"config.py\")\nNow, instance/config.py can contain variable definitions identical to those in\nconfig.py. Additionally, you should add the instance folder to the ignore list\nof your version control system. To accomplish this with Git, add instance/ to\na new line in.gitignore.\nSecret keys\nThe instance folder's private nature makes it an ideal location for establishing\nkeys that should not be exposed to version control. These may include your\napplication's private or third-party API keys. This is particularly crucial if\nyour program is open source or maybe in the future. We generally prefer that\nother users and contributors use their own keys.\n# instance/config.py\nSECRET_KEY = \"Sm9obiBTY2hyb20ga2lja3MgYXNz\"\nSTRIPE_API_KEY = \"SmFjb2IgS2FwbGFuLU1vc3MgaXMgYSBoZXJv\"\nSQLALCHEMY_DATABASE_URI = (\n\"postgresql://user:TWljaGHFgiBCYXJ0b3N6a2lld2ljeiEh@localhost/databasename\"\n)\nConfiguring based on environment variables\nDon’t add the instance folder under version control. This means you cannot\ntrace configuration changes to the config setup in your instance. If you have\none or two variables, this may be overlooked. Still, you don't want to risk\nlosing precisely calibrated setups for different environments (production,\nstaging, development, etc.).\nUpon load, Flask gives us the option to choose a configuration file based on\nthe value of an environment variable. As a result, we can store different\nconfiguration files in our repository and load the appropriate ones as needed.\nOnce a large number of configuration files have been produced, we can move\nthem into the appropriate configuration directory.\nWe'll take advantage of the app.config.from envvar() function to figure out\nwhich configuration file to import.\n# yourapp/__init__.py\napp = Flask(__name__, instance_relative_config=True)\n# Load the default configuration\napp.config.from_object(\"config.default\")\n# Load the configuration from the instance folder\napp.config.from_pyfile(\"config.py\")\n# Load the file specified by the APP_CONFIG_FILE environment variable\n# Variables defined here will override those in the default configuration\napp.config.from_envvar(\"APP_CONFIG_FILE\")\nVariable Rule\nApp routing is the process of mapping a certain URL to the function designed\nto complete a given action. The most recent Web frameworks employ routing\nto aid users in remembering application URLs.\nTo hard-code each URL while creating an application is pretty inconvenient.\nCreating dynamic URLs is a better way to handle this problem.\nUsing variable elements in the rule parameter allows you to create URLs on\nthe fly. Variable-name> is the name of this variable component. It is passed\nas a parameter to the function that corresponds to the rule.\nLet's examine the idea of variable rules in great detail.\nDynamic URLs can be created with the use of variable rules. They are\nessentially the variable sections added to a URL using the variable name> or\nconverter: variable name> tags. It is passed as a parameter to the function that\ncorresponds to the rule.\nSyntax:\n@app.route('hello/<variable_name>')\nOR\n@app.route('hello/<converter: variable_name>')\nC 5 – B A S A\nHAPTER UILD IMPLE PP\nYou've understood the various parts and configurations of a Flask web\napplication in the previous sections. Now it's time to write your first one. In\nthe example below, the application script defines an application instance, a\nsingle route, and a single view function, as we've already said.\nI'll be using Visual Studio Code, which has installed the Python extension.\nThe first step is to create a project folder. Mine is firstapp. Name yours\nwhatever.\nAfter you have cd that folder, create a virtual environment. I will name mine\nenvi.\npython -m venv envi\nNow, type code in the Terminal, and run. Visual Studio Code will open in a\nnew window. Now, open the app folder in the new window like this:\nNext, open the Command Palette. Go to View and click on Command Palette\n(or press Ctrl+Shift+P). Select Python: Select the Interpreter command.\nThis means you want to see interpreters that are available to VS can locate.\nHere's mine.\nGo to the Command Pallete again and search Terminal. Click on Terminal:\nCreate New Terminal (SHIFT + CTRL + `)\nCan you see the name of your virtual environment at the bottom left corner?\nMine has the \"envi\" as the name of my virtual environment.\nNow that the Virtual environment is active, install Flask in the virtual\nenvironment by running pip install flask in the Terminal.\nWhen you start a separate command prompt, run envi\\Scripts\\activate to\nactivate the environment. It should begin with (envi), indicating that it is\nengaged.\nThe actual app\nNow, we will create a new file named app.py inside the firstapp folder.\nIn app.py, we will add a code to import Flask and construct a Flask object\ninstance. This object will serve as the WSGI application.\nfrom flask import Flask\napp = Flask(__name__)\nWe will now call the new application object's run () function to run the main\napp.\nif __name__ == \"__main__\":\napp.run()\nWe develop a view function for our app to display something in the browser\nwindow. We will construct a method named hello() that returns \"Hello,\nWorld!\ndef hello():\nreturn \"Hello World!\";\nNow, let us assign a URL route so that the new Flask app will know when to\ncall the hello() view function. We associate the URL route with each view\nfunction. This is done with the route() decorator in front of each view\nfunction like this.\n@app.route(\"/\")\ndef hello():\nreturn \"Hello World!\"\nThe complete app.py script is like this:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef hello():\nreturn \"Hello World!\"\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nDevelopment Web Server\nUsing the flask run command, you can start a development web server for\nFlask applications. This command looks in the FLASK_APP environment\nvariable for the name of the Python script that includes the application\ninstance.\nTo run the app.py application, first, make sure the virtual environment you\nset up earlier is running, and that Flask is installed in it.\npython -m flask run\nWhen the server fires up, it goes into a loop that receives requests and\nhandles them. This loop will keep going until you press Ctrl+C to stop the\nprogram.\nOpen your web browser and type http://localhost:5000/ in the url bar while\nthe server is running. The screenshot below shows what you'll see once\nyou're connected to the app.\nNow that is the base url we set a route to. Adding anything else to the URL\nwill mean that your app won't know how to handle it and will send an error\ncode 404 to the browser.\nThe app.run() method can also be used to programmatically start the Flask\ndevelopment web server. In older Flask versions that didn't have the flask\ncommand, the server had to be started by running the application's main\nscript, which had to end with the following code:\nif __name__ == \"__main__\":\napp.run()\nThis is no longer necessary because of the flask run command. However, the\napp.run() function can still be helpful in some situations, such as unit testing.\nC 6 - D R\nHAPTER YNAMIC OUTES\nLet's now consider an alternative routing method. The next illustration\ndemonstrates how an alternative implementation of the program adds a\nsecond, dynamic route. Your name appears as a customized greeting when\nyou visit the active URL in your browser.\nIn this chapter, I will describe variable rules, converters, and an example of\ndynamic routing.\nWe've discussed routes, views, and static routing when the route decorator's\nrule parameter was a string.\n@app.route(\"/about\")\ndef learn():\nreturn \"Flask for web developers!\"\nIf you want to use dynamic routing, the rule argument will not be a constant\nstring like the /about. Instead, it is a variable rule you passed to the route().\nWe have learned about Variable Rules. However, read through this script to\nbetter get a glimpse of the variable rule:\n\"\"\"An application to show Variable Rules in Routing\"\"\"\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\n\"\"\"View for the Home page of your website.\"\"\"\nreturn \"This is your homepage :)\"\n@app.route(\"/<your_name>\")\ndef greetings(your_name):\n\"\"\"View function to greet the user by name.\"\"\"\nreturn \"Welcome \" + your_name + \"!\"\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nThis is the result:\nWhat happens if you add /name?\nLike magic! How can you do this? Pretty easy. Follow me.\nThe first thing you will find different in the new code is the second view\nfunction, greetings (). There is the variable rule: /<your_name>.\nThat means the variable is your_name (whatever you type after the /). We\nthen pass this variable as a parameter to the greetings() function. That is why\nit is called to return a greeting to whatever name is passed to it. Facebook is\nnot that sleek now, is it?\nConverter\nThe above example used the URL to extract the variable your_name. Flask\nnow converted that variable into a string and passed it to the greetings()\nfunction. That is how converters work.\nHere are the data types Flask converters can convert:\nStrings: this goes without saying\nint: they convert this only for when you pass in positive integers\nfloat: also only works for positive floats\npath: this means strings with slashes\nuuid: UUID strings means Universally Unique Identifier strings used\nfor identifying information that needs to be unique within a system or\nnetwork.\nLet us learn about another feature for web apps.\nC 7 – S T\nHAPTER TATIC EMPLATES\nThis chapter will teach you how to create and implement static and HTML\ntemplates. You will also learn file structure strategies.\nClean and well-structured code is essential for developing apps that are\nsimple to maintain. Flask view functions have two different jobs, and this can\ncause confusion.\nAs we can see, a view function's one obvious purpose is to respond to a\nrequest from a web browser. The status of the application, as determined by\nthe view function, can also be altered by request.\nImagine a user signing up for the first time on your website. Before clicking\nthe Submit button, he fills up an online form with his email address and\npassword.\nThe view method, which manages registration requests, receives Flask's\nrequest on the server containing the user's data. The view function interacts\nwith the database to add the new user and provide a response to display in the\nbrowser. These two responsibilities are formally referred to as business logic\nand presentation logic, respectively.\nComplex code is produced when business and presentation logic are\ncombined. Imagine having to combine data from a database with the required\nHTML string literals in order to create the HTML code for a large table. The\napplication's maintainability is improved by placing presentation logic in\ntemplates.\nThat is why a template is necessary. A template is a file that contains\nplaceholder variables for the dynamic parts of a response that are only known\nin relation to a request's context. The process known as rendering is what\ngives variables their real-world values in exchange for the final response\nstring. Flask renders templates using the powerful Jinja2 template engine.\nRendering HTML Templates\nFlask expects to find template files in the leading application directory's\ntemplates subfolder. These templates are actually HTML files.\nFlask can render HTML using two methods:\nas string\nusing render_template function\nA String\nYou can use HTML as a string for the function.\nHere is an example:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"<h1>There's Something About Flask!</h1>\"\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nWhen you run that and follow your local host link, this is what you get:\nThis came out well as a template because we use HTML tags h1. We can use\nany HTML codes in the scripts, and Flask will read it well.\nrender_template() function\nNow, the string is suitable for simple one-page websites. For big applications,\nyou must add your templates as separate files.\nIn this case, you create the HTML code and keep the file separate in the\nfolder. You will then call the file in the views function by the file names.\nFlask will use the render_template() function to render the HTML templates.\nThis function uses the following parameters:\ntemplate_name_or_list: that is the template file name or names if they\nare more than one\ncontext: these are variables that are in the template script.\nThe render_template() returns the output using the view instead of a string.\nHere is an example:\ndef view_name():\nreturn render_template(template_name)\nIn this case, we would already have a template saved, perhaps as home.html\nor index.html, with the HTML code in it. When you run the app, Flask will\nrun all the HTML codes included in the script, and the view will display them\non the web browser.\nFile Structure Strategies\nWhen you run the program, Flask will execute the script and run through\nyour \\templates folder to find the HTML files you reference in the script. You\nmust place the folder correctly so that there will be no errors. These are the\ncorrect file structures that Flask can read:\nModule File Structure\nThis is a very simple and straightforward structure where all the application\nlogic is in a single .py file. The templates folder will be the same folder as the\n.py file where the developer keeps the HTML files.\nPackage File Structure\nIn many complex apps, the script is divided into separate .py files. In this\ncase, you must present all the .py files in the same package. A package is a\nfolder that contains an __init__.py file.\nYou must create the templates folder in the main application package to use\nthis structure in your application.\nSo, let us do it together. First, know what we want to do: we want to render a\nhome.html template with the render_template() function in our web app,\napp.py.\nYou will create a templates folder and then create a file inside the new folder\nand call it home.html.\nFill home.html with this code:\n<!DOCTYPE html>\n<html>\n<h1>This is where we say FLASK! :)</h1>\n</html>\nNow, we can change our app.py code to call the HTML code.\nfrom flask import Flask, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"home.html\")\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nLook at the result!\nC 8 - T J 2 T E\nHAPTER HE INJA EMPLATE NGINE\nJinja2 is a Python template engine. It can be used instead of Python's standard\nstring interpolation, that is, adding data to strings. Flask can easily read Jinja2\ntemplates, which is easier to write than the typical Python code. Jinja2\ntemplates have a more natural language format.\nJinja2 templates are written in HTML or XML and then turned into \"jinja\"\nbytecode, which the Jinja environment can read and use. The python\ncompiler module turns the templates into bytecode, which is then run by an\ninterpreter that parses and runs jinja scripts built from HTML or XML\ntemplates.\nTemplates are files that contain both static and dynamic data placeholders. To\ncreate a finished document, a template is rendered with precise data. The\nJinja template library is used by Flask to render templates. Templates will be\nused in your application to render HTML shown in the user's browser.\nWe have to place the template file in the templates folder. The templates are\nin the root folder of the project.\nFor example, we can have our home.html to be:\n<!DOCTYPE html>\n<html>\n{% raw %}\n<h1>Hello {{ name }} </h1>\n{% endraw %}\n<h1>This is where we say FLASK! :)</h1>\n</html>\nWe will now write the view function as the following code:\n@app.route(\"/user/<name>\")\ndef index(name):\nreturn render_template(\"home.html\", name=name)\nThe Jinja2 template engine is built into the application by the Flask function\nrender_template(). The template's filename is the first argument to the\nrender_template() function. The rest of the arguments are key-value pairs that\nshow the real values of the variables in the template.\nVariables\nA template file is just a normal text file. The part to be replaced is marked\nwith double curly brackets ({{ }} ), in which the variable name to be replaced\nis written. This variable supports basic data types, lists, dictionaries, objects,\nand tuples. The same as in template.html:\n{% raw %}\n<p> A value form a string: {{ name }}. </p>\n<p> A value form a int: {{ myindex }}. </p>\n<p> A value form a list: {{ myindex }}.\n<p> A value form a list: {{ mylist[3]] }}. </p>\n<p> A value form a list: {{ mylist[3] }}.</p>\n<p> A value form a list, with a variable index: {{ mylist[myindex] }}. </p>\n<p> A value form a dictionary: {{ mydict['key'] }}. </p>\n<p> A value form a dictionary: {{ mydict['key'] }}.\n<p> A value form a tuple: {{ mytuple }}. </p>\n<p> A value form a tuple: {{ mytuple }}.</p>\n<p> A value form a tuple by index: {{ mytuple[myindex] }}. </p>\n{% endraw %}\nFilters\nAs you write your apps, you may want to change some parts of your values in\nthe template when they come on. For example, you may set the code to\ncapitalize the first letter in a string, remove spaces, etc. In Flask, one way to\ndo this is by using a filter.\nFilters in the Jinjia2 template engine work like pipes in Linux commands. For\nexample, they can capitalize the first letter of a string variable.\n{% raw %}\n<h1>{{ name | capitalize}}</h1>\n{% endraw %}\nBoth filters and the Linux pipeline command can be spliced. For example,\nyou can splice a line to do two things at the same time. Let us write a line to\ncapitalize values and take out whitespace before and after.\n{% raw %}\n<h1>{{ name | upper | trim }}</h1>\n{% endraw %}\nAs you see in the code, we connected the filter and the variable with the pipe\nsymbol |. That is the same as processing the variable value.\nHere are some standard filters web developers use:\nfilter description\nsafe rendering is not escaped\ncapitalize initial capitalization\nlower all letters lowercase\nupper all letters uppercase\ntitle Capitalize the first letter of each word in the value\ntrim removes the first blank character\nstripttags removes all HTML tags from the value when rendering\nControl structure\nJinja2 has a number of control structures that can be used to change how the\ntemplate is run. This section goes over some of the most useful ones and\nshows you how to use them.\nMany times, a smarter template rendering is needed, which means being able\nto program the rendering, such as having a style for boys and the same style\nfor girls. Control structure instructions need to be specified with command\nmarkers, and some simple control structures are explained below.\nConditions\nThis kind of structure is when you use a conditional statement, i.e., an if-else\nstructure in the template.\nHere's an example of how you can add a conditional statement to a template:\n{% raw %}\n{% if gender=='male' %}\nHello, Mr {{ name }}\n{% else %}\nHello, Ms {{ name }}\n{% endif %}\n{% endraw %}\nThe view function will be:\n@app.route(\"/hello2/<name>/<gender>\")\ndef hello2(name, gender):\nreturn render_template(\"hello2.html\", name=name, gender=gender)\nThis is no different from the typical python code structure.\nloop\nIf your web page has lists, for example, a control structure you want to use is\nloops. for loops are better suited. For example, let us display a list with ul.\n{% raw %}\n<ul>\n{% for name in names %}\n<li>{{ name }} </li>\n{% endfor %}\n</ul>\n{% endraw %}\nC 9 - B I\nHAPTER OOTSTRAP NTEGRATION WITH\nF\nLASK\nBootstrap is the most common CSS framework. It has more than 150k stars\non Github and a very large ecosystem that supports it. To make this chapter\nmore useful, we'll look at an open-source Flask project with a beautiful UI\nstyled with Bootstrap. This project comes in two flavors: a low model that\nuses components downloaded from the official Bootstrap Samples page and a\nproduction-ready model with more pages (home, about, contact) and a\ncomplete set of features.\nWhat is Bootstrap?\nTwitter's Bootstrap is a free web browser framework that makes it simple to\nconstruct aesthetically pleasing, clean web pages that function on desktop and\nmobile platforms with all current web browsers.\nBootstrap is a client-side framework that doesn't directly interact with the\nserver. The user interface elements must be created using HTML, CSS, and\nJavaScript code once the server sends HTML answers that connect to the\nappropriate Bootstrap Cascading Style Sheets (CSS) and JavaScript files. It is\neasiest to do all of this using templates.\nGetting Started\nThe first step in integrating Bootstrap with your program is to modify the\nHTML templates as needed. The following code will allow you to create an\nHTML file and view it in your browser.:\n<!doctype html>\n<html lang=\"en\">\n<head>\n<title>My First Bootstrap Page</title>\n<!-- Bootstrap CSS -->\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\nrel=\"stylesheet\">\n</head>\n<body>\n<h1 class=\"text-primary\">\nLet's learn Bootstrap\n</h1>\n<!-- Bootstrap Javascripts -->\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\nHowever, you can do this even better and faster with a Flask extension called\nFlask-Bootstrap, and you can install it with pip:\npip install flask-bootstrap\nYou can initialize Bootstrap into your script very quickly.\nCode Flask App with Bootstrap\nNow, go back to your app folder. You can delete and start over or open a new\nbase folder. Create a new app.py file and fill it with the following code:\nfrom flask import Flask, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef main():\nreturn render_template('index.html')\nif __name__ == \"__main__\":\napp.run()\nOnce that is saved, you can create an index.html template in the templates\nfolder. Fill it with this demo script I adapted from W3Schools:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Python Flask & Bootstrap 4</title>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\"\nhref=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n<style>\n.fakeimg {\nheight: 200px;\nbackground: #aaa;\n}\n</style>\n</head>\n<body>\n<div class=\"jumbotron text-center\" style=\"margin-bottom:0\">\n<h1>Python Flask & Bootstrap 4</h1>\n<p>Resize this responsive page to see the effect!</p>\n</div>\n<nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n<a class=\"navbar-brand\" href=\"#\">Navbar</a>\n<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-\ntarget=\"#collapsibleNavbar\">\n<span class=\"navbar-toggler-icon\"></span>\n</button>\n<div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n<ul class=\"navbar-nav\">\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n</ul>\n</div>\n</nav>\n<div class=\"container\" style=\"margin-top:30px\">\n<div class=\"row\">\n<div class=\"col-sm-4\">\n<h2>About Me</h2>\n<h5>Photo of me:</h5>\n<div class=\"fakeimg\">Fake Image</div>\n<p>this is everything I know</p>\n<h3>Some Links</h3>\n<p>I love Flask!.</p>\n<ul class=\"nav nav-pills flex-column\">\n<li class=\"nav-item\">\n<a class=\"nav-link active\" href=\"#\">Active</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link disabled\" href=\"#\">Disabled</a>\n</li>\n</ul>\n<hr class=\"d-sm-none\">\n</div>\n<div class=\"col-sm-8\">\n<h2>Learning Flask!</h2>\n<h5>Title description, 2022</h5>\n<div class=\"fakeimg\">Fake Image</div>\n<p>Some text..</p>\n<p>This is a revolution in the name of Flask, and everything is done in Visual Studio Code.\n</p>\n<br>\n<h2>TITLE HEADING</h2>\n<h5>Title description, Sep 2, 2017</h5>\n<div class=\"fakeimg\">Fake Image</div>\n<p>Some text..</p>\n<p>Another long text about how the world is going, and we are here learning about Flask.\nWhat\na beautiful thing to know, but after this, there is nothing more because we are all enjoying\nexercitation ullamco.</p>\n</div>\n</div>\n</div>\n<div class=\"jumbotron text-center\" style=\"margin-bottom:0\">\n<p>Footer</p>\n</div>\n</body>\n</html>\nRun the program by running python -m flask run in the Terminal while your\nvirtual environment is running, and you will see a complete Flask demo\nwebsite like this:\nLet us create a standard website where users can log in, sign up, and register.\nCreate a Real Flask Website\nCreate a new folder inside your base folder for your new website project. I\ncall it app. Inside it, we are going to create a new views.py file.\nSo, let us begin with the homepage. Every website needs a very specific\nhome page, and your home page will likely be very different from the rest of\nyour website.\nWe'll have a separate home page, the only page that doesn't \"extend\" any\nheader stuff like most pages. Bootstrap takes care of almost all the graphic\nstuff for you, which is great. You only have to decide where things go; the\nrest is styled for you. It really does help a lot, too.\nTo use Bootstrap, you'll need to ‘add’ it to your website. How do we do that?\nGetting Bootsrap\nIt is as simple as installing Python. Go to the official Bootstrap website here:\nhttps://getbootstrap.com/. Go to the download page and download it.\nNow, extract the zip file. Go to your Terminal and create a static folder inside\nthe new project folder called static. So run mkdir static. Move the two folders\njs and css to the static folder.\nAfter that, we'll need to look through the documents to see what's available. I\nusually just quickly scroll through until I see something that looks interesting.\nYou'll most likely be interested in the pages with components or JavaScript.\nBelow each thing shown is the code that made it. Note that all the features\nshould work if you copy and paste them onto your page. You will need to add\nthe script to the JavaScript. See the videos if you don't know what that means.\nIn short, you just need to include the required javascript file at the end of\nyour HTML body tags. This means that you need to call the javascript\nfunctions before you include the javascript function in the script tags.\nThe file we end up making is this:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Python Programming Tutorials</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link href=\"{{ url_for('static', filename='css/bootstrap.min.css') }}\" rel=\"stylesheet\">\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n</head>\n<header>\n<div class=\"navbar-header\">\n<a class=\"navbar-brand\" href=\"/\">\n<img style=\"max-width:120px; margin-top: -7px;\"\nsrc=\"{{ url_for('static', filename='images/mainlogo.png') }}\">\n</a>\n</div>\n<div class=\"container-fluid\">\n<a href=\"/dashboard/\"><button type=\"button\" class=\"btn btn-primary\" aria-label=\"Left Align\"\nstyle=\"margin-top: 5px; margin-bottom: 5px; height: 44px; margin-right: 15px\">\n<span class=\"glyphicon glyphicon-off\" aria-hidden=\"true\"></span> Start Learning\n</button></a>\n<div style=\"margin-right: 10px; margin-left: 15px; margin-top: 5px; margin-bottom: 5px;\"\nclass=\"container-fluid\">\n</div>\n</div>\n</header>\n<body>\n<script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\n<script type=\"text/javascript\" src=\"{{ url_for('static', filename='js/bootstrap.min.js') }}\"></script>\n</body>\n</html>\nThis is the main.html file.\nWeb App\nLet's actually go ahead to start building our first web page or website with\nflask. I have created a new .py file I call app.py in the project folder. Fill it\nwith the following code:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"Welcome to my Main Page <h1>Hello!<h1>\"\n@app.route(\"/<name>\")\ndef user(name):\nreturn f\"Hello {name}\"\nif __name__ == \"__main__\":\napp.run()\nIn this code, we have created a new app route. This will create a Hello and\nput whatever you put in after the slash.\nPage redirect\nNow, what if you want to redirect different pages from your code? For\nexample, if we're going to get to a separate page, we need to type that actual\npage, but sometimes a user goes to a page they're not supposed to be. Perhaps\nthey are not authenticated. We need to redirect them to the home page.\nWe go back to our app.py, and import two modules called redirect and\nurl_for. These two will allow us to return a redirect from a specific function.\nHere is the new file:\nfrom flask import Flask, redirect, url_for\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"Welcome to my Main Page <h1>Hello!<h1>\"\n@app.route(\"/<name>\")\ndef user(name):\nreturn f\"Hello {name}!\"\n@app.route(\"/admin\")\ndef admin():\nreturn redirect(url_for(\"user\", name=\"Admin!\"))\nif __name__ == \"__main__\":\napp.run()\nIn this example, we assume that we have an admin page that can only be\naccessed by someone who's signed in or is an admin. After creating the\ndecorator, we input the redirect to redirect the user to a different page. We\nthen type in the url_for() function, and inside it, we put the name of the\nfunction we want to redirect to inside of strings. Restart your server and add\nthe slash admin to be redirected to the home page.\nTemplate inheritance\nTemplate inheritance is an extremely useful tool, so you're not repeating\nHTML code, JavaScript, or whatever it's going to be throughout your entire\nwebsite. It essentially allows you to create a base template that every other\none of your templates will work off of, and that is what we will use for our\nwebsite with bootstrap.\nI'm also going to be showing you how we can add Bootstrap to our website\nand just create a basic navbar.\nWhat is Template Inheritance\nIf we look at the bootstrap website, for example, we can see that this website\nhas a theme, and we can kind of detect that theme by the navbar. You see a\nspecific color, buttons, links and so on. All pages on that website have the\nsame theme in terms of colors and buttons.\nIt would be boring and stupid to keep writing the code to generate this navbar\non every single web page they have because this will stay the same for most\nof the pages.\nFlask at least makes this really easy because we can actually inherit\ntemplates. Now I'm going to do to illustrate this is just create a new template.\nI'm just going to create a new file. I will save this as base.html, representing\nthe base template or the base theme of my website. It will store all the HTML\ncode that will persist throughout most or the entire website. So, populate the\nbase.html with the following code:\n<!doctype html>\n<html>\n<head>\n<title>Home Page</title>\n</head>\n<body>\n<h1>{{content}}</h1>\n</body>\n</html>\nWe'll start working with a few things here, so since this is our base template,\nwe are not going to ever render this template. We'll always use this as\nsomething from which the child templates, which will be, for example,\nindex.html, will inherit.\nInheritance essentially means to use everything and then change a few small\nthings are overwrite some functionality of the parent, which in this case is\ngoing to be the base.html, so the way that we can allow our child templates to\nchange specific functionality of the base template is by adding something\ncalled blocks.\n<!doctype html>\n<html>\n<head>\n<title>{% block content %}{% endblock %}</title>\n</head>\n<body>\n<h1>Abby’s Website</h1>\n</body>\n</html>\nYou can see the block in the curly brackets with the same tags used to write\nyou know for loops and if statements in HTML code. The name directly after\nblock is the name of the block. We then simply end the block by typing\nendblock with similar syntax. This says we're going to define a block we're\ngoing to call content, and in this block, we will allow the child template to\ngive us some content that we will fill in.\nLet us now go to the child template I can inherit. Create a new index.html in\nthe templates folder. Create this block and then tell the block where what\ncontent I want. Then it will substitute it inside here for a title and use that title\nwhen we render the template.\nHere is the code in the index.html file:\n{% extends \"base.html\" %}\n{% block title %}Home Page{% endblock %}\n{% block content %}\n<h1>My Home!</h1>\n{% endblock %}\nOur base.html\n<!doctype html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n<h1>Abby's Website</h1>\n{% block content %}\n{% endblock %}\n</body>\n</html>\nI'm going to do is actually give some content for that block title, so this is the\nexact same as what we had in our base template, except this time I'm actually\ngoing to put some stuff in between kind of blocks, so I'm going to say and\nblock like that so block content and block and then inside here I'm actually\njust going to put homepage now what this is going to do is very similar just\nkind of like an HTML tag where this homepage now will be replaced with\nwhatever this block title is and that will actually show now for us inside title\nso very useful. I'm going to put something that just says Abby's website, and\nthis h1 tag will be shown on every page no matter what.\nOur app.py:\nfrom flask import Flask, redirect, url_for, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\nif __name__ == \"__main__\":\napp.run(debug=True)\nThe result:\nSo, every page we go to will have Abby’s Website as the inherited template.\nI was saying that we're going to have some more complex components. I'm\ngoing to show you how we can add a nav bar now and then how we can use\nthe base template so all our other templates will have that nav bar on it. Let's\nactually talk about adding Bootstrap.\nAdding Bootstrap\nIf you're unfamiliar with Bootstrap, it is a CSS framework for quickly\ncreating and styling your website. To add, it is actually pretty easy.\nYou will go to the Bootstrap website and grab the codes! It is basically copy\nand paste. Don’t think programmers are magicians. We don’t cram stuff.\nSimply go here on your browser https://getbootstrap.com/docs/4.3/getting-\nstarted/introduction/ and grab the codes.\nI'm going to look where it says CSS, and I will copy the link with the copy\nbutton.\nI'm going to take that CSS link and paste that inside the head tags of my\nwebsite, in this case, the base.html template. Next, I'm going to go to where it\nsays Js and copy that too and put them at the end of the body.\nThis will allow us to use a library of different classes and a bunch of different\nkinds of styling from bootstrap to make our website look nicer.\nIf you look at the codes, you will see cdn at the end. That means we don't\nneed to download any Bootstrap files because this will just grab the CSS and\nJavaScript code from the Bootstrap server.\nNav bar From Bootstrap\nI will show you how we can just grab a sidebar layout or a navbar layout\nfrom the bootstrap website. Go to the sidebar and search for whatever you\nneed. In this case, the nav bar. Look for one that you like, as there are a\nbunch of different nav bar codes.\nJust place the code on the website in the base template right after the first\nbody tag. Any child template will automatically have this nav bar at the top\nof it.\nOur current base.html code:\n<!doctype html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\"\nintegrity=\"sha384-\nggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\ncrossorigin=\"anonymous\">\n<title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n<a class=\"navbar-brand\" href=\"#\">Navbar</a>\n<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\naria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n<span class=\"navbar-toggler-icon\"></span>\n</button>\n<div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n<ul class=\"navbar-nav\">\n<li class=\"nav-item active\">\n<a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Features</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Pricing</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\n</li>\n</ul>\n</div>\n</nav>\n<h1>Abby's Website</h1>\n{% block content %}\n{% endblock %}\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\nintegrity=\"sha384-\nq8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js\"\nintegrity=\"sha384-\nUO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"\nintegrity=\"sha384-\nJjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\ncrossorigin=\"anonymous\"></script>\n</body>\n</html>\nThe new face of the website:\nIf you wanted to change anything associated with the navbar, obviously, all\nthe codes here so you can change them, but that's just what I wanted to show\nyou regarding how we can add bootstrap.\nThere are several other frameworks for styling, but I like bootstrap because\nit's pretty easy.\nC 10 – HTTP M (GET/POST) &\nHAPTER ETHODS\nR F D\nETRIEVING ORM ATA\nThe templates you worked with in this course are one-way, meaning that\ninformation can only flow from the server to the user. Most applications also\nneed the information to flow in the opposite direction, from the user to the\nserver, where it is accepted and processed.\nYour website may want to collect data from users instead of serving them.\nThis is done with forms.\nWith HTML, you can make web forms that users can use to enter\ninformation. The data from the form is then sent to the server by the web\nbrowser. This is usually done as a POST request.\nWe'll talk about HTTP methods in this chapter. The standard way to send and\nreceive information from and to a web server is through HTTP methods.\nSimply put, a website runs on one or more servers and sends information to a\nclient (web browser). The client and the server share information using\nHTTP, which has a few different ways to do this. We will talk about the ones\ncalled POST & GET that are often used.\nGET\nGET is the most common way of getting or sending information to a website.\nGET is the most commonly used HTTP method to retrieve information from\na web server, depending on how this information is going.\nPOST\nPOST is a way of doing this securely, so GET is an insecure way of getting\nthe most commonly used information. People often use the POST method to\nsend information to a web server. It is often used when sending sensitive\ninformation, uploading a file, or getting form data. With POST, you can send\ndata to a web server in a safe way.\nA basic example of that is when we type something in the URL bar or in the\naddress bar. For instance, if you have your local server running, you will see\na command that pops up saying GET in the console when you go to the home\npage. Whenever we type something that's not secure, anyone can see it, and\nthe data will be sent to the server here. Then it will return us the actual web\npage using a GET method.\nIf we were to use POST, what we would actually do is send secure and\nencrypted information. Something that cannot be seen from either end and is\nnot stored on the actual web server. That is the difference between GET and\nPOST.\nThe best way to think of it is whenever you're using a GET command, it's\nsomething that's not secure that you don't care if someone sees it. It's\ntypically typed in through the address bar where it's just a link you redirect to,\nand then with POST, that's something secure. It's usually form data. It's\nsomething that we're not going to be saving on the actual web server itself\nunless we're going to be sending that to it.\nWeb Forms\nLet's now go through a basic example of web forms in a website. You can use\nthe same app.py we have been working with here. You only need to add a\nfew different pages for this example first. Here is what the new code will be\nlike:\nfrom flask import Flask, redirect, url_for, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nreturn render_template()\n@app.route(\"/<usr>\")\ndef user(usr):\nreturn f\"<h1>{usr}</h1>\"\nif __name__ == \"__main__\":\napp.run(debug=True)\nSo what I want to do is set up a page here for logging in\nLogin page template\nNow, I'm going to go and build out the login page template inside my\ntemplates folder. Create a new file and call this login.html; inside, we'll start\ncreating the form. Here is the script to create a form:\n{% extends \"base.html\" %}\n{% block title %}Login Page{% endblock %}\n{% block content %}\n<form action=\"#\" method=\"post\">\n<p>Name:</p>\n<p><input type=\"text\" name=\"nm\" /></p>\n<p><input type=\"submit\" value=\"submit\" /></p>\n</form>\n{% endblock %}\nSo we start by extending that base.html and then do the tags for our title. So\nessentially, a form is a way to send information to the website.\nWhenever we know we will get some information from a form, we need to\nput our form tags in HTML. I'm just going to specify that here, and we need\nto say the action this form will take now. The action is essentially just a URL\nwe want to redirect to once this form is submitted.\nWe've decided how the form will be sent. This means that when the form is\nsent, we will send a request with the data to the web server.\nNote the name of the text input field. We will use this to get the value of the\nfield from our Python code.\nSo we've created the form. You need to go back to the app.py and render the\nnew template.\nBack-End\nFirst, add request to the imports in your app.py script. So the first line is like\nthis:\nfrom flask import Flask, redirect, url_for, render_template, request\nNow, add the new login.html in the login function block like this:\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nreturn render_template(\"login.html\")\nNow, we have rendered this template. We need to figure out how we'll get\nthis information and handle it from this side. You can test your new update\nby restarting the server in your console and going to the url/login.\nYou should see a basic little box where we can type some things in, and we\nhave a submit button.\nHowever, when you hit that button, all you see is a hashtag here, and it's\ndifferent because it's using POST. If you refresh the page, you will get a GET\nrequest rather than a POST.\nThe job of the request we imported is to determine in this login function\nwhether we called the GET request or the POST request. I will show you how\nwe can check whether we reach this page with a GET request or a POST\nrequest.\nBasically, all we're going to do is use an if-else clause. We say if\nrequest.method == POST, then we're going to do something specific.\nOtherwise, we'll do something else.\nIn this case, what I'm going to do is move this render down here, so if we\nhave the get request, what we're going to do is render the log in template\nbecause that means you know we didn't click the submit button we're just\ngoing to the /login page so let's show it here but if we have POST what I want\nto do is actually get the information that was from that little name box and\nthen uses that and send us to the user page where we can display the user's\nname.\nSo how do we do that? It's pretty easy, so all we need to do is set up a\nvariable that will store our users' names. We need to say user equals\nrequest.form, and then we will put the dictionary key that we want for the\nname corresponding. In the login.html script, we had name = nm, so we'll put\nnm as a dictionary key in the code. What that's going to do is actually give us\nthe data that was typed into this input box.\ndef login():\nif request.method == \"POST\":\nuser = request.form[\"nm\"]\nreturn redirect(url_for(\"user\", usr=user))\nelse:\nreturn render_template(\"login.html\")\nWe are using the redirect(url_for) function to make sure that this page will\nnot be blank before we go to the next page. We are telling Flask to use the\ndata from the form to redirect us to the user page. Refresh your server and\ntest it out.\nAfter clicking submit:\nYou can see that we get redirected to a page that says our name.\nThat is how we actually get information from a form, and obviously, if you\nhave more than one info you want, you just add it to the input type in the\nlogin.html script. Then you can get all those information by just using the\nname as a dictionary key on the request.form.\nBootstrap forms\nIf you want to create a beautiful form, you can use Bootstrap. Just like we got\nthe code for the nav bar, you can get the code for a good form.\n{% extends \"base.html\" %}\n{% block title %}Login Page{% endblock %}\n{% block content %}\n<form action=\"#\" method=\"post\">\n<div class=\"mb-3\">\n<label class=\"form-label\" for=\"inputEmail\">Email</label>\n<input type=\"email\" class=\"form-control\" id=\"inputEmail\" placeholder=\"Email\">\n</div>\n<div class=\"mb-3\">\n<label class=\"form-label\" for=\"inputPassword\">Password</label>\n<input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Password\">\n</div>\n<div class=\"mb-3\">\n<div class=\"form-check\">\n<input class=\"form-check-input\" type=\"checkbox\" id=\"checkRemember\">\n<label class=\"form-check-label\" for=\"checkRemember\">Remember me</label>\n</div>\n</div>\n<button type=\"submit\" class=\"btn btn-primary\">Sign in</button>\n</form>\n{% endblock %}\nThis code is still built on the base template.\nYou have learned the basics behind this. Notice that request.form comes in as\na dictionary, meaning you can access each object using the key.\nMost applications need to take information from the user through web forms,\nstore that information, and use it for the user experience. The next chapter is\nabout sessions and cookies in Flask.\nC 11 – S . C\nHAPTER ESSIONS VS OOKIES\nThis chapter is about sessions. Now to try to explain what sessions are, I'm\ngoing to give you an example of what we did in the previous chapter and talk\nabout how we could do this better.\nSo essentially, we had a login page, and once we logged in, we got the user's\nname, and then we redirected them to a page that showed them their name.\nBut every time we want to see the users' names, we need them to log in again\nand again.\nWhat if we want to direct to another page and that page wants the user's\nname? that means we have to set up a way to pass the user's name to that\npage. For example, if we want to set up a page for a specific user. That means\nwe have to use a parameter, set up another link, and so on. That is not the\nbest way to do things, and sometimes you know you don't want to redirect to\na page it says /Abby or /Jo.\nWhat we're going to do to pass around information through the back-end and\nour different web pages is use something called sessions.\nSessions\nSessions are great because they're temporary. They're stored on the web\nserver and simply there to quickly access information between your website's\ndifferent pages. Think of a session as something you'll load to use while the\nuser is on your website.\nThat session will work when they're browsing on the website, and then as\nsoon as they leave, it will disappear. For example, on Instagram or Facebook,\nwhen someone logs in, a new session will be created to store their username.\nProbably some other information as well about what they're doing on the\nwebsite at the current time, and then as they can go between different pages,\nthose pages can access that session data so it can say okay, so I moved to my\nprofile page this is the profile of Abby I know that because I stored that in a\nsession. So let's show all the information I have stored in the session that only\nAbby needs to see.\nThen, as soon as that user leaves the web page or logs out, all of that session\ndata is erased. And the next time they log in, data will be reloaded into the\nsession, where it can be used for the rest of the pages.\nSessions or Cookies?\nDo you accept cookies? You may have seen this a lot. I just want to quickly\nexplain the difference between a cookie and a session to clear up any\nconfusion.\nCookie: This feature is stored on the client side (in the user’s web browser)\nand is NOT a safe way to store sensitive information like passwords. It is\noften used to remember where a user left off on a page or their username so\nthat it will be filled in automatically the next time they visit the page.\nSession: This is saved in a temporary folder on the web server. It is encrypted\nand is a safe way to store information. Sessions are often used to store\ninformation that the user shouldn't be able to see or modify.\nHow to set up a Session\nI want to do an example where the user logs in, we create a session for them\nthat stores the name, and then we can redirect to another page that doesn't\nhave this /user.\nIn this basic example, a user logs in, and we will hold their username in a\nsession until they log out.\nLet us open our app.py and add session from flask and timedelta from\ndatetime to the first lines.\nfrom flask import Flask, redirect, url_for, render_template, request, session\nfrom datetime import timedelta\nWhen the user presses login or submit on that login page, we will set up\nsession data based on whatever information they typed in.\nI will paste the finished script up here and explain the process:\nfrom flask import Flask, redirect, url_for, render_template, request, session\nfrom datetime import timedelta\napp = Flask(__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\")\ndef user():\nif \"user\" in session:\nuser = session[\"user\"]\nreturn f\"<h1>{user}</h1>\"\nelse:\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nsession.pop(\"user\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nAfter importing session, the first and most important thing in sessions is the\ndata to set up.\nUnder the login function, we set the session to the user = user. This is to set\nup some data for our session to store data as a dictionary just like we've seen\nthis requests.form. If I want to create a new piece of information in my\nsession, I can simply type the name of whatever I want that dictionary key to\nbe and then set it equal to some specific value. In this case, this is the user\nwho clicks Submit to the form.\nHow do we get that information to use on another page? Next, I will change\nthe redirect to redirect to the user, but I'm not going to pass the user as an\nargument without passing any information from the user function.\nTo do that, I need a conditional clause in the user function. This new\nstatement will first check if there's any information in the session before I\nreference the user's dictionary key. Technically, someone could just type\n/user and access the user page without being logged.\nThat is as easy as it is to store and retrieve session data.\nNext, the else statement. This is what Flask will do if this session does not\nexist. If there is no user in my session, that means that the user has not logged\nin yet or has left the browser and needs to log in again. That is the job of the\nredirect line.\nNow, what does the secret key do? It is essentially the way that we decrypt\nand encrypt data. The line is usually typed at the beginning of the script as\napp.secretkey with any string you want.\nSession Data\nIf someone logs out, you probably want to delete all the information\nassociated with their session or at least some of that information. So you need\na new page for logout.\nThe job of the session.pop() function is to remove some data from our\nsession. In the function, we pass in “user”, None. What this is going to do is\nactually remove the user data from my sessions. This is just how you remove\nit from the dictionary. Then this none is just a message that's associated with\nremoving that data.\nAfter that, we must return the user to the login page. So we'll say url_for\n(“login”).\nSession Duration\nRemember that as it stands, the session data is deleted when the user closes\nthe browser. That is why we need the permanent sessions. Now what I'm\ngoing to do to set up the permanent session here is define how long I want a\npermanent session to last. So you may have sometimes noticed you know you\nrevisit a website a few days later, and you just log in immediately. You don't\nactually have to, you know, go through the process, or maybe your\ninformation is already typed in, and you just hit login. We will store some of\nthis information in permanent sessions, which means keeping it longer. So\nthat every time you go back to that web page, you can quickly access\ninformation that you need, and you don't need to log back.\nC 12 – M F\nHAPTER ESSAGE LASHING\nIn this chapter, we will talk about flashing messages on the screen.\nEssentially, message flashing shows some kind of information from a\nprevious page on the next page when something happens on the GUI.\nFor example, say I log in, it redirects me to another page and then maybe on\nthe top of that page, it says logged in successfully, login error, or if I log out,\nperhaps I'm going to get redirected to another page. Still, I want to show on\nthat other page that I logged out successfully, so I'll flash a message in a\nspecific part of that page so that the user has some idea of what they actually\ndid. This is to give them a little bit more interaction with the page.\nflash() Function\nInstead of thinking about changing the whole page or passing through some\nnew variables to show on the screen, you can just flash a message quickly\nwith a module called flash().\nAll you need to do is to import flash. Then you can use this function to\ndisplay or kind of like post the messages that are to be flashed and then from\nthe different pages, we can decide where we want to flash those, and we'll do\nthat in a second.\nWe will use the same app.py from the previous section because we will also\ndeal with sessions and log in.\nThe simple syntax is\nflash(message, category)\nA basic example of when you might want to flash a message in our app.py\nscript is where a user logs out. When we log out, we go to a logout page that\npops our session and redirects us back to the login page. What if we can show\na “Logged out successful” message on that page so that they know there\nwasn't an error?\nFirst, import flash from flask. That means it goes in the first line. So go to the\nlogout function in the script and input the following line before the redirect\nline:\nflash(\"You Have Logged Out Successfully!\", \"info\")\nThe next parameter for this is the category, which is optional. Still, I'm going\nto put “info” as the category. One of the built-in categories includes a\nwarning, info, and error.\nDisplaying Flash Message\nNow that we have written a message, we need to display the message from\nour different pages. So go to the login page, and inside the block content,\nwrite a templated code here to show all of the flashed messages that come up:\n{% extends \"base.html\" %}\n{% block title %}Login Page{% endblock %}\n{% block content %}\n{% with messages = get_flashed_messages() %}\n{% if messages %}\n{% for msg in messages %}\n<p>{{msg}}</p>\n{% endif %}\n{% endif %}\n{% endwith %}\n<form action=\"#\" method=\"post\">\n<p>Name:</p>\n<p><input type=\"text\" name=\"nm\" /></p>\n<p><input type=\"submit\" value=\"submit\" /></p>\n</form>\n{% endblock %}\nThe new thing in this is the with, which is just another Python syntax you can\nuse here. It says to check if there's any to display. We'll loop through them\nand show them.\nNotice that we can have more than one flash message, which means if we go\nbetween a few different pages, we'll show two or three flash messages on a\nspecific page.\nAs you see, when I logged out, I saw the message.\nThe problem we have now is that this message pops out whenever you type\n/log out, even if you had not been logged in before. In that case, we could\ncheck if we have a user in the session and only if we do will we say you've\nbeen logged out.\nWhat will we do? We will add an if statement to check if the user was in\nsession and then display their name and say they have been logged out.\nfrom flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\napp = Flask(__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\")\ndef user():\nif \"user\" in session:\nuser = session[\"user\"]\nreturn f\"<h1>{user}</h1>\"\nelse:\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nIf you run this, you will get the result:\nNot logged in, it displays this without the flash message.\nDisplaying More Than 1 Message\nWe will change the app.py and create a new user.html file to do this example.\nLet's start by creating a new HTML file that we'll use to render the user page.\nWith the app.py right now, we just have some h1 tags. Let us make\nsomething that looks a little bit nicer.\n{% extends \"base.html\" %}\n{% block title %}User{% endblock %}\n{% block content %}\n{% with messages = get_flashed_messages() %}\n{% if messages %}\n{% for message in messages %}\n<p>{{ msg }}</p>\n{% endfor %}\n{% endif %}\n{% endwith %}\n<h2>User Authenticated</h2>\n<p>Welcome, {{user}}</p>\n{% endblock %}\nNow, we go to the user function in the app.py file and render the new\ntemplate.\nWe can also flash a new message after running the log-in function. We could\nalso flash “You are not logged in” when the person tries to enter the /user\npage from the url.\nfrom flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\napp = Flask(__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\")\ndef user():\nif \"user\" in session:\nuser = session[\"user\"]\nreturn render_template('user.html', user=user)\nelse:\nflash(\"You Are NOT Logged In!\")\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nNow, let us test it out:\nThat is the message flashing. In the next chapter, we'll get into the basic\ndatabase and discuss how to set up a scalable web server.\nC 13 – SQL A S & M\nHAPTER LCHEMY ET UP ODELS\nIn this chapter, what we're going to be doing is talking about databases and\nhow we can actually save user-specific information to the database.\nApplication data is organized and kept in a database. When necessary, the\nprogram then issues queries to retrieve specific portions of the data. The\nmajority of online applications make use of relational model-based databases.\nBecause they employ Structured Query Language, these databases are\nsometimes known as SQL databases. However, document-oriented and key-\nvalue databases, also known as NoSQL databases, have gained popularity as\nalternatives in recent years.\nA few database models will be made.\nA Flask add-on called Flask-SQLAlchemy makes it simpler to use\nSQLAlchemy in Flask programs. Strong relational database framework\nSQLAlchemy is compatible with a variety of database backends. It has both a\nhigh-level ORM and a low-level way to access the SQL features of the\ndatabase.\nCreating A Simple Profile Page\nWe want to collect few data from the user. When the user logs in, they're\nbrought to a page where they can modify some information about themselves.\nThis is called CRUD (create-update-update-delete).\nWell, to keep things simple, we're just going to make that information an\nemail. In this program, we will create, and each user will upload an email.\nWhen they go there, they can change their email, they can update it, they can\ndelete the email, and we'll save that in a database and then the next time that\nthe user logs in, we'll look for that email, and we'll display it, and then they\ncan change it. This will give you an idea of how we have persistent\ninformation in CRUD programs in Flask.\nDatabase Management with Flask-SQL Alchemy\nWe will need to install it as an extension in our virtual environment. Stop\nyour server in the command prompt or terminal and do a pip install flask-\nSQLalchemy.\npip install flask-sqlalchemy\nOnce done, open your app.py and import sqlachemy.\nNow we're just going to work on some of the front-end stuff for the website.\nSo we will start by getting the form set up, grabbing some information from\nthe form with a post request and then we'll get into the database.\nThe first step is the user.html file.\n{% extends \"base.html\" %}\n{% block title %}User{% endblock %}\n{% block content %}\n{% with messages = get_flashed_messages() %}\n{% if messages %}\n{% for message in messages %}\n<p>{{ msg }}</p>\n{% endfor %}\n{% endif %}\n{% endwith %}\n<form action=\"#\" method=\"POST\">\n<input type=\"email\" name=\"email\" placeholder=\"Enter Email\" value=\"{{email if email}}\" />\n<input type=\"submit\" value=\"submit\" />\n</form>\n{% endblock %}\nAnd look closely at the changes in the app.py file:\nfrom flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask (__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\", methods=[\"POST\", \"GET\"])\ndef user():\nemail = None\nif \"user\" in session:\nuser = session[\"user\"]\nif request.method ==\"POST\":\nemail = request.form[\"email\"]\nsession[\"email\"] = email\nelse:\nif \"email\" in session:\nemail = session[\"email\"]\nreturn render_template('user.html', email=email)\nelse:\nflash(\"You Are NOT Logged In!\")\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nsession.pop(\"email\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nThe result:\nI've actually made a change in the base template too. I've added this html\nthing that says div class equals container-fluid. It is a bootstrap class that\ncovers the entire web page.\nHere is the entire code:\n<!doctype html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\"\nintegrity=\"sha384-\nggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\ncrossorigin=\"anonymous\">\n<title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n<a class=\"navbar-brand\" href=\"#\">Navbar</a>\n<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\naria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n<span class=\"navbar-toggler-icon\"></span>\n</button>\n<div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n<ul class=\"navbar-nav\">\n<li class=\"nav-item active\">\n<a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"/login\">Login</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"/logout\">Logout</a>\n</li>\n</ul>\n</div>\n</nav>\n<h1>Abby's Website</h1>\n<div class=\"container-fluid\">\n{% block content %}\n{% endblock %}\n</div>\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\nintegrity=\"sha384-\nq8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js\"\nintegrity=\"sha384-\nUO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"\nintegrity=\"sha384-\nJjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\ncrossorigin=\"anonymous\"></script>\n</body>\n</html>\nI did with sessions to save the users email in a session, and then once we have\nit in a session, we can change the user page to have a method. That is the\nchange in the user function in the app.py file. Like our login page, you can\nsee the methods=”POST” and “GET”.\nI set up a bit of code to collect and save the email in the session. And we use\nthe if statement to check the current method.\nYou can play around with the code and even show some message to the user\nto tell them that their email is saved.\nIf you go to /login, you can see that it still has the email saved. If we close a\nweb browser as we did not use a permanent session, the data will go away\nand won't be saved.\nHow to use database\nNow it's time to talk about databases. We've done great in saving data but\nhave not set up a database to collect it. The data is saved in the session. This\nmeans that the data will disappear once you close the browser or after 5 mins.\nTo set up a database, you need to create a Flask application object for the\nproject and set the URI for the database to use. Add this line immediately\nafter the __name__\napp = Flask (__name__)\napp.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.sqlite3'\napp.config [\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\ndb = SQLAlchemy(app)\nWe use users because that's what we're going to use, and then again sqlite3.\nThe second line shows that we're not tracking all the modifications to the\ndatabase. And the last line creates the database.\nModels\nNow, let us create models for the data we want to collect and save into the\ndatabase we have created.\nclass students(db.Model):\n_id = db.Column('id', db.Integer, primary_key = True)\nname = db.Column(db.String(100))\nemail = db.Column(db.String(100))\nSo that you can understand how databases work, I will explain object relation\nmapping. Object Relation Mapping is used to identify and store objects. SQL\nis based on objects. The objects are referenced by tables like Ms Excel.\nTables hold the information in the RDBMS server. A relational database\nmanagement system (RDBMS) is a group of programs experts use to create,\nupdate, administer and otherwise interact with a relational database like SQL.\nObject-relational mapping is a method for relating an RDBMS table's\nstructure to an object's parameters. SQLAlchemy helps you do CRUD\noperations without having to write SQL statements.\nYou must set up the table, that is, what we want to represent. Any pieces of\ninformation can be stored in rows and columns in our database for each\nobject you want to collect. In this case, we want a single column, that is, the\nname and email of a user.\nThe columns will represent pieces of information, and the rows will represent\nindividual items. We want to store users, and our users are going to have. In\nthis case, just a name and an email, and that's all we want to store. We define\na class to represent this user object in our database. That is why we call it\nusers. You can play around with the names if you want to store more than\nnames, emails, or different information.\nEvery single object that we have in our database needs to have a unique\nidentification. That is why we set an _id class. The identification could be a\nstring, boolean or an integer. After selecting the db.column name, we set the\ninput type and the length or the maximum length of the string that we want to\nstore. In this case, we use 100 characters.\nLastly, we will need to define the function that shows the database that we\nare collecting the data from the user.\ndef __init__(self, name, email):\nself.name = name\nself.email = email\nThis __init__() method will take the variables we need to create a new object\nbecause technically, we can store some values here that will be None values.\nSome objects might not actually have a value for that property. For example,\nsay we have gender as an option, and now some people decide not to declare\nthat, and we want to leave that as none.\nThe next thing to do is go to the bottom of the script to add something\ndb.create_all(). This is a method to actually create this database if it doesn't\nalready exist in our program whenever we run this application.\nfrom flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask (__name__)\napp.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.sqlite3'\napp.config [\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\ndb = SQLAlchemy(app)\nclass students(db.Model):\n_id = db.Column('id', db.Integer, primary_key = True)\nname = db.Column(db.String(100))\nemail = db.Column(db.String(100))\ndef __init__(self, name, email):\nself.name = name\nself.email = email\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\", methods=[\"POST\", \"GET\"])\ndef user():\nemail = None\nif \"user\" in session:\nuser = session[\"user\"]\nif request.method ==\"POST\":\nemail = request.form[\"email\"]\nsession[\"email\"] = email\nelse:\nif \"email\" in session:\nemail = session[\"email\"]\nreturn render_template('user.html', email=email)\nelse:\nflash(\"You Are NOT Logged In!\")\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nsession.pop(\"email\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\ndb.create_all()\napp.run(debug=True)\nC 14 - CRUD\nHAPTER\nNow, let us create a simple web app where users can create, update, delete\nand read posts. This is called a CRUD app. We will give our users the ability\nto store information about books. The database is SQLAlchemy and SQLite.\nThe app we're making here isn't meant to be valid on its own. But once you\nknow how to write a simple web app that takes user input and stores it in a\ndatabase, you are well on your way to writing any web app you can think of.\nSo, we'll keep the example application as simple as possible so you can focus\non the tools themselves instead of details about the application.\nYou have learned how to set up and model a database. Now is time to watch\nit work and build web apps.\nThe Flask Book Store\nFirst, we need to create a simple database. Then our app lets users to write\nbook titles and upload them as text. They can also read posts that they have\nadded, change or delete them.\nCRUD scripts are found in almost every web app out there. Whatever you\nwant to build, you'll need to get user input and store it (let your user create\ninformation), show that information back to your user (let your user read\ndata), find a way to fix old or wrong information (let your user update\ninformation), and get rid of information that isn't needed (let your user delete\ninformation) (allow users to delete information that was previously added).\nThis will make more sense when we see how each CRUD operation works in\nour web application.\nEnsure that the following are installed:\nFlask\nSQLAlchemy\nFlask-SQLAlchemy\nYou can install everything with pip by running the following command:\npip3 install --user flask sqlalchemy flask-sqlalchemy\nRemember to install them in your virtual environment.\nYour static web page with Flask\nFlask is simple. That is one of its biggest selling points as a web framework.\nWe can get a simple page running in only a few lines of code. Create a folder\nfor your project, create a file inside it called bookmanager.py or leave it as\napp.py.\nIn this case, book is my virtual environment. You can create a basic page\nwith this code in your app.py:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"This is an app\"\nif __name__ == \"__main__\":\napp.run(host='0.0.0.0', debug=True)\nHandling user input in our web application\nYou know the basics of how this works, but I will just go over it a bit. We\nhave a simple web app that doesn't do much now. We want to create an app\nto take the users' content. We'll do this by adding an HTML form that sends\ninformation from the front-end of our application (what our users see)\nthrough Flask and to the back-end (our Python code).\nIn the Python code for our above application, we set up the string \"This is an\napp.\" This was fine because it was only one line, but as our front-end code\ngrows, defining everything in our Python file will become more complex.\nFlask lets you keep different things separate by using templates.\nTemplates\nCreate an index.html file in your templates folder. This is the first template\nfor this project. You can fill it with the following code:\n<html>\n<body>\n<form method=\"POST\" action=\"/\">\n<input type=\"text\" name=\"book\">\n<input type=\"submit\" value=\"Add\">\n</form>\n</body>\n</html>\nThis is a simple HTML page that has:\nA text input that will link any text entered to the name \"book.\"\nA simple form\nA submit button with the word \"Add\" on it.\nA direction to send the data (\"post\") to our web application's main page (the /\nroute, which is the same page we set up in our app.py file).\nWe need to make two changes to the app.py file to use our new template.\nAdd render_template to the imports section, and replace “This is an app” with\nthe following:\nreturn render_template(\"home.html\")\nStart your server and check in your web browser:\nThis is a simple box where the user can type in text and click \"Add.\" Doing\nthis will send the text to the back-end of our app, and we'll all be on the same\npage. Before we can try it, our back-end code needs to be changed to handle\nthis new feature.\nBack-end\nA method=\"POST\" line in our index.html file says that the data in the form\nshould be sent using HTTP POST. We have learned that Flask routes only\naccept HTTP GET requests by default. What matters to us is that if we send\nin our form right now, we'll get an error message that says, \"Method not\nallowed.\" Because of this, we need to change our app.py file so that our web\napplication can handle POST requests.\nSo import request and update your new home function to be like this:\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\nif request.form:\nprint(request.form)\nreturn render_template(\"index.html\")\nHere's what we did:\nWe changed our route decorator by adding methods=[\"GET\", \"POST\"]). This\nwill get rid of the \"Method not allowed\" error we got when we tried to send\nthe form before. By default, Flask lets all routes accept GET requests. Here,\nwe tell it to let both GET and POST requests.\nWe use the if request.form to see if the form was just sent by someone. If\nthey did, we can use the request.form variable to get the information they sent\nin. We'll just print it out to make sure our form works.\nRestart your server and test the page now. Type anything into the box and\nclick \"Add.\" In the console, the string you typed should show up as output,\nlike in the picture below.\nFlask stores all of the form data in an ImmutableMultiDict, a fancy Python\ndictionary. It saved the user's input as a tuple typed into the form, and \"title\"\nis the name we gave it in the home.html template.\nYou see the two items I added. You can play around with this with flash\nmessages or everything. This is only a sample to help open your creative\nmind.\nWe are not there yet. Now that we know how to get user input and do\nsomething with it let's learn how to store it.\nAdd a database\nTo help our Flask app remember our users' input, we need to add the items to\na database. We have learned how to set up and model a database in the last\nchapter. Let us do that now.\nimport os\nfrom flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\nproject_dir = os.path.dirname(os.path.abspath(__file__))\ndatabase_file = \"sqlite:///{}\".format(os.path.join(project_dir, \"bookdatabase.db\"))\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_file\ndb = SQLAlchemy(app)\nOn line 1, we add an import for the os Python library. This lets us access\npaths on our file system relative to our project directory.\nIn line 7, we import SQLAlchemy's Flask version (we had to install both\nFlask-SQLAlchemy and SQLAlchemy). We only import Flask-SQLAlchemy\nbecause it extends and depends on the SQLAlchemy base installation.\nIn lines 9 and 10, we find out where our project is and set up a database file\nwith its full path and the sqlite:/ prefix to tell SQLAlchemy which database\nengine we are using.\nNext, we show our app where to store our database.\nThen, we set up a connection to the database and store it in the db variable.\nThis is what we'll use to talk to our database.\nLastly, we set up the database.\nThis recap summarizes how to set up the SQLAlchemy database for your\nprogram. Now we can give the database what to store and how to store it in\nour database.\nFor a real book store app, there are many details the user may need to post.\nThe programmer would have to model a lot of information, like the book's\nauthor, title, number of pages, date, etc. For simplicity, we are only allowing\nusers to post titles. Add the code below to app.py. This is how each book will\nbe stored in our database. Make sure to add the code below the line db =\nSQLAlchemy(app) since we use db to define the book model.\nclass Book(db.Model):\ntitle = db.Column(db.String(80), unique=True, nullable=False, primary_key=True)\ndef __repr__(self):\nreturn \"<Title: {}>\".format(self.title)\nFront-end\nWhen a user types in the name of a book, we can now make a Book object\nand store it in our database. To do this, update the home() function once more\nso that it looks like this.\ndef home():\nif request.form:\nbook = Book(title=request.form.get(\"title\"))\ndb.session.add(book)\ndb.session.commit()\nreturn render_template(\"index.html\")\nWhen we get input, we no longer need to send it to the console. Instead, we\nmake a new Book object using our form's \"title\" field. We assign this new\nBook to the book variable.\nThen, we include the book into our database and save the modifications.\nThis is the app.py:\nimport os\nfrom flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\nproject_dir = os.path.dirname(os.path.abspath(__file__))\ndatabase_file = \"sqlite:///{}\".format(os.path.join(project_dir, \"bookdatabase.db\"))\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_file\ndb = SQLAlchemy(app)\nclass Book(db.Model):\ntitle = db.Column(db.String(80), unique=True, nullable=False, primary_key=True)\ndef __repr__(self):\nreturn \"<Title: {}>\".format(self.title)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\nif request.form:\nbook = Book(title=request.form.get(\"title\"))\ndb.session.add(book)\ndb.session.commit()\nreturn render_template(\"index.html\")\nif __name__ == \"__main__\":\napp.run(host='0.0.0.0', debug=True)\nInitializing\nWhen we write codes like app.py, Python, Flask, or other frameworks need to\nrun the code every time we run the program. There is a way to run a setup\ncode that will be one-time only.\nOpen a python shell. You can do this in your Terminal or command prompt\nby typing Python or Python3. This will open up the Shell. In the shell, run the\nfollowing 3 lines.\n>>> from app import db\n>>> db.create_all()\n>>> exit()\nYou may now return to your online application and add as many book titles\nas you like. Our CRUD application is complete, and we have reached the C\nstage, where we can generate new books. The next step is to restore our\nability to read them.\nRetrieving books from our database\nWe'd want to retrieve all the latest books from the database and show them to\nthe user every time they visit our web app. Using SQLAlchemy, we can\nquickly and easily store a Python variable with all the books in our database.\nJust before the end of the home() method, add a line to retrieve all of the\nbooks and change the final line so that the books are passed to our front-end\ntemplate. Home() should end with these two lines.\nbooks = Book.query.all()\nreturn render_template(\"index.html\", books=books)\nYou can currently render all the books in the home.html file using a Jinja for\nloop. While you're working on the file, feel free to add the headers we'll need\nfor the form and the list of books to appear. Here is the complete code for the\nindex.html page.\n<html>\n<body>\n<h1>Add book</h1>\n<form method=\"POST\" action=\"/\">\n<input type=\"text\" name=\"book\">\n<input type=\"submit\" value=\"Add\">\n</form>\n<h1>Books</h1>\n{% for book in books %}\n<p>{{book.title}}</p>\n{% endfor %}\n</body>\n</html>\nSimply save the file and refresh the program in your browser to see the\nchanges take effect. You should now see the books as you add them, as\nshown below.\nWe have successfully finished the C and the R of our CRUD program. That\nis, our users can now Create and Read their content. Next, How can we\nupdate that Aby to a book title?\nUpdating book titles\nNow, the last and probably the most complex part of the project is data\nupdates.\nWe only present a representation of the data on our front end. As a result, the\nuser won't be able to alter anything. As an alternative, we request that you\nsend us a more recent title while we archive the earlier one. The newly\nupdated book can be found using the old title in our code, which will replace\nit with the one the user submitted.\nWe'll create each title in its own distinct form because it's unlikely that the\nuser will want to manually enter both the old and new titles. The previous\ntitle will be available to us when the user gives the revised one. We will use a\nhidden HTML input to get the previous title without having it appear in the\nuser interface.\nChange the for loop in our home.html file to the following:\n{% for book in books %}\n<p>{{book.title}}</p>\n<form method=\"POST\" action=\"./update\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"oldtitle\">\n<input type=\"text\" value=\"{{book.title}}\" name=\"newtitle\">\n<input type=\"submit\" value=\"Update\">\n</form>\n{% endfor %}\nThe form is similar to the previous form that we used to add new books. Here\nare a few critical updates:\nWe first need to direct this form's data submission to the /update app route,\nnot the home page. Since we have not created a decorator for it, we must do\nthat in our app.py file.\nWe use a secret input on line 4 to provide the \"old\" title of the book. This\narea will automatically be filled from the program database. So the user will\nsee it.\nOpen your app.py file and add a redirect to the imports list.\nNow add the new route decorator for /update with the following block:\n@app.route(\"/update\", methods=[\"POST\"])\ndef update():\nnewtitle = request.form.get(\"newtitle\")\noldtitle = request.form.get(\"oldtitle\")\nbook = Book.query.filter_by(title=oldtitle).first()\nbook.title = newtitle\ndb.session.commit()\nreturn redirect(\"/\")\nIf you refresh the application page in your browser, you should see something\nthat looks like the image below. It is possible to alter the titles of already-\ncreated books by editing the corresponding input field and clicking the\n\"Update\" button.\nAfter updating:\nWell done. You have seen how we handle the CRU with Flask. Now, let us\ngive the user the power to Delete books that they no longer want to see.\nDeleting books from our database\nThis feature is not completely different from how we created the Update\nfeature. In this case, we don’t need to call the old title. Open the index.html\nfile and create another form with the for loop.\n<form method=\"POST\" action=\"./delete\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"title\">\n<input type=\"submit\" value=\"Delete\">\n</form>\nNext, add a new app route decorator in the app.py for the /delete route and\ncreate the function.\nAfter deleting:\nWe have created a Flask app that handles CRUD operations like magic! This\nis the basics. You can use this to create a standard app anyhow you want by\nplaying around with the code and Bootstrap.\nThese are the working codes:\napp.py:\nimport os\nfrom flask import Flask, render_template, request, redirect\nfrom flask_sqlalchemy import SQLAlchemy\nproject_dir = os.path.dirname(os.path.abspath(__file__))\ndatabase_file = \"sqlite:///{}\".format(os.path.join(project_dir, \"bookdatabase.db\"))\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_file\ndb = SQLAlchemy(app)\nclass Book(db.Model):\ntitle = db.Column(db.String(80), unique=True, nullable=False, primary_key=True)\ndef __repr__(self):\nreturn \"<Title: {}>\".format(self.title)\n@app.route('/', methods=[\"GET\", \"POST\"])\ndef home():\nbooks = None\nif request.form:\ntry:\nbook = Book(title=request.form.get(\"title\"))\ndb.session.add(book)\ndb.session.commit()\nexcept Exception as e:\nprint(\"Failed to add book\")\nprint(e)\nbooks = Book.query.all()\nreturn render_template(\"index.html\", books=books)\n@app.route(\"/update\", methods=[\"POST\"])\ndef update():\ntry:\nnewtitle = request.form.get(\"newtitle\")\noldtitle = request.form.get(\"oldtitle\")\nbook = Book.query.filter_by(title=oldtitle).first()\nbook.title = newtitle\ndb.session.commit()\nexcept Exception as e:\nprint(\"Error in updating title\")\nprint(e)\nreturn redirect(\"/\")\n@app.route(\"/delete\", methods=[\"POST\"])\ndef delete():\ntitle = request.form.get(\"title\")\nbook = Book.query.filter_by(title=title).first()\ndb.session.delete(book)\ndb.session.commit()\nreturn redirect(\"/\")\nif __name__ == \"__main__\":\napp.run(host='0.0.0.0', debug=True)\nOur index.html will look like this:\n<html>\n<body>\n<h1>Add book</h1>\n<form method=\"POST\" action=\"/\">\n<input type=\"text\" name=\"title\">\n<input type=\"submit\" value=\"Add\">\n</form>\n<h1>Books</h1>\n<table>\n{% for book in books %}\n<tr>\n<td>\n{{book.title}}\n</td>\n<td>\n<form method=\"POST\" action=\"./update\" style=\"display: inline\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"oldtitle\">\n<input type=\"text\" value=\"{{book.title}}\" name=\"newtitle\">\n<input type=\"submit\" value=\"Update\">\n</form>\n</td>\n<td>\n<form method=\"POST\" action=\"./delete\" style=\"display: inline\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"title\">\n<input type=\"submit\" value=\"Delete\">\n</form>\n</td>\n</tr>\n{% endfor %}\n</table>\n</body>\n</html>\nThe new code now has error handling codes.\nWhen we first learnt about databases, I stated that each object must be\ndistinct. If we try to add a book with the same title twice or change the title of\nan existing book to one that already exists, an error will occur. The revised\ncode will have a try: except: block around the home() and update() blocks.\nC 15 – D\nHAPTER EPLOYMENT\nAt long last, our app is ready for release. The deployment has begun. There\nare a lot of factors to consider, which can make this procedure tedious. When\nit comes to our production stack, there are also many options to consider. In\nthis section, we'll go over a few key components and the various\ncustomization paths available to us for each of them.\nWeb Hosting\nSince the beginning of this tutorial, you have been using your local server,\nwhich only you can access. You need a server that is accessible to everyone.\nThere are thousands of service providers that give this, but I use and\nrecommend the three below. The specifics of getting started with them are\noutside the scope of this book. Therefore I won't be covering them here.\nInstead, I'll focus on why they're a good choice for Flask app hosting.\nAmazon Web Services EC2\nAmazon Web Services (AWS) is the most common option for new\nbusinesses, so you may have heard of them. I am talking about the Amazon\nElastic Compute Cloud (EC2) for your Flask app. The main selling feature of\nEC2 is the speed with which new virtual computers, or \"instances\" in AWS\nlingo, may be created. Adding more EC2 instances to our app and placing\nthem behind a load balancer allows us to swiftly expand it to meet demand\n(we can even use the AWS Elastic Load Balancer).\nFor Flask, AWS is equivalent to any other form of the virtual server. In a\nmatter of minutes, we can have it running our preferred Linux distribution,\ncomplete with our Flask app and server stack. However, this necessitates that\nwe have some expertise in systems management.\nHeroku\nHeroku is a platform for hosting applications developed on top of existing\nAWS capabilities, such as Elastic Compute Cloud (EC2). As a result, we\ncould enjoy EC2's benefits without learning the ins and outs of systems\nadministration.\nWhen using Heroku, we simply push our application's source code repository\nto their server through git. This is handy when we don't feel like logging into\na server through SSH, configuring the software, and thinking out a sensible\ndeployment strategy. These luxuries don't come cheap, but both AWS and\nHeroku provide some levels of service at no cost to the user.\nDigital Ocean\nIn recent years, Digital Ocean has emerged as a serious alternative to\nAmazon Web Services EC2. In the same way that EC2 allows us to easily\ncreate virtual servers, Digital Ocean will enable us to create what they call\ndroplets. In contrast to the lower tiers of EC2, all droplets use solid-state\ndrives. The most appealing feature for me is the interface's superior\nsimplicity and ease of use compared to the AWS control panel. If you're\nlooking for a hosting service, I highly recommend Digital Ocean.\nUsing Flask for deployment on Digital Ocean is similar to using EC2. We're\ngoing to install our server stack on a new Linux distribution.\nRequirements for deployment\nThis section will discuss the software that must be installed on the server\nbefore we can begin to host our Flask application. As a case study, I will use\nHeroku as our deployment server. What do you need to deploy to Heroku?\nBefore Heroku accepts to deploy your app, you need to add two files to your\nproject folder and install the app runner called Gunicorn:\nYou must create a requirements.txt file to specify your app's dependencies\nand a special Heroku file called Procfile.\nGunicorn\nIt is easy to get this by installing with pip:\npip install gunicorn\nAfter that, use the following command to create the requirements.txt file.\npip freeze > requirements.txt\nYour app's dependencies will be determined mechanically by pip and\ndumped into requirements.txt.\nIn the end, Heroku will look to the Procfile to determine how to launch our\napplication. It will be instructed to use the gunicorn web server instead of the\nlocal development server.\nCreate a file named Procfile and save it in the project's root folder with the\nfollowing contents:\nweb: gunicorn app:app\nReplace the first “app” with the name of the module or file for your main\nflask file and the second “app” with the name of your flask app.\nMy app’s module name is app because the script is in the file app.py, and the\nother is the app name also app because that’s the name of my script in the\nfile.\nOnce you have the requirements.txt and Procfile in your root folder, you can\ndeploy!\nDeploy!\nWhile there are a number of options for getting your app up and running on\nHeroku, git is by far the most straightforward.\nSet up Git\nA git repository should have been created for your project's directory; all that\nremains is to make a commit of all of your code. Now run git init to initialize\ngit for your code.\ngit init\ngit add .\ngit commit -m “initial commit”\nThese three commands will configure and commit your script so that Heroku\nknows that you are ready for deployment.\nPush your Site\nFinally, use the following command to push your program up for production\ninto the Heroku environment:\nType heroku create in your terminal and wait for a few minutes. Then run the\nfollowing line:\ngit push heroku main\nIt may take a few seconds to push your code. That command takes your code\nto the Heroku server. Now is time to switch from SQLAlchemy models to the\nnew PostgreSQL database that Heroku understands. Type python in your\ncommand line to open the shell and run the following commands:\n>>> from app import db\n>>> db.create_all()\nWhen you type exit(), you will close the shell. To test your web app, type\nheroku open. It will take you to a free domain name with your code running\nin production.\nP 2 D\nART JANGO\nC 1 - I G S\nHAPTER NSTALLING TO ET TARTED\nAlright, so in this one, we will create a new virtual environment and install\nDjango. Django is essentially a Python code. That means Python must be\ninstalled before installing Django.\nThis chapter explains how to configure Windows or macOS for Django\nprojects. Developers use the Command Line to install and configure Django\nprojects.\nThis chapter shows you how to set up your Windows or macOS computer\ncorrectly so you can work on Django projects. We start by giving an\noverview of the Command Line, powerful text-only interface developers use\nto install and set up Django projects. Then we install the most recent version\nof Python, learn how to set up virtual environments that are only used for one\nthing, and install Django. As the last step, we'll look at how to use Git for\nversion control and a text editor. By the end of this chapter, you will have set\nup a Django project from scratch.\nIntroducing the Command Line\nThe command line is that blank screen you see in hacker movies where they\ntype matrices. It is how coders and software developers interact with the\ncomputer while most people use a mouse or finger. We use it to run\nprograms, install software, and connect to cloud servers. Most developers\nfind that the command line is a faster and more powerful way to move around\nand control a computer after a bit of practice.\nThe command line is scary for people who have never used it because it only\nhas a blank screen and a blinking cursor. After a command has run, you often\ndon't get any feedback. You can wipe an entire computer with a single\ncommand without a warning if you're not careful. Because of this, the\ncommand line should only be used with care. Make sure not to just copy and\npaste commands you find online. If you don't fully understand a command,\nonly use trusted sources.\nIn real life, the command line is also called the console, terminal, shell,\nprompt, or Command Line Interface (CLI). Technically, the terminal is the\nprogram that opens a new window to access the command line.\nA console is a text-based application; a shell is a program that runs\ncommands on the underlying operating system; a prompt is where you type\ncommands and run.\nAre there terms confusing? Haha. They all mean the same thing: the\ncommand line is where we run and execute text-only commands on our\ncomputer.\nPowerShell is the name of both the built-in terminal and shell on Windows.\nTo get to it, press the Windows button and type \"PowerShell\" to open the\napp. After the > prompt, it will open a new window with a dark blue\nbackground and a blinking cursor. On my computer, it looks like this.\nBefore the prompt is PS, which stands for PowerShell. Then comes the\nWindows operating system's initial C directory, followed by the Users\ndirectory and the current user, SYSTEM32, on my computer. Your username\nwill be different, of course. Don't worry about what's to the left of the >\nprompt right now. It will be different on each computer and can be changed\nlater. From now on, Windows will use the shorter prompt >.\nThe built-in terminal on macOS is called Terminal, as it should be. You can\nopen it with Spotlight by pressing the Command key and the space bar at the\nsame time, then typing \"terminal.\" You can also open a new Finder window,\ngo to the Applications directory, scroll down to the Utilities folder, and\ndouble-click the Terminal application. After the \"%\" prompt, it opens a new\nscreen with a white background and a blinking cursor. Don't worry about\nwhat comes after the percent sign. It's different for each computer and can be\nchanged in the future.\nIf your macOS prompt is $ instead of %, then Bash is used as the shell. The\ndefault shell for macOS changed from Bash to zsh in 2019. Most of the\ncommands in this book can be used with either Bash or zsh. If your computer\nstill uses Bash, you should look online to learn how to switch to zsh through\nSystem Preferences.\nShell Commands\nThere are a lot of shell commands, but most developers use the same few\nover and over and look up more complicated ones when they need them.\nMost of the time, the commands for macOS and Windows (PowerShell) are\nthe same. On Windows, the whoami command shows the computer name and\nuser name. On macOS, it only shows the user name. Type the command and\npress the return key as with any other shell command.\nBut sometimes, the shell commands on Windows and macOS are very\ndifferent from each other. One good example is the primary \"Hello, World!\"\ncommand. \" message to the terminal. On Windows, the command is called\nWrite-Host, and on macOS, it is called echo.\nUsing the computer's filesystem is a task that is often done at the command\nline. The default shell should show the current location on Windows, but Get-\nLocation can also be used to do this. Use pwd on Mac OS (print working\ndirectory).\nYou can save your Django code wherever you want, but for ease of use, we'll\nput ours in the desktop directory. Both systems can use the command cd\nfollowed by the location you want to go to.\ncd OneDrive\\Desktop\nOR\n% cd desktop\nOn macOS\nYou can use the command mkdir to create a new folder. We want to create a\nfolder called script on the Desktop. We will keep another folder inside it\ncalled ch1-setup. Now here is the command line to do all of these:\n> mkdir code\n> cd code\n> mkdir ch1-setup\n> cd ch1-setup\nPress enter after each line, and you will get something like this:\nI love to believe that you have installed Python on your computer. If you\nhaven’t, please head on to Python’s official website and install Python. You\nwill find the latest version of Python on the official website. After installing\nPython, you have to set up your system for Django.\nTo verify that you have Python installed on your Windows or Mac system,\nopen your command prompt and type in the following code:\nPython --version\nOnce you press Enter, the version of Python you have installed on your\ncomputer will show. If it doesn’t, go ahead and install Python.\nOnce you have verified the installation of Python, you can now install\nDjango.\nVirtual Environments\nDjango's purpose is now clear to you. One of the most common issues with\nDjango is that a project built in one version may not be compatible with one\ncreated in another. You may run into issues if you upgrade from a version of\nDjango 1.5x to Django 1.6x.\nInstalling the latest versions of Python and Django is the right way to start a\nnew project. Let’s say you created a project last year and used older versions\nof Python and Django. Now, this year you want to use Django 4.0. You may\nhave to reinstall the version you used in creating that project at the time to\nopen it.\nPython and Django are installed globally on a computer by default, making it\na pain to install and reinstall different versions whenever you want to switch\nbetween projects.\nThis problem can be easily solved if you use Django's version across all your\nprojects. That is why creating a virtual environment with its own set of\ninstallation folders is essential.\nYou can easily create and manage separate settings for each Python project\non the same computer using virtual environments. Otherwise, any changes\nyou make to one website in Django will affect all the others.\nThere are many ways to set up virtual environments, but the easiest is to use\nthe venv module, which comes with Python 3 as part of the standard library.\nTo try it out, go to the ch1-setup directory that is already on your Desktop.\ncd onedrive\\desktop\\code\\ch1-setup\nUse the following command line to create a virtual environment\npython -m venv <name of env>\non Windows or\npython3 -m venv <name of env>\non macOS\nIt is up to the developer to choose a good name for the environment, but\n.venv is a common choice.\nAfter that, if you are on Windows, type in the following:\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\nAfter creating a virtual environment, we need to turn it on. For scripts to run\non Windows, we must set an Execution Policy for safety reasons. The Python\ndocumentation says that scripts should only be run by the CurrentUser, and\nthat is what that second line does. On macOS, scripts are not limited in the\nsame way, so you can run source.venv/bin/activate immediately.\n.venv\\Scripts\\Activate.ps1\nFor Mac users:\nsource.venv/bin/activate\nAs you can see in that screenshot, the environment name (.venv) is now\nadded to the shell prompt. That shows that the virtual environment is\nactivated. Any Python packages that are installed or updated in this location\nwill only work in the active virtual environment.\nNow we can install Django.\nInstalling Django\nNow, with the virtual environment active, we can install Django with this\nsimple command line:\npy -m pip install Django\nThat line will download and install the latest Django release.\nPlease consult the Django official website here if you have any issues\ninstalling Django.\nSetup your Virtual Environment for Django on\nmacOS/Linux\nNow, I want you to have a new virtual environment and a fresh Django\ninstall, not only just to get the practice of it but also to make sure that we're\nall starting from the exact same spot. So if you open up your terminal\nwindow, or if you're on Windows, your PowerShell, or command prompt.\nSo if we type out Python -V in the Terminal, you will get the version of\nPython you have on your Mac or Linux computer. If you don’t have Python 3\ninstalled, go to the official Python website to get it on your MacOs.\nNow, we need the Virtual Environment. Introducing…\nInstalling Pipenv Globally\nNow the first thing you need to get your installation of Django to work on all\nprojects is to install a virtual environment. The best way to do this on Mac is\nby installing pipenv.\nFirst, open Terminal and upgrade pip with the following command line:\n```\npython3 -m pip install pip --upgrade\n```\nThis will upgrade whatever pip version is in your system. After this, you can\ninstall pipenv to use Django:\n```\npython3.8 -m pip install pipenv\n```\nThis will essentially install the virtual environment. You can verify it by\nusing the following line:\nNow, you can install Django with a single line:\n$ python -m pip install Django\nYour First Blank Django Project\nThe way to create a blank website on Django is to first get the name of the\nsite and then type in the following command:\ndjango-admin startproject mysite .\nWhere mysite is the name of your project. You can use almost any name, but\nwe will use mydjango in this book. This is what the command line loos like:\n(.venv) PS C:\\Users\\Jde\\OneDrive\\Desktop\\script\\ch1-setup> django-admin startproject mydjango .\nNow, let's ensure everything is working by running the runserver command\nto run Django's internal web server. This is good for developing locally, but\nwhen it's time to put our projects online, we'll switch to a more robust WSGI\nserver like Gunicorn.\nType in the following command:\npython manage.py runserver\nIf you do this, you have successfully created a website. Check now by\nopening your web browser and typing the following in the URL\nhttp://127.0.0.1:8000/.\nYou should see the following:\nWell done! You have successfully created your first Django project on a local\nserver. Stop the local server by typing the correct command. Then, leave the\nvirtual environment by pressing \"deactivate\" and pressing Enter.\nSee you in the next chapter, where we will create a website with some words.\nThis book will give us a lot of practice with virtual environments, so don't\nworry if it seems complicated right now. Every new Django project follows\nthe same basic steps: make and turn on a virtual environment, install Django,\nand run startproject.\nIt's important to remember that a command line tab can only have one virtual\nenvironment open at a time. In later chapters, we'll make a new virtual\nenvironment for each new project, so when you start a new project, make\nsure your current virtual environment is turned off or open a new tab.\nIntroducing Text Editors\nYou have met command lines. That is where we run commands for our\nprograms, but expert developers write code in a text editor. There are many\ndifferent text editors you can use. The computer doesn't care what text editor\nyou use because the end result is just code, but a good text editor can give\nyou helpful tips and catch typos for you.\nThere are many modern text editors, but Visual Studio Code is very popular\nbecause it is free, easy to install, and used by many people. If you don't\nalready have a text editor, you can get VSCode from the website and install\nit.\nSetting Up Django on VS Code\nWe will set up our Django project on VS Code or Visual Studio Code. If you\ndon’t have that app, go to code.visualstudio.com and download the version\nfor your machine. It is free and cross-platform. It also has a vast community\nof people or developers that build all sorts of great things for it.\nNote that this is not the same as Visual Studio. Visual Studio is a different\nkind of text editor. There are other types of text editors like Sublime Text and\nPycharm, but Visual Studio Code or VS Code is my favorite.\nOpen up VS code, and we will start our new project. So you're going to see a\nwelcome screen. You will need to install a couple of extensions in VSCode.\nGo to the Extensions tab. Search Python and install the first result with the\nhighest number of downloads. After that, you need to install Black. To do\nthis, go to Terminal, and click on New Terminal. From there, type in the\nfollowing command:\npython -m pip install black\nNext, go to File > Preferences > Settings on Windows or Code > Preferences\n> Settings on macOS to open the VSCode settings. Look for \"python\nformatting provider\" and then choose \"black\" from the list. Then look for\n\"format on save\" and make sure \"Editor: Format on Save\" is turned on. Every\ntime you save a .py file, Black will now format your code for you.\nGo to the Explorer tab to confirm that Black and Python are working. Find\nDesktop, and open your ch1-setup folder. Create a new file and name it\nhello.py. On the new page, type in the following using single quotes:\nprint('Hello, World!')\nPress CTRL + S to save and see if the single quotes change to double. If it\nchanges, that is Black working.\nLastly, Git\nThe last step is to install Git, which is a version control system that modern\nsoftware development can't do without. Git lets you work with other\ndevelopers, keep track of all your work through \"commits,\" and go back to\nany version of your code, even if you accidentally delete something\nimportant.\nOn Windows, go to https://git-scm.com/, which is the official site, and click\non \"Download.\" This should install the correct version for your computer.\nSave the file, then go to your Downloads folder and double-click on the file.\nThis will start the installer for Git on Windows. Click \"Next\" through most of\nthe early defaults, which are fine and can be changed later if necessary. There\nare two exceptions, though. Under \"Choosing the default editor used by Git,\"\nchoose VS Code instead of Vim. And in the section called \"Changing the\nname of the initial branch in new repositories,\" select the option to use\n\"main\" as the default branch name instead of \"master.\" If not, the suggested\ndefaults are fine; you can always change them later if necessary.\nTo ensure that Git is installed on Windows, close all shell windows and open\na new one. This will load the changes to our PATH variable. Then type the\nfollowing\ngit –version\nThis will show the version you have installed.\nFor MacOs, you can install Git with XCode. First, open your Terminal. Type\nthe following:\ngit –version\nThere should be a message that git is not found, and there will be a\nsuggestion to install it. Or you could just type in xcode-select –install to\ninstall it directly.\nOnce installed, you need to set it up and register a new account, and you are\ngood to go!\nC 2 - C Y F D\nHAPTER REATE OUR IRST JANGO\nP\nROJECT\nIn this chapter, we'll build a Django website. Our website will have a simple\nhomepage that says, \"Welcome to my website.\" Let’s get started.\nSetup\nTo start, fire up a new command prompt window or use VS Code's in-built\nterminal. The latter can be accessed by selecting \"Terminal\" from the menu\nbar and \"New Terminal\" from the drop-down menu.\nVerify that you are not in a preexisting virtual environment by ensuring that\nthe command prompt does not have any parentheses. To be sure, type\n\"deactivate,\" and you'll be turned off. You can then use the following\ncommands in the code directory on your Desktop to make a helloworld folder\nfor our new website.\nAs you can see in the above screenshot, there is the first code to call in the\nfolder we have created in the previous chapter called scripts, and we made\nanother folder within it called helloworld. Then we activated our virtual\nenvironment and installed the version of Django we wanted to use for this\nproject.\nFrom here, you should remember the Django startproject command. This\ncommand will create a new Django project. Let us call our new project\nfirst_website. Include the space + full stop ( . ) at the end of the command so\nthat the program will be installed in the current folder.\nThe most important thing for a web developer is the project structure. You\nneed an organized space and directories for all your projects and programs.\nDjango will automatically set up a project structure for us in this script. If you\nwant to see what it looks like, you can open the new folder on your Desktop.\nThe Ch1-setup is the folder from chapter 1. We don’t need that now.\nHowever, you can see that the .venv folder was created with our virtual\nenvironment. Django added the first_website folder and python file. If you\nopen the first_website folder, you will find 5 new files:\n__init__.py shows that the folder's files are part of a Python package. We\ncan't install files from another folder without this file, which we will do a lot\nin Django.\nasgi.py offers the option of running an Asynchronous Server Gateway\nInterface.\nsettings.py manages the settings of our Django project.\nurls.py tells Django what pages to make when a browser or URL asks for\nthem.\nwsgi.py stands for Web Server Gateway Interface. WSGI helps Django serve\nour web pages.\nThe manage.py file is not a core component of the Django project, but it is\nused to run Django commands like starting the local web server or making a\nnew app.\nLet's test our project using the light web server with Django for local\ndevelopment. The runserver command will be used. It can be found in the file\nmanage.py. Type in this command:\npython manage.py runserver\nOnce that runs, you can test your server by going to this with your web\nbrowser: http://127.0.0.1:8000/\nYou may see the error in the above screenshot too. Don’t fret. That is Django\ntelling you that we haven't made any changes to our existing database (i.e.,\n\"migrated\") yet. This warning is harmless because we won't use a database in\nthis chapter.\nBut if you want to stop the annoying warning, you can get rid of it by\npressing Control + c to stop the local server and then running the following\ncommand line:\npython manage.py migrate.\nDjango has migrated its pre-installed apps to a new SQLite database. The\nequivalent file in our folder is called db.sqlite3.\nWarnings should now be gone if you rerun python manage.py runserver.\nLet us learn a few concepts you need to know before building our first\nDjango app together.\nHTTP Request/Response Cycle\nA network protocol is a set of rules for formatting and processing data. It's\nlike a common language for computers that lets them talk to each other even\nif they are on opposite sides of the world and have very different hardware\nand software.\nHTTP is a protocol that works with a client-server model of computing.\nWhen you go to a website, your computer, or \"client,\" sends a \"request,\" and\na \"server\" sends back a \"response.\" The client doesn't have to be a computer,\nthough. It could be a cell phone or any other device that can connect to the\ninternet. But the process is the same: a client sends an HTTP request to a\nURL, and the server sends an HTTP response back.\nIn the end, a web framework like Django takes HTTP requests to a given\nURL and sends back an HTTP response with the information needed to\nrender a webpage. All done. Usually, this process involves finding the correct\nURL, connecting to a server, logic, styling with HTML, CSS, JavaScript, or\nstatic assets, and then sending the HTTP response.\nThis is what the abstract flow looks like:\nHTTP Request -> URL -> Django combines database, logic, styling -> HTTP Response\nModel-View-Controller (MVC) and Model-View-\nTemplate (MVT)\nThe Model-View-Controller (MVC) sequence has become a popular way to\nsplit up an application's data, logic, and display into separate parts over time.\nThis makes it easier for a programmer to figure out what the code means. The\nMVC pattern is used by many web frameworks, such as Ruby on Rails,\nSpring (Java), Laravel (PHP), ASP.NET (C#), and many others.\nThere are three main parts to the traditional MVC pattern:\nModel: Takes care of data and the primary project logic\nView: Gives the model's data in a specific format.\nController: Takes input from the user and does application-specific logic.\nDjango's method, often called Model-View-Template, only loosely follows\nthe traditional MVC method (MVT). Developers who have worked with web\nframeworks before might find this confusing at first. In reality, Django's\napproach is a 4-part pattern that also includes URL Configuration. A better\nway to describe it would be something like MVTU.\nHere's how the Django MVT pattern works:\nModel: Manages data and core business logic\nView: Tells the user what data is sent to them, but not how it is shown.\nTemplate: Shows the information in HTML, with CSS, JavaScript, and Static\nAssets as options.\nURL Configuration: Regular-expression components set up for a View\nThis interaction is a crucial part of Django, but it can be hard to understand\nfor new users, so let's draw a diagram of how an HTTP request and response\ncycle works. When a URL like https://djangoproject.com is typed in, the first\nthing that happens in our Django project is that a URL pattern (contained in\nurls.py) that matches it is found. The URL pattern is linked to a single view\n(in views.py) that combines the data from the model (in models.py) and the\nstyling from a template (any file ending in .html). After that, the view gives\nthe user an HTTP response.\nThe flow looks like below:\nHTTP Request -> URL -> View -> Model and Template -> HTTP Response\nCreating A Blank App\nDjango uses apps and projects to keep code clean and easy to read. Multiple\napps can be part of a single Django project. Each app will have a set of\nfunctions to control. For example, to build an e-commerce site, you may use\none app to log in users, another to handle payments, and another to list item\ndetails. That's three different apps that are all part of the same main project.\nYou must activate the virtual environment to add a new app to your project.\nDo you still remember how to do that?\nType in one of the following lines on your Windows or Mac:\n.venv\\Scripts\\Activate.ps1\nOR\nsource .venv/bin/activate\nWe will create a new project (or folder) in our Scripts directory. Let us call it\nmy_project. Remember to put the space and full stop ( . ) at the end of the\ncommand so that it is installed in the current folder we are working in.\ndjango-admin startproject my_project .\nLet's take a moment to look at the new folders that Django has set up for us\nby default. If you want to see what it looks like, you can open the new\nmy_project folder on the Desktop. You may not see the.venv folder because\nit is hidden.\nLet's try out our new project using the light web server with Django for local\ndevelopment. The runserver command will be used. It can be found in the file\nmanage.py. Use the following line:\npython manage.py runserver\nOR\npython3 manage.py runserver\nNow visit http://127.0.0.1:8000/ on your web browser to test the server.\nDon’t worry about the migration error. You know it. Let’s fix it. Type in the\nfollowing:\npython manage.py migrate\nLet us put our app up in there.\nIf you have a running server, you must deactivate it by pressing Ctrl + C. You\nthen use the Django startapp command to create the new project and follow it\nby the name of your new app. I will call my app webpages.\npython manage.py startapp webpages\nIf you look at the folder we have been using, you will find the new folder for\nwebpages:\nLet's go over what each new webpages app file does:\nadmin.py is a file that tells the Django Admin app how to work.\napps.py is a file that tells the app how to work and migrations/ keeps track of\nchanges to our models.py file so that it stays in sync with the models in our\ndatabase.\nmodels.py is where our database models are written, and Django\nautomatically turns them into database tables and tests.\ntests.py is for testing views in an app.\nviews.py is where we handle the logic for our web app's requests and\nresponses.\nNotice that the MVT pattern's model, view, and URL are there from the start.\nOnly a template is missing, which we'll add soon.\nEven though our new app is part of the Django project, we still have to make\nDjango \"know\" about it by adding it to the my_project/settings.py file. Open the\nfile in your text editor and scroll down to where it says \"INSTALLED\nAPPS.\" There are already six Django apps there.\nAt the end, add webpages.apps.WebpagesConfig.\nWhat is PagesConfig? The only thing you have to know at this point is that\nthis is a function that we call from the apps.py file that Django created in the\nwebpages folder.\nDesigning Pages\nWeb pages on the internet are linked to a database. To power a single\ndynamic web page in Django, you need four separate files that follow this\nMVT pattern:\nmodels.py\nviews.py\ntemplates.html (any HTML file will do)\nurls.py\nSince our project today does not need to connect to a database, we can simply\nhardcode all the data into a view and skip the MVT model. That is what we\nwill do now. This means everything you do on your end can only be accessed\nfrom your computer.\nSo, the next thing to do is to make our first page (view). Open the views.py\nfile in the webpages folder and edit the code like this:\nfrom django.shortcuts import render\n# Create your views here.\nfrom django.http import HttpResponse\ndef homePageView(request):\nreturn HttpResponse(\"My New App!\")\nBasically, we're saying that whenever we call the function homePageView,\nDjango should display the text \"My New App!\" In particular, we've imported\nthe built-in HttpResponse method so that we can give the user a response\nobject. We made a function called homePageView that takes the request\nobject and sends back the string \"My New App!\" as a response.\nFunction-based views (FBVs) and class-based views are the two types of\nviews in Django (CBVs). In this example, our code is a function-based view.\nIt is clear and easy to implement. Django started out with only FBVs, but\nover time it added CBVs, which make it easier to reuse code, keep things\nDRY (Don't Repeat Yourself), and allow mixins to add more functionality.\nThe extra abstraction in CBVs makes them very powerful and short, but it\nalso makes them more complicated for people who are new to Django to\nread.\nDjango has a number of built-in generic class-based views (GCBVs) to\nhandle common use cases like creating a new object, forms, list views,\npagination, and so on. This is because web development tends to be\nrepetitive. In later chapters of this book, we will use GCBVs a lot.\nSo, technically, there are three ways to write a view in Django: function-\nbased views (FBVs), class-based views (CBVs), and generic class-based\nviews (GCBVs). This customization is useful for more experienced\ndevelopers, but it is hard to understand for new developers. Many Django\ndevelopers, including the person who wrote this article, like to use GCBVs\nwhen they can and switch to CBVs or FBVs when they have to. By the end of\nthis book, you'll have tried all three, so you can decide for yourself which one\nyou like best.\nNext, we need to configure the URLs. Notice that there is no urls.py in the\nwebpages folder. We need to create it. Once you do that, write in the\nfollowing code:\nfrom django.urls import path\nfrom .views import homePageView\nurlpatterns = [\npath(\"\", homePageView, name=\"home\"),\n]\nOn the first line, we import the path from Django to link our URL; on the\nsecond line, we import the views from the same folder. By calling the\nviews.py file .views, we are telling Django to look for a views.py file in the\ncurrent folder and import the homePageView function from there.\nOur URL file is made up of three parts:\na Python regular expression for the empty string \" \",\na reference to the view called \"homePageView,\" and\nan optional named URL pattern called \"home.\"\nIn other words, if the user asks for the homepage, represented by the empty\nstring \",\" Django should use the view called homePageView.\nJust one last thing now. Now we need to update the urls.py file in our django\nmy_project folder. It's common for a Django project to have more than one\napp in our webpages, each app needs its own URL path.\nAll you need to do is edit the code like this:\nfrom django.contrib import admin\nfrom django.urls import path\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"\", include(\"webpages.urls\")),\n]\nNow let us test our Home Page. Restart your server with the following code\nand reload that url in your browser:\npython manage.py runserver\nNow, let us move on.\nUsing Git\nIn the last chapter, we set up Git, which is a version control system. Let's put\nit to use. The first step is to add Git to our repository or start it up. Make sure\nyou have Control+c pressed to stop the local server, and then run the\ncommand git init.\ngit init\nWhen you run this, git will take control of the script. You can check and track\nchanges by typing the command git status.\nIt is not advisable to allow our virtual environment, .venv, to be controlled by\ngit. It shouldn't be in Git source control because it often contains secret\ninformation like API keys and the like. To hack this, use Django to create a\nnew file called .gitignore that tells Git what to ignore.\n.venv/\n.venv will no longer be there if you run git status again. Git has ‘ignored’ it.\nWe also need to track the packages that are installed in our virtual\nenvironment. The best way to do that is to put this data in a requirements.txt\nfile. Type the following command line:\npip freeze > requirements.txt\nThis will create the requirements.txt file and output the data we need. We\nneed this because besides installing Django, there are many other packages\nthat Django relies on to run. When you install one Python package, you often\nhave to install a few others that it depends on as well. A requirements.txt file\nis very important so that it can help us see all the packages.\nNow, we want to ensure that we will not have to manually add anything. We\nwill automate it so that it inputs whatever we install moving on. Use this\ncode:\n(.venv) > git add -A\n(.venv) > git commit -m \"initial commit\"\nYou can now exit the virtual environment by running “deactivate”.\nCongratulations! In this chapter, we've talked about a lot of essential ideas.\nWe made our first Django app and learned how projects and apps are set up\nin Django. We learned about views, URLs, and the Django web server built\ninto the program. Move on to Chapter 3, where we'll use templates and class-\nbased views to create and deploy a more complex Django app.\nC 3 - D A W P\nHAPTER JANGO PP ITH AGES\nIn this chapter, we'll create, test, and deploy a website app with a homepage\nand a services page. We haven't learned about databases, so you don’t have to\nworry much. However, we'll cover that in the next chapter. We'll learn about\nclass-based views and templates, which are the building blocks for the more\ncomplex web applications we'll make later in the book.\nIn the previous chapter, the process of creating our blank app involves some\ninitial setup where we need to create some new .py app files for the server.\nWe will do the same here.\nSetup\nYou have learned how to set up Django to create an application in chapter 2.\nUse the knowledge to\nmake a new folder (project) called \"website\" for our code and go\nthere.\ncreate a new virtual environment with the name .venv and turn it on.\ninstall Django.\ncreate a new Django project and call it django_project\nmake a new app and call it Pages\nMake sure, at the command line, that you are not working in a virtual\nenvironment that is already set up.\nThe steps outlined above are in easy steps, with each of the following lines a\ncommand you must run before the next:\n> cd OneDrive\\Desktop\\script\n> mkdir website\n> cd website\n> python -m venv .venv\n> .venv\\Scripts\\Activate.ps1\n(.venv) > python -m pip install django~=4.0.0\n(.venv) > django-admin startproject django_project .\n(.venv) > python manage.py startapp pages\nRemember that we need to add the new project to the INSTALLED APPS\nsetting in the settings.py file under the django_project folder. Now, open this\nfile in your text editor and add the following line to the end:\n\"pages.apps.PagesConfig\",\nThe migrate function moves the database and the runserver tool to start the\nlocal web server. Refer to chapter 2.\nAdding Templates\nA good web framework must make it easy to make HTML files. In Django,\nwe use templates, which are separate HTML files that can be linked together\nand also have some basic logic built into them.\nRemember that in the last chapter, the phrase \"My First App\" was hardcoded\ninto a views.py file on our first site. That works technically, but if you want\nto build a big website, you will suffer a lot going that route. The best way is\nto link a view to a template because the information in each is kept separate.\nIn this chapter, we'll learn how to use templates to make our homepage and\nabout page. In later chapters, you'll learn how to use templates to develop\nwebsites with hundreds, thousands, or even millions of pages that only need a\nsmall amount of code.\nThe first thing to learn is where to put templates in a Django project. By\ndefault, Django's template loader looks inside each app for templates that go\nwith it. But the structure is a little confusing: each app needs a new templates\ndirectory, another directory with the same name as the app, and then the\ntemplate file.\nThat implies that there will be a new folder in the pages folder called\ntemplates. Inside templates, we need another folder with the name of the app\nas pages, and then we will now save our template itself inside that folder as\nhome.html.\nNow, let us create a templates folder. Enter the pages folder in the code and\ntype in the following:\nmkdir templates\nNext, we have to add the new template to the settings.py file inside the\ndjango project so that Django knows where our new templates directory is.\nAdd the following to the TEMPLATES setting under \"DIRS.\"\n[BASE_DIR / \"templates\"],\nSo it looks like this:\nMake a new file called home.html in the templates directory. You can do this\nin your text editor. In Visual Studio Code, click \"File\" and then \"New File\" in\nthe top left corner of the screen. Make sure to give the file the correct name\nand save it in the right place.\nFor now, a simple headline will be in the home.html file.\n<h1>Homepage\nWelcome to My Website\n</h1>\nThat’s it. We are done creating our template. The next thing is for us to\nupdate the URL and view files.\nClass and Views\nYou have seen how we deployed function-based views in the previous\nchapter. That was how Django was when it came. But doing that means\ndevelopers will repeat the same patterns over and over again, writing a view\nthat lists all objects in the model, and so on.\nClasses are an essential part of Python, but we won't go into detail about them\nin this book. If you need an introduction or a refresher, I suggest reading the\nofficial Python documentation, which has an excellent tutorial on classes and\nhow to use them.\nWe will use the built-in TemplateView to show our template in our view.\nHere is how to do that: Go to the pages folder and edit the views.py file with\nthis code:\nfrom django.shortcuts import render\n# Create your views here.\nfrom django.views.generic import TemplateView\nclass HomePageView(TemplateView):\ntemplate_name = \"home.html\"\nSince HomePageView is now a Python class, we had to capitalize it. Unlike\nfunctions, classes should always start with a capital letter. The logic for\nshowing our template is already built into the TemplateView. All we need to\ndo is tell it the name of the template.\nOur URLs\nLast, we need to change our URLs. You may remember from Chapter 2 that\nwe have to make changes in two places. First, we change the django\nproject/urls.py file so that it points to our pages app. Then, we match views to\nURL routes within pages.\nLet's start with the urls.py file in the django project folder.\nDo you remember this code? On the second line, we add include to point the\ncurrent URL to the Pages app.\nNow, go ahead and create a new file in the pages folder and name it urls.py,\nand put the following code in it. This pattern is almost the same as what we\ndid in Chapter 2, with one big difference: when using Class-Based Views,\nyou always add as view() to the end of the view name.\nfrom django.urls import path\nfrom .views import HomePageView\nurlpatterns = [\npath(\"\", HomePageView.as_view(), name=\"home\"),\n]\nAnd that is it! You can run the code now by typing the command:\npython manage.py runserver\nThen go to your browser.\nWe did it!\nAbout Page\nThe process is the same. The only difference is in the content. We'll create a\nnew template file, a new view, and a new url route. How will you do this?\nStart by creating a new template file called about.html within the templates\nfolder and put a short HTML header in it.\n<h1>About Me</h1>\nNow, like you did for the homepage, go to the views.py file in pages and\ncreate a view for this new page template you just built. Add the following\ncode after the Home page view that is already there:\nclass AboutPageView(TemplateView):\ntemplate_name = \"about.html\"\nLastly, you need to go to the urls and import the about page view name so\nthat you can connect it to a URL. Use the code below:\npath(\"about/\", AboutPageView.as_view(), name=\"about\"),\nGo back to your browser and try the url http://127.0.0.1:8000/about\nExtending Templates\nThe best thing about templates is how you can extend them. Most websites\nhave headers or footers that you see on every page. How can you do that?\nFirst, we make a file called base.html within the templates folder, and we will\nput in a header with links to the two pages we have. You can call this file\nanything, but many developers use base.html.\nDjango has a simple templating language that we can use to add links and\nsimple logic to our templates. The official documentation shows the full list\nof template tags that come with the program. Template tags are written like\nthis: %something%, where \"something\" is the template tag itself. You can\nmake your own template tags, but we won't cover that here.\nWe can use the built-in url template tag, which takes the URL pattern name\nas an argument, to add URL links to our project. Create the base.html file and\nadd the following code:\n<header>\n<a href=\"{% url 'home' %}\">Home</a> |\n<a href=\"{% url 'about' %}\">About</a>\n</header>\n{% block content %} {% endblock content %}\nNow let us go and edit the home.html and about.html files to show the new\nbase.html code. The extends method in the Django templating language can\nbe used for this.\nOpen the home.html and change the code that was there to this:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>Welcome to my website!</h1>\n{% endblock content %}\nOpen the about.html and change the code that was there to this:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>About Me</h1>\n{% endblock content %}\nReload your server in the browser, and you will see the header showing on\nboth pages like so:\nYay! We have created a two-page website. Let us talk about one practice that\ndifferentiates good programmers from great ones.\nTesting\nWhen a codebase changes, it's crucial to add automated tests and run them.\nTests take a little time to write, but they pay off in the long run.\nUnit testing and integration testing are the two main types of testing. Unit\ntests look at a single piece of functionality, while integration tests look at\nhow several pieces work together. Unit tests only test a small amount of code,\nso they run faster and are easier to keep up to date. Integration tests take\nlonger and are harder to keep up with because the problem comes from when\nthey fail. Most developers spend most of their time writing unit tests and only\na few integration tests.\nThe Python standard library has a built-in testing framework called unittest. It\nuses TestCase instances and a long list of assert methods to check for and\nreport failures.\nOn top of Python's unittest, Django's testing framework adds several\nBase class for TestCase. These include a test client for making fake Web\nbrowser requests, many Django-specific additional assertions, and four test\ncase classes: SimpleTestCase, TestCase, TransactionTestCase, and\nLiveServerTestCase.\nIn general, you use SimpleTestCase when you don't need a database, while\nyou use TestCase when you do want to test the database. LiveServerTestCase\nstarts a live server thread that can be used for testing with browser-based\ntools like Selenium. TransactionTestCase is useful if you need to test\ndatabase transactions directly.\nOne quick note before we move on: you may have noticed that the names of\nmethods in unittest and django.test are written in camelCase instead of the\nmore Pythonic snake case pattern. Because unittest is based on the jUnit\ntesting framework from Java, which does use camelCase, camelCase naming\ncame with unittest when it was added to Python.\nIf you look in our pages app, you'll see that Django has already given us a file\ncalled tests.py that we can use. Since our project hasn't got to do with a\ndatabase, we'll import SimpleTestCase at the top of the file. For our first test,\nwe'll make sure that both of our website's URLs, the homepage and the\n\"about\" page, return the standard HTTP status code of 200, which means that\nthe request was successful.\nfrom django.test import TestCase\n# Create your tests here.\nfrom django.test import SimpleTestCase\nclass HomepageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\nclass AboutpageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/about/\")\nself.assertEqual(response.status_code, 200)\nTo run the test, you must first stop the server with Ctrl + C and then type in\nthe command python manage.py test to run the tests.\nIf you see an error like \"AssertionError: 301 does not equal 200,\" you\nprobably forgot to add the last slash to \"/about\" above. The web browser\nknows to automatically add a slash if it's not there, but that causes a 301\nredirect, not a 200 success response.\nHow about we test the name of the urls of our pages? In our urls.py file in\npages, we added \"home\" to the path for the homepage and \"about\" to the path\nfor the about page. We can run a test on both pages with a useful Django\nfunction called reverse. Now, open the test.py file, and edit it. First, import\nreverse at the top of the code and add a new unit test for each below it. This is\nthe latest updated code in the test.py file:\nfrom django.test import SimpleTestCase\nfrom django.urls import reverse\nclass HomepageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nclass AboutpageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/about/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertEqual(response.status_code, 200)\nNow, rerun the test.\nSo far, we have tested where our URLs are and what they are called, but not\nour templates. Let's ensure that the right templates, home.html, and\nabout.html, are used on each page and that they show the expected content\nwe wrote inside the templates.\nLet us use assertTemplateUsed and assertContains. Update the test.py code to\nbecome this:\nfrom django.test import SimpleTestCase\nfrom django.urls import reverse\nclass HomepageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\ndef test_template_name_correct(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertTemplateUsed(response, \"home.html\")\ndef test_template_content(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertContains(response, \"<h1>Welcome to my website!</h1>\")\nclass AboutpageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/about/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertEqual(response.status_code, 200)\ndef test_template_name_correct(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertTemplateUsed(response, \"about.html\")\ndef test_template_content(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertContains(response, \"<h1>About Me</h1>\")\nIf an experienced programmer looks at our test code, they may scoff at us\nbecause it repeats a lot. For example, we had to set an answer for each of the\neight tests.\nIn Django coding, there is a rule called Don't Repeat Yourself (DRY). This\nrule makes code clean. However, unit tests work best when they are self-\ncontained and very verbose. As a test suite grows, it might be better for\nperformance to combine multiple assertions into fewer tests. However, that is\nan advanced and often subjective topic that is beyond the scope of this book.\nIn the future, especially when we start working with databases, we'll do a lot\nmore testing. For now, it's essential to see how easy and important it is to add\ntests to our Django project whenever we add new features.\nNow, let us use Git to track the changes. You can upload your code to\nGitHub if you have a repository. You can create one for your Django\nprojects. Also, remember to create a .gitignore file in your project folder and\nput .venv/ so that we will keep our virtual environment out of the checks.\nThen run the git add -A and the git commit -m \"initial commit\".\nNow go to GitHub. If you don’t already have a GitHub account, it’s time you\ncreated one. You must now create a new repository and call it \"pages,\" and\nmake sure the \"Private\" radio button is selected. Then click the button that\nsays \"Create repository.\"\nScroll to the bottom of the next page until you see \"...or push an existing\nrepository from the command line.\" Copy the two commands there and paste\nthem into your terminal.\nIt should look like the example below, but instead of MacVicquayns, your\nGitHub username should be there.\ngit remote add origin https://github.com/MacVicquayns/pages.git\ngit push -u origin main\nWebsite Production\nTo deploy our new web project to the internet so that everyone can access it,\nwe need to put our code on an external server and database. What we have\ndone is local code. That only lives on our computer. We need production\ncode that will be on a server outside of our computer that everyone can\naccess.\nThe settings.py in our django_project folder is used to set up a new project\nfor local development. Because it's easy to use, we have to change a number\nof settings when it's time to put the project into production.\nDjango comes with its own basic server, which can be used locally but not in\na production setting. You can choose between Gunicorn and uWSGI.\nGunicorn is the easiest to set up and works well enough for our projects, so\nwe will use that.\nWe will use Heroku as our hosting service because it is free for small\nprojects, is used by a lot of people, and is easy to set up.\nHeroku\nSearch for Heroku on your search engine and open the official website.\nCreate a free account with the registration form and wait for an email with a\nlink to confirm your account. A link in the verification email takes you to the\npage where you can set up your password. Once you've set everything up, the\nsite will take you to the dashboard.\nNow that you have signed up, you need to install Heroku's Command Line\nInterface (CLI) so that we can deploy from the command line. We currently\nwork on our Pages project in a virtual environment, but we want Heroku to\nbe available everywhere on our machine and not only in the virtual\nenvironment. So you can open a new command line terminal for this.\nOn Windows, go to the Heroku CLI page to learn how to install the 32-bit or\n64-bit version correctly. For macOS, you can use Homebrew to install it.\nHomebrew is already on your Mac computer. Type this code in a new\nterminal tab, not in a virtual environment.\nbrew tap heroku/brew && brew install heroku\nOnce the installation is done, you can close the new command line tab and go\nback to the first tab with the pages virtual environment open.\nType \"heroku login\" and follow the instructions to use the email address and\npassword you just set up for Heroku to log in.\nNow, we are ready to deploy the app online.\nLet’s Deploy\nThe first thing to do is to set up Gunicorn, which is a web server for our\nproject that is ready for production. Remember that we've been using\nDjango's own lightweight server for local testing, but it's not good enough for\na live website. Let us use Pip to install Gunicorn.\nType in the following code:\npython -m pip install gunicorn==20.1.0\nStep two is to make a file called \"requirements.txt\" that lists all the Python\ndependencies that our project needs. That is, all of the Python packages we\nhave installed in our virtual environment right now. This is important in case\na team member, or we ever want to start over with the repository. It also lets\nHeroku know that the project is written in Python, which makes the\ndeployment steps easier.\nTo make this file, we will tell the pip freeze command to send its output to a\nnew file called requirements.txt. Use the code below:\npython -m pip freeze > requirements.txt\nThe third step is to look in the django project and add something to the\nsettings.py file. Go to the ALLOWED HOSTS setting, which tells us which\nhost/domain names our Django site can serve. This is a way to keep HTTP\nHost header attacks from happening. For now, we'll use the asterisk * as a\nwildcard so that all domains will work. We'll learn later in the book how to\nexplicitly list the domains that should be allowed, which is a much safer way\nto do things.\nStep four is to make a new Procfile in the same folder as manage.py (the base\nfolder). Go to the folder where manage.py is, create a new file, and name it\nProcfile. The Procfile is unique to Heroku and tells you how to run the app in\ntheir bundle. In this case, inside the Profile, we're telling the web function to\nuse the gunicorn server, the WSGI configuration file at django_project.wsgi,\nand the --log-file flag to show us any logging messages. Type the following\nline inside the Profile.\nweb: gunicorn django_project.wsgi --log-file -\nThe last step is to tell Heroku which version of Python to use. This will let\nyou quickly know what version to use in the future. Since we are using\nPython 3.10, we need to make a runtime.txt file that is just for it. Using your\ntext editor, create this new runtime.txt file in your text editor in the same\nfolder as the Procfile and manage.py files.\nRun python --version to find out what version of Python is being used and\ncopy it and paste it into the new runtime.txt file. Make sure everything is in\nsmall letters.\nCheck the changes with git status, add the new files, and then commit the\nchanges:\ngit status\ngit add -A\ngit commit -m \"New updates for Heroku deployment\"\nThe last step is to use Heroku to put the code into action. If you've ever set up\na server on your own, you'll be surprised at how much easier it is to use a\nplatform-as-a-service like Heroku.\nHere's how we'll do things:\nHeroku: make a new app\nDisable the static file collection (we'll discuss this later).\nThe code was sent to Heroku.\nstart the Heroku server so the app can be used by people\nvisit the app's URL, which Heroku gives you.\nThe first step, making a new Heroku app, can be done from the command\nline with the heroku create command. Heroku will give our app a random\nname, like ⬢ intense-inlet-86193 in my case. You will have a different\nname.\nThe heroku create command also makes a remote for our app called\n\"heroku.\" Type git remote -v to see this.\nWith this new remote, we can push and pull code from Heroku as long as the\nword \"heroku\" is in the command.\nAt this point, we only need one more set of Heroku setup, and that is to tell\nHeroku to start ignoring static files like CSS and JavaScript. Django will\noptimize these for us by default, which can cause problems. We'll talk about\nthis in later chapters, so for now, just run the command below:\nheroku config:set DISABLE_COLLECTSTATIC=1\nNow, use the following line to push the code to Heroku:\ngit push heroku main\nWe're done! The final step is to make sure our app is up and running. If you\ntype the command heroku open, your web browser will open a new tab with\nthe URL of your app:\nYou don't have to log out of your Heroku app or leave it. It will keep running\non its own at this free level, but you'll need to type \"deactivate\" to leave the\nlocal virtual environment and move on to the next chapter.\nCongratulations on getting your second Django project up and running. This\ntime, we used templates and class-based views, explored URLs in more\ndepth, added basic tests, and used Heroku. Don't worry if the deployment\nprocess seems too much for you. Deployment is complex, even with a tool\nlike Heroku. The good news is that most projects have the same steps, so you\ncan use a deployment checklist each time you start a new project.\nIn the next chapter, we'll start our first database-backed project, a Message\nBoard website, and see where Django shines. We'll use templates and class-\nbased views to build and deploy a more complex Django app.\nC 4 - C Y F D -\nHAPTER REATE OUR IRST ATABASE\nD A A U T D A\nRIVEN PP ND SE HE JANGO DMIN\nWe'll create a simple message board application in this chapter so users can\npost and read brief messages. We're going to use a database for the first time\nhere. We'll examine Django's robust internal admin interface, which enables\nus to modify our data understandably. After adding tests and deploying the\napp to Heroku, we'll push our code to GitHub.\nThere is built-in support for MySQL, PostgreSQL, Oracle, MariaDB, and\nSQLite as database backends, because of Django's robust Object-Relational\nMapper (ORM). The same Python code can be written by developers in a\nmodels.py file, and it will be automatically converted into the appropriate\nSQL for each database. Our settings.py file, located inside the django project\nfolder, only needs the DATABASES section to be modified. This function is\nreally fantastic!\nSince SQLite is a file-based database, it is much simpler to use than the other\ndatabase options, which require running a separate server in addition to\nDjango. This is why Django uses SQLite by default for local development.\nInitial Setup\nAt this point in the book, we've already set up a few Django projects, so we\ncan quickly go through the basic commands to start a new one. Here's what\nwe need to do:\nCreate a folder called message-board to store our code.\nMake a new project called django_project and install Django in a virtual\nenvironment.\nMake a new Django app called posts\nupdate the settings file at django project/settings.py.\nType the following commands into a new command line console. Remember\nthat you must run each line before typing the next:\n> cd C:\\Users\\OneDrive\\Desktop\\script\n> mkdir message-app\n> cd message-app\n> python -m venv .venv\n> .venv\\Scripts\\Activate.ps1\n(.venv) > python -m pip install django~=4.0.0\n(.venv) > django-admin startproject django_project .\n(.venv) > python manage.py startapp posts\nNow, let’s add the new app, posts to the INSTALLED_APPS section of our\nsettings.py file in the django_project folder. Do you remember the way to do\nthat?\nAdd the following line to the section:\n\"posts.apps.PostsConfig\",\nThen, use the migrate command to get started with a database already\nconfigured for use with Django.\npython manage.py migrate\nYou should see db.sqlite3 among the new files now representing the SQLite\ndatabase.\nWhen you first run either migrate or runserver, a db.sqlite3 file is generated,\nbut the migrate command will update the database to reflect the current state\nof any database models that are part of the project and are included in\nINSTALLED APPS. That is to say, every time you change a model, you'll\nneed to execute the migrate command to ensure the database is in sync with\nyour changes. More to come on this.\nUse the runserver to launch our local server and check whether it’s working.\npython manage.py runserver\nNow go to the local URL on your browser: http://127.0.0.1:8000/\nIf you don’t see the Django welcome page, there is something wrong with\nyour script.\nThe Database Model\nThe first course of action is to build a database structure that can be used to\nsave and display user-submitted content. This model can be easily converted\ninto a database table with the help of Django's ORM. While many different\ndatabase models may be required for a complex Django application, this\nsimple message board program requires a single one.\nOpen the models.py file in the posts folder to view the Django-supplied\ndefault code.\nIn the first line there, as you can see, Django imports a module called models\nto allow us to create new database models that can \"model\" our data. We\nneed a model to save the text of a message board post, and we can achieve so\nby adding the following lines:\nclass Post(models.Model):\ntext = models.TextField()\nRemember that we just made a new database model called Post, which has a\nfield text. The type of information stored in this TextField(). Model fields in\nDjango may store a wide variety of data, including text, dates, numbers,\nemails, and more.\nActivate the models\nOur new model is complete; the next step is to put it into action. In the future,\nupdating Django will involve a two-step process anytime a model is created\nor modified:\nTo begin, we use the makemigrations command to generate a migrations file.\nBy using migration files, we can keep track of modifications made to the\ndatabase models over time and debug issues as they arise.\nSecond, we use the migrate command, which runs the commands in our\nmigrations file, to construct the database.\nEnsure that the local server is stopped. You can stop it by typing Control + c\non the command line. After that, run python manage.py makemigrations\nposts and python manage.py migrate.\nPlease keep in mind that the last name is optional after makemigrations. A\nmigrations file will be generated for all accessible modifications in the\nDjango project if you simply execute python manage.py makemigrations.\nThat makes sense for a small project with a single app, like ours, but not for\nthe vast majority of Django projects, which typically involve multiple apps.\nSo, if you updated the model across different apps, the resulting migrations\nfile would reflect all of those revisions. Clearly, this is not the best scenario.\nThe smaller and more concise a migrations file is, the simpler it is to debug\nand undo any mistakes. To this end, it is recommended that the name of an\napplication be specified whenever the makemigrations command is run.\nDjango Admin\nDjango's robust admin interface, which allows users to visually interact with\ndata, is a major selling point for the framework. This is partly because\nDjango's origins lie in its employment as a content management system for\nnewspapers (Content Management System). The goal was to provide a place\nfor writers to draft and revise articles outside the \"code\" environment. The in-\nbuilt admin app has matured into a powerful, ready-made resource for\nhandling any and all parts of a Django project.\nIt is necessary to generate a superuser before accessing the Django admin.\nType python manage.py createsuperuser into the command prompt and enter\na username, email address, and password when prompted.\npython manage.py createsuperuser\nUsername (leave blank to use 'jide'): Abby\nEmail address: abytobyvictoryme@gmail.com\nPassword:\nPassword (again):\nSuperuser created successfully.\nThe command line console will hide your password as you write it for\nsecurity purposes. Run python manage.py runserver to restart the Django\nserver, then navigate to http://127.0.0.1:8000/admin/ in a web browser. A\nscreen prompting you to enter your admin login should appear.\nEnter the new login details you just registered. The next screen you see is the\nDjango administration dashboard:\nYou can adjust the LANGUAGE in the settings.py file. It is set to American\nEnglish, en-us, by default. You can access the admin, forms, and other\ndefault messages in a language other than English.\nOur post app does not appear on any primary administration pages. Before\nthis shows on the website, the admin.py file for an app needs to be updated in\nthe same way that the INSTALLED_APPS settings needs to be modified for\nthe app to be shown in the admin.\nFor the Post model to be visible, open admin.py in the posts folder in your\npreferred text editor and insert the following lines of code.\nfrom .models import Post\nadmin.site.register(Post)\nNow, run the server again and go to the page.\nLet's add our first post to the message board to our database. Click the \"+\nAdd\" button next to \"Posts\" and type your own text in the \"Text\" field.\nThen, click \"Save.\" This will take you back to the main Post page. Yet, if you\ntake a closer look, you'll notice that our new entry is titled \"Post object (1).\"\nYou can change that. Go to the posts folder and open the models.py file.\nFrom there, add a new function with the following code:\ndef __str__(self):\nreturn self.text[:50]\nWe told the code to give the post a title based on the first 50 characters of the\npost on the page. If you save this and refresh your admin page, you will see\nthe change:\nAll models should have str() methods to make them easier to read.\nViews/Templates/URLs\nWe need to connect our views, templates, and URLs so that the data in our\ndatabase can be displayed on the front page. You should recognize this\nstructure.\nFirst, let's take in the view. Earlier in the book, we displayed a template file\non our homepage using the built-in generic TemplateView. To that end, we\nwill detail our database model's components. Thankfully, this is very simple\nin web development, and Django provides the generic class-based ListView\nfor this purpose.\nCopy and paste the following Python code into the posts/views.py file:\nfrom django.shortcuts import render\n# Create your views here.\nfrom django.views.generic import ListView\nfrom .models import Post\nclass HomePageView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nThe ListView and Post models are imported on the first and second lines.\nHomePageView is a subclass of ListView with the appropriate model and\ntemplate declared.\nWith the completion of our view, we can go on to the next steps of\ndeveloping our template and setting up our URLs. So, let's get started with\nthe basic structure. First, use Django to make a folder named templates.\nmkdir templates\nThen we need to tell Django to use this new templates directory by editing\nthe DIRS column in the Templates section in our settings.py file in the\ndjango project folder.\n\"DIRS\": [BASE_DIR / \"templates\"],\nCreate a new file in the templates folder, home.html, using your preferred\ntext editor. The template tag has a built-in looping capability, and ListView\nprovides us with a context variable named <model>_list, which is the name\nof our model. We'll make a new variable called post and then use post.text to\nget at the field we want to show. This is the script for the home.html file:\n<h1>Message board homepage</h1>\n<ul>\n{% for post in post_list %}\n<li>{{ post.text }}</li>\n{% endfor %}\n</ul>\nNow, lastly, we set up our URLs. Go to the urls.py file inside the\ndjango_project folder. Go to the point where we added our posts app and put\ninclude in the second line like so:\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"\", include(\"posts.urls\")),\n]\nNext, go to the posts folder and create the urls.py there too. Update that with\nthe following code:\nfrom django.urls import path\nfrom .views import HomePageView\nurlpatterns = [\npath(\"\", HomePageView.as_view(), name=\"home\"),\n]\nUse python manage.py runserver to restart the server and navigate to the local\nurl in your browser. Check the home page of our new app.\nWe're almost finished, but before we call it a day, let's make a few more\nforum posts in the Django backend and make sure they show up\nappropriately on the front page.\nLet’s Add New Posts\nPlease return to the Admin and make two more posts in order to update our\nforum. It will then display the prepared posts automatically on the homepage\nwhen you return to it. Awesome!\nAssuming no errors have been encountered, we may now set up the directory\nand make a .gitignore file. Make a new .gitignore file in your text editor and\nadd the following line:\n.venv/\nThen, after using git status once more to verify that the .venv directory is\nbeing ignored, you can use git add -A to add the desired files and directories\nand a first commit message.\nTests\nPreviously, we used SimpleTestCase because we were testing fixed pages.\nSince our project now incorporates a database, we must use TestCase to\ngenerate a replica of the production database for testing purposes. We may\ncreate a new test database, populate it with sample data, and run tests against\nit instead of our live database, which is both safer and more efficient.\nTo generate test data, we will invoke the hook setUpTestData(). This feature,\nintroduced in Django 1.8, makes it possible to produce test data only once per\ntest case rather than once each test, making it much faster than using the\nsetUp() hook from Python's unittest. However, setUp() is still commonly\nused in Django projects. Any such tests should be migrated to setUpTestData,\nas this is a proven method of increasing the overall speed of a test suite.\nLet's get our data in order and then double-check that it was saved correctly\nin the database, as there is only one field in our Post model: text. To make\nsure Django runs them, all test methods should begin with test*. The code\nwill look like this:\nfrom django.test import TestCase\n# Create your tests here.\nfrom .models import Post\nclass PostTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.post = Post.objects.create(text=\"This is a test!\")\ndef test_model_content(self):\nself.assertEqual(self.post.text, \"This is a test!\")\nTestCase and Post are imported first. PostTests extends TestCase and uses\nsetUpTestData to create initial data. In this case, cls.post stores a single item\nthat may be referred to as self.post in the following tests. Our first test, test\nmodel content, uses assertEqual to verify text field content.\nGo to the command line and run this:\npython manage.py test\n(.venv)> python manage.py test\nFound 1 test(s).\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.\n----------------------------------------------------------------------\nRan 1 test in 0.002s\nOK\nDestroying test database for alias 'default'...\nThe test shows no errors! Still, the output ran only one test when we have two\nfunctions. Note that we set the test to only check functions that start with the\nname test*!\nNow, let’s check our URLs, views, and templates as we did in chapter 3. We\nwill also check\nURL for / and a 200 HTTP status code.\nURL for “home”.\nThe home page shows “home.html” content correctly\nSince only one webpage is involved in this project, all of these tests may be\nincorporated into the already PostTests class. In the header, select \"import\nreverse,\" then add the tests as seen below.\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom .models import Post\nclass PostTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.post = Post.objects.create(text=\"This is a test!\")\ndef test_model_content(self):\nself.assertEqual(self.post.text, \"This is a test!\")\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\ndef test_template_name_correct(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertTemplateUsed(response, \"home.html\")\ndef test_template_content(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertContains(response, \"This is a test!\")\nWith this, run the test again:\npython manage.py test\nFound 5 test(s).\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.....\n----------------------------------------------------------------------\nRan 5 tests in 0.131s\nOK\nDestroying test database for alias 'default'...\nIn the previous chapter, we discussed how unit tests work best when they are\nself-contained and highly verbose. However, the last three tests are testing\nthat the homepage works as expected: it uses the correct URL name, the\nintended template name, and contains expected content. We can combine\nthese three tests into one single unit test, test_homepage.\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom .models import Post\nclass PostTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.post = Post.objects.create(text=\"This is a test!\")\ndef test_model_content(self):\nself.assertEqual(self.post.text, \"This is a test!\")\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_homepage(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nself.assertTemplateUsed(response, \"home.html\")\nself.assertContains(response, \"This is a test!\")\nWe want our test suite to cover as much of the code as feasible while still\nbeing straightforward to reason about (both the error messages and the testing\ncode itself). This revision is much simpler to read and comprehend, in my\nopinion.\nNow that we've finished making changes to the code for testing, we can\ncommit them to git.\n(.venv) > git add -A\n(.venv) > git commit -m \"added tests\"\n[main 89ba70d] added tests\n2 files changed, 20 insertions(+), 1 deletion(-)\ncreate mode 100644 posts/__pycache__/tests.cpython-310.pyc\nStoring to GitHub\nWe should use GitHub to host our source code. Message-board is the name of\nthe repository you will be creating, and if you haven't already done so, log\ninto GitHub and sign up for an account. For more discreet communication,\nchoose the \"Private\" option.\nThe option to \"or push an existing repository from the command line\" is at\nthe bottom of the following page. If you replace my username with your own\nGitHub username, the two commands there should look like the next and may\nbe copied and pasted into your terminal:\ngit remote add origin https://github.com/MacVicquayns/message-board.git\ngit branch -M main\ngit push -u origin main\nSetup Heroku\nBy now, you should have a Heroku account. The following is our deployment\nchecklist:\ninstall Gunicorn\nsetup requirements.txt\nedit the ALLOWED_HOSTS in settings.py\ncreate Procfile\ncreate runtime.txt\nUse Pip to install Gunicorn.\npython -m pip install gunicorn==20.1.0\nIn the past, we would simply set ALLOWED HOSTS to * to accept all hosts,\nbut this proved to be a flawed and potentially harmful shortcut. Our level of\nspecificity may and should be increased. Django can be used on either\nlocalhost:8000 or 127.0.0.1:8000. Having used Heroku before, we know that\nall Heroku sites will have the.herokuapp.com extension. All three hosts may\nbe included in the ALLOWED HOSTS setting. Open your settings.py in the\ndjango_project folder and update the ALLOWED_HOSTS list with the\nfollowing:\n\".herokuapp.com\", \"localhost\", \"127.0.0.1\"\nNow, create your Procfile and put this code in it:\nweb: gunicorn django_project.wsgi --log-file -\nLastly, create a runtime.txt file in the base folder like Procfile. And populate\nwith this line:\npython 3.10.1\nNow, commit the new changes to git.\nDeploy to Heroku\nFirst, log in to your Heroku account with the heroku login command. Then\nuse the heroku create to create a new server.\nType in the following to tell Heroku to ignore static pages. This is skipped\nwhen you are creating a blog app.\nheroku config:set DISABLE_COLLECTSTATIC=1\nAfter that, we push the code to Heroku.\ngit push heroku main\nThen we scale it.\nheroku ps:scale web=1\nFrom the command line, type heroku open to open the new project's URL in a\nnew browser window. Closing the present virtual environment is as simple as\ntyping \"deactivate\" at the prompt.\nThat’s it! We have built a complete forum message board app. Well done. In\nthe next section, we will create a blog app.\nC 5 – B A\nHAPTER LOG PP\nThis chapter will focus on developing a Blog application where users may\nadd, modify, and remove posts.\nEach blog post will have its own detail page in addition to being shown on\nthe homepage. Also covered will be the basics of styling using CSS and how\nDjango handles static files.\nInitial Set Up\nThe first six steps we take in our development course have not changed. Set\nup the new Django project in the following steps:\ncreate a new base folder and call it blog\nstart a new virtual and install Django\nstart a new Django project and call it django_project\nstart a new app and call it blog\nmigrate the code to set up the database\nedit the settings.py file with the correct details.\nLet’s get started.\nThis is the sequence for Windows:\nThis is for MacOs:\nNow go to the settings.py file and update the INSTALLED_APPS section:\nNow, run the server and check the local url.\nInitial setup complete! Well done!\nDatabase Models\nWhat are the standard features of a blog platform? Say each post contains a\nheading, author name, and article. The following code can be pasted into the\nmodels.py file in the blog folder to create a database model:\nfrom django.db import models\nfrom django.urls import reverse\nclass Post(models.Model):\ntitle = models.CharField(max_length=200)\nauthor = models.ForeignKey(\n\"auth.User\",\non_delete=models.CASCADE,\n)\nbody = models.TextField()\ndef __str__(self):\nreturn self.title\ndef get_absolute_url(self):\nreturn reverse(\"post_detail\", kwargs={\"pk\": self.pk})\nOnce the new database model is complete, a migration record can be made,\nand an update may be made to the database.\nPress Ctrl + c to terminate the server.\nYou can finish this two-stage procedure by following the instructions below.\npython manage.py makemigrations blog\npython manage.py migrate\nWith these lines, we have created our database.\nAdmin Access\nHow will we access our data? We need to create Django's backend admin.\nType the following command and then follow the prompts to create a\nsuperuser account with a unique email address and password. For security\nreasons, your password will not display as you type it.\npython manage.py createsuperuser\nNow, we update the admin.py file.\nfrom django.contrib import admin\nfrom .models import Post\nadmin.site.register(Post)\nLet's add on a couple more blog posts. To add a new post, select the + Add\nbutton that appears next to Posts. All model fields are mandatory by default.\nTherefore be careful to give each post an \"author\" tag.\nIn order to display the data on our web application, we must now develop the\nviews, URLs, and templates required to interact with the database.\nURLs\nTo achieve this, we will first configure our urls.py file in the django_project\nfolder, as we have done in previous chapters, and then our app-level blog\nfolder’s urls.py file.\nMake a new file in the blog app named urls.py and paste the following into it\nusing your text editor.\nfrom django.urls import path\nfrom .views import BlogListView\nurlpatterns = [\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nWe imported the views we will do later. We give it a name, home so that we\ncan use it in our views later on, and the empty string (\"\") instructs Python to\nmatch all values.\nAlthough giving each URL a name isn't required, it's a good idea to help keep\ntrack of them as your list of URLs expands.\nWe also need to edit the urls.py file in the django_project folder so that it will\nsend all blog app requests there.\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"\", include(\"blog.urls\")),\n]\nViews\nWe will be using class-based views. Just a few lines of code in our views file,\nand we'll be able to see the results of our Post model in a ListView.\nfrom django.shortcuts import render\n# Create your views here.\nfrom django.views.generic import ListView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nTemplates\nNow that we have finished with our URLs and views, we can go on to the\nnext piece of the jigsaw, which is the templates. Previously in Chapter 4, we\nlearned that we can keep our code tidy by adopting from other templates.\nTherefore, we'll begin with a base.html file and an inherited home.html file.\nNext, we'll add templates for making and revising blog articles, and those\nmay all derive from base.html.\nWe should begin by making a folder to store our new template files. So, stop\nyour server and type in the code:\nmkdir templates\nMake two new template files in the templates folder. Call them base.html and\nhome.html.\nThe next step is to edit the settings.py file to direct Django to the appropriate\nfolder to find our templates.\nAdd this line to the TEMPLATES section:\n\"DIRS\": [BASE_DIR / \"templates\"],\nIn the base.html file, put the following:\n<!-- templates/base.html -->\n<html>\n<head>\n<title>Django blog</title>\n</head>\n<body>\n<header>\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</header>\n<div>\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nPut this in the home.html:\n<!-- templates/home.html -->\n{% extends \"base.html\" %}\n{% block content %}\n{% for post in post_list %}\n<div class=\"post-entry\">\n<h2><a href=\"\">{{ post.title }}</a></h2>\n<p>{{ post.body }}</p>\n</div>\n{% endfor %}\n{% endblock content %}\nIf you run python manage.py runserver again and then reload the homepage,\nwe will notice that the Django server is up and running.\nNow, that is our first website. But it looks ugly! Let’s fix that.\nAdd some Style!\nWe need to add some CSS to our project to enhance the styling. A\nfundamental component of any contemporary web application is CSS,\nJavaScript, and pictures, which are referred to as \"static files\" in the Django\necosystem. Although Django offers enormous flexibility in terms of how\nthese files are used, this can be very confusing for beginners.\nDjango will, by default, search each app for a subfolder called static. Or a\nfolder with the name static in the blog folder. If you remember, this is also\nhow the templates folder was created.\nStop the local server, then use the following line to create a static folder in the\nmanage.py file's location.\nmkdir static\nWe must instruct Django to look in this new folder when loading static files.\nThere is already one line of configuration in the settings.py file, which you\ncan find at the bottom:\nNow, below that, we add the following line:\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\nWe instruct Django to look for static files in the newly formed static\nsubfolder.\nUse this line to create a CSS subfolder:\nmkdir static/css\nUse your text editor to create a new file within this folder called base.css\ninside the new CSS subfolder. Then fill it with this code to create a page title\nand color it red!\nAlmost there! Add % load static % to the top of base.html to include the\nstatic files in the templates. We only need to include it once because all of our\nother templates inherit from base.html. Insert a new line after closing the\n<head> tag to include a direct link to the base.css file we just created.\n<!-- templates/base.html -->\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\">\n<head>\n<title>Django blog</title>\n</head>\n<body>\n<header>\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</header>\n<div>\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nStart up the server again and check the URL.\nWe can also customize other things like font size, type, etc., by tweaking the\ncss file.\nIndividual Blog Pages\nIndividual blog posts can now have their stated features implemented. A new\nview, URL, and template will have to be developed.\nOne must first take in the view. To make things easier, we can utilize the\nDetailView, which is built on a generic class. Add DetailView to the import\nat the top of the script and generate a new view named BlogDetailView.\nfrom django.shortcuts import render\n# Create your views here.\nfrom django.views.generic import ListView, DetailView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nLet's say we want to create a new URL path for our view. Use the code seen\nbelow in the urls.py in the blog folder:\nfrom django.urls import path\nfrom .views import BlogListView, BlogDetailView\nurlpatterns = [\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nFor consistency, we've decided to prefix all blog post URLs with post/. The\nnext thing to consider is the post entry's primary key, which we'll express as\nan integer, int:pk>. I know what you're thinking: \"What is the main factor?\"\nOur database models already have an auto-incrementing primary key86\nbecause Django included it by default. As a result, while we only stated the\nfields title, author, and body on our Post model, Django automatically added\nan additional field named id, which serves as our primary key. Either an id or\na pk will work to get in.\nFor our first \"Hello, World!\" message, we'll use a pk of 1. It's 2 for the\nsecond. The URL structure of our initial post, which will lead us to its\nparticular entry page, will look like this: post/1/.\nIf you recall, the get absolute url method on our Post model accepts a pk\nargument in this case since the URL specifies it. Primarily, new users often\nstruggle to grasp the relationship between primary keys and the get absolute\nurl method. If you are still confused, it may help to read the previous two\nparagraphs again. You'll get used to it after some repetition.\nAfter running python manage.py runserver, our first blog post will have its\nown URL of http://127.0.0.1:8000/post/1/.\nTo view the second entry, please visit http://127.0.0.1:8000/post/2/.\nThe link on the homepage should be updated so that we can easily navigate to\ncertain blog entries. Replace the current empty link with a href=\" % url 'post\ndetail' post.pk % \"> in home.html.\n{% extends \"base.html\" %}\n{% block content %}\n{% for post in post_list %}\n<div class=\"post-entry\">\n<h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2>\n<p>{{ post.body }}</p>\n</div>\n{% endfor %}\n{% endblock content %}\nCheck and click the post from the home page.\nTesting\nNew features have been added to our Blog project that we hadn't seen or tried\nbefore this section. We now have a user, various views (a list view of all blog\nposts and a detail view for each article), and a Post model with numerous\nfields. There is a lot to try out!\nTo start, we can prepare our test data and validate the Post model. So, this is\nhow it may look in a nutshell:\nfrom django.test import TestCase\n# Create your tests here.\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom .models import Post\nclass BlogTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.user = get_user_model().objects.create_user(\nusername=\"testuser\", email=\"test@email.com\", password=\"secret\"\n)\ncls.post = Post.objects.create(\ntitle=\"A good title\",\nbody=\"Nice body content\",\nauthor=cls.user,\n)\ndef test_post_model(self):\nself.assertEqual(self.post.title, \"A good title\")\nself.assertEqual(self.post.body, \"Nice body content\")\nself.assertEqual(self.post.author.username, \"testuser\")\nself.assertEqual(str(self.post), \"A good title\")\nself.assertEqual(self.post.get_absolute_url(), \"/post/1/\")\ndef test_url_exists_at_correct_location_listview(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_exists_at_correct_location_detailview(self):\nresponse = self.client.get(\"/post/1/\")\nself.assertEqual(response.status_code, 200)\ndef test_post_listview(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nself.assertContains(response, \"Nice body content\")\nself.assertTemplateUsed(response, \"home.html\")\ndef test_post_detailview(self): # new\nresponse = self.client.get(reverse(\"post_detail\", kwargs={\"pk\": self.post.pk}))\nno_response = self.client.get(\"/post/100000/\")\nself.assertEqual(response.status_code, 200)\nself.assertEqual(no_response.status_code, 404)\nself.assertContains(response, \"A good title\")\nself.assertTemplateUsed(response, \"post_detail.html\")\nFirst, we test whether the requested URL exists in the correct folder for both\nviews. Then, we ensure the home.html template is loaded, that the named\nURL is being utilized, that the right content is being returned, and that a\nsuccessful 200 status code is being returned by creating the test post listview.\nTo get a detail view of our test post, we must include the pk in response to\nthe test post - detailview method. We keep using the same template but\nexpand our tests to cover more edge cases. Since we haven't written\ntwo articles, we don't want a response at /post/100000/, for example. We also\nprefer to avoid an HTTP status code of 404. Incorrect examples of tests that\nshould fail should be sprinkled in from time to time to ensure that your tests\naren't all passing by accident.\nRun the new tests to make sure everything is working as it should.\nGit\nNow, let us do our first Git commit. First, initialize our folder, create the\n.gitignore and review all the content we’ve added by checking the git status.\n(.venv) > git status\n(.venv) > git add -A\n(.venv) > git commit -m \"initial commit\"\nWe have successfully created a working blog application from scratch.\nDjango's admin panel allows us to quickly generate, modify, and remove\ncontent. For the first time, we were able to create a detailed view of each blog\npost separately by employing DetailView.\nC 6 – D W F\nHAPTER JANGO EB ORMS\nIn this chapter, we'll continue developing the Blog application we started in\nChapter 5 by adding the necessary forms for users to add, modify, or remove\nentries from their blogs. To accept user input raises security problems,\nmaking HTML forms one of the more complex and error-prone components\nof online development. All submitted forms must be rendered correctly,\nvalidated, and stored in the database.\nDjango's powerful in-built Forms abstract away much of the difficulties,\nmaking it unnecessary to write this code from scratch. Displaying, making\nchanges to, or removing a form are some of the many commonplace actions\nthat Django's built-in generic editing views are catered to.\nCreateView\nThe first step is to provide a link to a website where new blog entries may be\nentered into our primary template. It will look like this: <a href=\"% url \"post\nnew\"%></a>.\nYour revised script should now look like this:\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link href=\"https://fonts.googleapis.com/css?family=\\\nSource+Sans+Pro:400\" rel=\"stylesheet\">\n<link href=\"{% static 'css/base.css' %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div>\n<header>\n<div class=\"nav-left\">\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</div>\n<div class=\"nav-right\">\n<a href=\"{% url 'post_new' %}\">+ New Blog Post</a>\n</div>\n</header>\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nWith this code, we have added the feature to post new content. But now, we\nneed to add a new URL for the post_new feature. We need to import\nBlogCreateView in the urls.py file and add a URL path for post/new/.\nfrom django.urls import path\nfrom .views import BlogListView, BlogDetailView, BlogCreateView\nurlpatterns = [\npath(\"post/new/\", BlogCreateView.as_view(), name=\"post_new\"),\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nWe have seen this URL, views, and template pattern before. To build our\nview, we'll import the general class CreateView at the top and then subclass it\nto make a new view called BlogCreateView.\nNow in the views.py file, update the code to be the following:\nfrom django.views.generic import ListView, DetailView\nfrom django.views.generic.edit import CreateView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nclass BlogCreateView(CreateView):\nmodel = Post\ntemplate_name = \"post_new.html\"\nfields = [\"title\", \"author\", \"body\"]\nThe BlogCreateView class is where we define the Post database model, name\nour template post new.html, and establish the visibility of the title, author,\nand body fields in the underlying Post database table.\nThe final action is to make a template in the text editor and name it\npost_new.html. Then, add the following code to your file:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>New post</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<input type=\"submit\" value=\"Save\">\n</form>\n{% endblock content %}\nLet’s break it down:\nIn the first line, we must inherit features from our base template.\nWe are using an HTML form, so the <form> tags with the POST\nmethod are essential because we are sending. If it was to receive, like\na search box, for example, instead of POST, we would use GET.\nAdd a {% csrf_token %} from Django provides to protect our form\nfrom bots.\nWe use {{ form.as_p }} to render the specified fields within\nparagraph <p> tags.\nLastly, set the value \"Save\" for a submit type input.\nLaunch the server with python manage.py runserver and navigate to the\nhomepage to check at http://127.0.0.1:8000/.\nClick the \"+ New Blog Post\" option to add a new blog post. If you click it,\nyou'll be taken to a new page at http://127.0.0.1:8000/post/new/.\nTry your hand at writing a new blog entry and publishing it by selecting\n\"Save\" from the file menu.\nWhen it's done, it'll take you to a post-specific detail page at\nhttp://127.0.0.1:8000/post/3/.\nLet Anyone Edit The Blog\nDeveloping an edit form for blog entries should follow a similar pattern. To\ngenerate the necessary template, url, and view, we'll again leverage a built-in\nDjango class-based generic view, UpdateView.\nTo begin, on each blog page there should be a link to post detail.html where\nthe post can be edited. The following is the update:\n{% extends \"base.html\" %}\n{% block content %}\n<div class=\"post-entry\">\n<h2>{{ post.title }}</h2>\n<p>{{ post.body }}</p>\n</div>\n<a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a>\n{% endblock content %}\nWe use <a href>...</a> and {% url ... %} tag to add the link. Within the tags,\nwe specified the name of the new url, which we will call post_edit, and we\nalso passed the needed argument, which is the primary key of the post.pk.\nNow, let us create a template file for the new edit page. Call it post_edit.html\nand add the following code:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>Edit post</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<input type=\"submit\" value=\"Update\">\n</form>\n{% endblock content %}\nFor the view. Open the views.py file and import UpdateView on the second-\nfrom-the-top line and then subclass it in the new view BlogUpdateView.\nHere is the updated code:\nfrom django.views.generic import ListView, DetailView\nfrom django.views.generic.edit import CreateView, UpdateView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nclass BlogCreateView(CreateView):\nmodel = Post\ntemplate_name = \"post_new.html\"\nfields = [\"title\", \"author\", \"body\"]\nclass BlogUpdateView(UpdateView):\nmodel = Post\ntemplate_name = \"post_edit.html\"\nfields = [\"title\", \"body\"]\nThe final action is to modify the file urls.py in the way described below. We\nrecommend placing the BlogUpdateView and the new route at the very top of\nthe old urlpatterns.\nfrom django.urls import path\nfrom .views import (\nBlogListView,\nBlogDetailView,\nBlogCreateView,\nBlogUpdateView,\n)\nurlpatterns = [\npath(\"post/new/\", BlogCreateView.as_view(), name=\"post_new\"),\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"post/<int:pk>/edit/\", BlogUpdateView.as_view(), name=\"post_edit\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nNow, if you click on a blog post, the Edit button will show like this:\nIf you click “+ Edit Blog Post,” it will redirect you to /post/3/edit/. You can\nedit anything.\nWhen we modify and click the \"Update\" button, we're taken to the post's\ndetail page, where we can see the update. This is due to our get_absolute_url\nconfiguration. If you go to the homepage now, you'll see the updated\ninformation alongside the rest of the posts.\nLet Users Delete Posts\nAs with the post-update form, the post-deletion form is created similarly.\nTo build the required view, url, and template, we'll employ another generic\nclass-based view, DeleteView.\nTo get started, go to post_detail.html to include a delete button on the page.\nUse the following code:\n{% extends \"base.html\" %}\n{% block content %}\n<div class=\"post-entry\">\n<h2>{{ post.title }}</h2>\n<p>{{ post.body }}</p>\n</div>\n<p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p>\n<p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p>\n{% endblock content %}\nMake a new template for our post delete page. A file with the following\ncontents will be created named post_delete.html:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>Delete post</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n<p>Are you sure you want to delete \"{{ post.title }}\"?</p>\n<input type=\"submit\" value=\"Confirm\">\n</form>\n{% endblock content %}\nIn this case, the title of our blog post is being shown via the post.title\nvariable. Since object.title is also a feature of DetailView, we could use that\ninstead.\nCreate a new view that extends DeleteView, then update the views.py file to\nimport DeleteView and reverse lazy at the beginning.\nfrom django.views.generic import ListView, DetailView\nfrom django.views.generic.edit import CreateView, UpdateView, DeleteView\nfrom django.urls import reverse_lazy\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nclass BlogCreateView(CreateView):\nmodel = Post\ntemplate_name = \"post_new.html\"\nfields = [\"title\", \"author\", \"body\"]\nclass BlogUpdateView(UpdateView):\nmodel = Post\ntemplate_name = \"post_edit.html\"\nfields = [\"title\", \"body\"]\nclass BlogDeleteView(DeleteView):\nmodel = Post\ntemplate_name = \"post_delete.html\"\nsuccess_url = reverse_lazy(\"home\")\nDeleteView takes three parameters: a Post model, a post delete.html template,\nand a success url property. Exactly what effect does this have? After deleting\na blog article, we want to send the user to the homepage.\nIn addition to CreateView, UpdateView also has redirects, but we did not\nneed to supply a success url because of this. Because if get absolute url() is\npresent on the model object, Django will utilize it by default. In addition, this\nattribute is only shown to those that take the time to study and memorize the\ndocumentation, namely the sections on model forms and success url.\nOr the likelihood of an error occurring and subsequent backtracking to\nresolve this Django-specific behavior is increased.\nIn this case, we use reverse_lazy rather than just reverse to delay the URL\nredirect's execution until after our view has completed removing the blog\narticle.\nFinal step: Make a URL by importing our view BlogDeleteView and\nappending a new pattern:\nfrom django.urls import path\nfrom .views import (\nBlogListView,\nBlogDetailView,\nBlogCreateView,\nBlogUpdateView,\nBlogDeleteView,\n)\nurlpatterns = [\npath(\"post/new/\", BlogCreateView.as_view(), name=\"post_new\"),\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"post/<int:pk>/edit/\", BlogUpdateView.as_view(), name=\"post_edit\"),\npath(\"post/<int:pk>/delete/\", BlogDeleteView.as_view(), name=\"post_delete\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nOnce you've restarted the server with the python manage.py runserver\ncommand, you can refresh any post page to reveal our \"Delete Blog Post\"\noption.\nThe new page will show if you click it, asking you to confirm.\nClick confirm, and the post is gone!\nTesting Program\nWe have added so many features. Let us test everything to see that they will\ncontinue to work as expected. We have new views for creating, updating, and\ndeleting posts. We will use three new tests:\ndef test_post_createview\ndef test_post_updateview\ndef test_post_deleteview\nThe updated script in your tests.py file will be as follows.\nfrom django.test import TestCase\n# Create your tests here.\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom .models import Post\nclass BlogTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.user = get_user_model().objects.create_user(\nusername=\"testuser\", email=\"test@email.com\", password=\"secret\"\n)\ncls.post = Post.objects.create(\ntitle=\"A good title\",\nbody=\"Nice body content\",\nauthor=cls.user,\n)\ndef test_post_model(self):\nself.assertEqual(self.post.title, \"A good title\")\nself.assertEqual(self.post.body, \"Nice body content\")\nself.assertEqual(self.post.author.username, \"testuser\")\nself.assertEqual(str(self.post), \"A good title\")\nself.assertEqual(self.post.get_absolute_url(), \"/post/1/\")\ndef test_url_exists_at_correct_location_listview(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_exists_at_correct_location_detailview(self):\nresponse = self.client.get(\"/post/1/\")\nself.assertEqual(response.status_code, 200)\ndef test_post_listview(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nself.assertContains(response, \"Nice body content\")\nself.assertTemplateUsed(response, \"home.html\")\ndef test_post_detailview(self):\nresponse = self.client.get(reverse(\"post_detail\", kwargs={\"pk\": self.post.pk}))\nno_response = self.client.get(\"/post/100000/\")\nself.assertEqual(response.status_code, 200)\nself.assertEqual(no_response.status_code, 404)\nself.assertContains(response, \"A good title\")\nself.assertTemplateUsed(response, \"post_detail.html\")\ndef test_post_createview(self):\nresponse = self.client.post(\nreverse(\"post_new\"),\n{\n\"title\": \"New title\",\n\"body\": \"New text\",\n\"author\": self.user.id,\n},\n)\nself.assertEqual(response.status_code, 302)\nself.assertEqual(Post.objects.last().title, \"New title\")\nself.assertEqual(Post.objects.last().body, \"New text\")\ndef test_post_updateview(self):\nresponse = self.client.post(\nreverse(\"post_edit\", args=\"1\"),\n{\n\"title\": \"Updated title\",\n\"body\": \"Updated text\",\n},\n)\nself.assertEqual(response.status_code, 302)\nself.assertEqual(Post.objects.last().title, \"Updated title\")\nself.assertEqual(Post.objects.last().body, \"Updated text\")\ndef test_post_deleteview(self):\nresponse = self.client.post(reverse(\"post_delete\", args=\"1\"))\nself.assertEqual(response.status_code, 302)\nFor test_post_createview, we make a fresh response and make sure it\ncorresponds to the last() object on our model, checking that the page has a\n302 redirect status code. The test_post_updateview function checks to\ndetermine if the initial post made in setUpTestData may be updated. Test\n_post_deleteview, the last newly added test, verifies that a 302 redirect is\nissued when a post is deleted.\nEven while we have some coverage for our new features, we know there is\nroom for improvement in terms of the number of tests we've run. Press\nControl+c to terminate the local web server, then proceed with the testing.\nEvery single one of them ought to be okay.\nWe've developed a Blog app with minimal code that supports adding, editing,\nand removing blog entries. CreateRead-Update-Delete (or CRUD for short)\ndescribes these fundamental actions. While there may be other ways to\naccomplish this same goal (such as using function-based views or custom\nclass-based views), we've shown how little code is required in Django to do\nthis.\nC 7- U A\nHAPTER SER CCOUNTS\nWe have a functional blog app with forms, but we lack a crucial component\nof most web apps: user authentication.\nProper user authentication is notoriously difficult to accomplish, and several\nsecurity gotchas are along the way. Django already has a robust\nauthentication system98 built in, which we can modify to meet our needs.\nDjango's default settings include the auth app, which provides us with a User\nobject that consists of the following fields: username, password, email, first\nname, and last name.\nWe'll use this User object to log in, log out, and sign up on our blog.\nUser Login Access\nDjango's LoginView offers us a ready-made login screen. There are only a\nfew things left to do, like updating our settings.py file and adding a URL\npattern for the auth system and a log in template.\nThe django project/urls.py file must be modified first. The accounts/ URL is\nwhere you may access the login and logout pages. This modification involves\nadding a single line to the text on the second-to-last line.\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"accounts/\", include(\"django.contrib.auth.urls\")),\npath(\"\", include(\"blog.urls\")),\n]\nBy default, Django looks for a log in form in a templates directory called\nregistration called login.html. Therefore, we must make a new folder named\n\"registration\" and place the necessary file within it. To end our local server,\nuse Control+c at the command prompt. The next step is to make the new\nfolder.\nmkdir templates/registration\nCreate a new template file in the new registration folder called login.html.\nThis is the code for the login.html file:\n{% extends \"base.html\" %}\n{% block content %}\n<h2>Log In</h2>\n<form method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<button type=\"submit\">Log In</button>\n</form>\n{% endblock content %}\nAfter a successful login, we must tell the system where to send the user. With\nthe LOGIN REDIRECT URL setting, we can do this. Just add the following\nat the end of the settings.py file in django_project:\nLOGIN_REDIRECT_URL = \"home\"\nNow the user is redirected to our homepage, 'home'. And at this moment, our\nwork is complete. Once you've restarted the Django server with python\nmanage.py runserver, you should be able to see our login page at\nhttp://127.0.0.1:8000/accounts/login/.\nAfter entering our superuser credentials, we were sent back to the main page.\nRemember that we didn't have to manually develop a database model or\nimplement any view logic because Django's authentication system already\ndid that for us.\nCalling the User’s Name on The HomePage\nIt would be a good idea to make a change to our base.html template that\nwould show a message to all visitors, whether they are signed in or not. The\nis_authenticated attribute can be used for this purpose.\nIt will do for now to simply make this code easy to find. We can give it a\nbetter look later on when we have more time. Modify the base.html file by\ninserting new code behind the </header> tag.\nThis is the updated base.html file:\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\">\n<link href=\"{% static 'css/base.css' %}\" rel=\"stylesheet\" s>\n</head>\n<body>\n<div>\n<header>\n<div class=\"nav-left\">\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</div>\n<div class=\"nav-right\">\n<a href=\"{% url 'post_new' %}\">+ New Blog Post</a>\n</div>\n</header>\n{% if user.is_authenticated %}\n<p>Hi {{ user.username }}!</p>\n{% else %}\n<p>You are not logged in.</p>\n<a href=\"{% url 'login' %}\">Log In</a>\n{% endif %}\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nThis code will say a user’s name and display Hello if they are logged in.\nOtherwise, it will be a link to our new login page.\nUser Log Out Access\nWe included logout template page logic, but how do we log out? We can do\nit manually in the Admin panel, but there's a better approach. Let's add a log\nout link that goes to the home page. With Django auth, this is easy.\nJust below our user greeting, add a % url 'logout' % link in our base.html file.\nThis is the updated script:\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\">\n<link href=\"{% static 'css/base.css' %}\" rel=\"stylesheet\" s>\n</head>\n<body>\n<div>\n<header>\n<div class=\"nav-left\">\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</div>\n<div class=\"nav-right\">\n<a href=\"{% url 'post_new' %}\">+ New Blog Post</a>\n</div>\n</header>\n{% if user.is_authenticated %}\n<p>Hi {{ user.username }}!</p>\n<p><a href=\"{% url 'logout' %}\">Log out</a></p>\n{% else %}\n<p>You are not logged in.</p>\n<a href=\"{% url 'login' %}\">Log In</a>\n{% endif %}\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nDjango auth app provides the essential view. We must indicate where to send\nlogged-out users.\nUpdate django project/settings.py with LOGOUT REDIRECT URL. We can\nadd it next to our login redirect, so the file should look like this:\nLOGOUT_REDIRECT_URL = \"home\"\nYou'll see a \"log out\" link if you refresh the homepage.\nGo ahead. Click it and see where it leads.\nAllow Users to Sign Up\nTo register new users, we need to create our own view. However, Django\nsupplies us with a form class called UserCreationForm to make this process\neasier. By default, it has three fields: username, password1, and password2.\nCode and URL structure can be organized in numerous ways for user\nauthentication. Stop the local server by pressing Ctrl + C, and make a new\napp called \"accounts\" for our sign-up page.\npython manage.py startapp accounts\nAdd the app to django_project under INSTALLED APPS in the settings.py\nfile.\nAdd a new URL path to this app in urls.py of the django project folder below\nthe built-in auth app.\npath(\"accounts/\", include(\"accounts.urls\")),\nDjango reads this script top-to-bottom. Thus url order matters. When we\nrequest /accounts/signup, Django first looks in auth, then accounts.\nCreate a urls.py file in the new accounts folder using your text editor. Fill it\nwith the following code:\nfrom django.urls import path\nfrom .views import SignUpView\nurlpatterns = [\npath(\"signup/\", SignUpView.as_view(), name=\"signup\"),\n]\nNow let’s create the view. The view implements UserCreationForm and\nCreateView. Go to accounts/views.py and fill in with the following code:\nWe subclass CreateView in SignUpView. We use signup.html's built-in\nUserCreationForm and uncreated template. After successful registration,\nreverse lazy redirects the user to the login page.\nWhy is reverse lazy used here rather than reverse? All generic class-based\nviews don't load URLs when the file is imported. Therefore we use reverse's\nlazy form to load them afterward.\nCreate signup.html in the templates/registration/ folder. Add the following\ncode.\n{% extends \"base.html\" %}\n{% block content %}\n<h2>Sign Up</h2>\n<form method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<button type=\"submit\">Sign Up</button>\n</form>\n{% endblock content %}\nThis format is familiar. We extend our base template at the top, add our logic\nbetween <form></form> tags, use the csrf token for security, and provide a\nsubmit button.\nFinished! To test it, run python manage.py runserver and visit\nhttp://127.0.0.1:8000/accounts/signup.\nLink to Sign Up\nAdd a signup link on the logged-out homepage. Our users can't know the\nexact URL. We may add the URL to our template. In accounts/urls.py, we\ngave it the name signup, so that's all we need to add to base.html with the url\ntemplate tag, exactly like our other links.\nAdd \"Sign Up\" underneath \"Log In\"\n<a href=\"{% url 'signup' %}\">Sign Up</a>\nLooks much better!\nGitHub\nWe haven't made a git commit in a while. Do that, then push our code to\nGitHub. First, check git status for new changes.\ngit status\ngit add -A\ngit commit -m \"forms and user accounts\"\nCreate a new repo on GitHub. I'll call it blog. After creating a new GitHub\nrepo, I can input the following commands. Replace macvicquayns with your\nGitHub username.\ngit remote add origin https://github.com/MacVicquayns/blog.git\ngit branch -M main\ngit push -u origin main\nStatic Files\nPreviously, we configured our static files by establishing a static folder,\ndirecting STATICFILES DIRS to it, and adding % load static % to our\nbase.html template. We need a few extra steps because Django won't support\nstatic files in production.\nFirst, use Django's collectstatic command to assemble all static files into a\ndeployable folder. Second, set the STATIC_ROOT setting to the staticfiles\nfolder. Third, set STATICFILES_STORAGE, collectstatic's file storage\nengine.\nHere's what the revised django project/settings.py file looks like:\nNow go to the command line and run python manage.py collectstatic:\nA new staticfiles folder containing an admin and a css folder has been added\nto your project folder. The admin is the static files from the default admin,\nand the css is our own. The collectstatic command must be executed before\neach new deployment in order to compile the files into the staticfiles folder\nthat is then utilized in production. To avoid overlooking it, this process is\ncommonly automated in larger projects, but that is outside the scope of our\ncurrent work.\nThere are a number of methods for delivering these precompiled static files in\nproduction, but we'll be using the WhiteNoise package, which is currently the\nmost popular option.\nTo begin, install the newest version with pip:\npython -m pip install whitenoise==5.3.0\nThen update django project/settings.py:\nAdd whitenoise above staticfiles in INSTALLED APPS\nAdd WhiteNoiseMiddleware to MIDDLEWARE.\nSwap WhiteNoise for STATICFILES STORAGE\nThe updated file should look like this:\nAfter all, these, rerun python manage.py collectstatic.\nThere will be a small warning. This will overwrite existing files! You sure?\nEnter \"yes\" WhiteNoise regenerates the static files in the same folder.\nStatic files are difficult for newbies, so here's a quick recap of our Blog site's\nstages. In Chapter 5, we built a top-level static folder for local development\nand changed STATICFILES DIRS. In this chapter, we added STATIC\nROOT and STATICFILES STORAGE parameters before running\ncollectstatic, which assembled all static files into a single staticfiles folder.\nInstalled whitenoise, updated INSTALLED APPS, MIDDLEWARE, and\nSTATICFILES STORAGE, then ran collectstatic.\nMost developers, like myself, have difficulties remembering these procedures\nand rely on notes.\nTime for Heroku\nHere we are, at the third attempt at using Heroku to launch a website. Set up\nGunicorn as your primary web server:\npython -m pip install gunicorn==20.1.0\nCreate a requirements.txt file to store the current virtual environment's\ncontents with this command.\npython -m pip freeze > requirements.txt\nIn django project/settings.py, update ALLOWED HOSTS.\nALLOWED_HOSTS = [\".herokuapp.com\", \"localhost\", \"127.0.0.1\"]\nAlso, make sure you have a manage.py file and a Procfile and runtime.txt file\nin the root folder of our project.\nPut this code in the Procfile:\nweb: gunicorn django_project.wsgi --log-file –\nPut your current version of Python in the runtime.txt file and save.\nNow, check the git status, and push everything to your GitHub. Run these\ncommands in this order:\ngit status\ngit add -A\ngit commit -m \"Heroku config\"\ngit push -u origin main\nDeploy to Heroku\nLog in to your Heroku account from the command line.\nheroku login\nHeroku will then create a new container where our application will reside\nonce the create command has been executed. If you don't specify a name and\njust run heroku create, Heroku will come up with one for you at random;\nhowever, you are free to choose your own name, provided it is unique on\nHeroku. You can't use the name d12-blog because I've already used it. You\nmust use a different alphabetic and numeric sequence.\nheroku create d12-blog\nThe prior apps did not have static file configurations. Thus we used heroku\nconfig:set DISABLE COLLECTSTATIC=1 to prevent Heroku from running\nthe Django collectstatic command automatically. But now that we have static\nfiles set up, we can relax and let this happen automatically during\ndeployment.\nAdding a web process to Heroku and pushing our code there will get the\ndyno up and running.\ngit push heroku main\nheroku ps:scale web=1\nYour new app's URL can be found in the terminal output or by typing\n\"heroku open.\"\nPostgreSQL vs SQLite\nWe have been using Django's preconfigured SQLite database on our local\nmachines and in production so far in this book. It's far simpler to set up and\nuse than a server-based database. Although it's convenient, there is a price to\npay for it. Because Heroku uses a transient file system, any modifications\nmade to the cloud-based db.sqlite3 file are lost anytime a new deployment or\nserver restart takes place. On the free tier that we are now using, the servers\nmay be rebooted as frequently as once every 24 hours.\nThis ensures that any changes made to the database in a development\nenvironment may be replicated in a production environment with a simple\npush. However, new blog posts or changes you make to the live website\nwon't last forever.\nThanks to some spare code, our Blog site now has sign up, log in, and log out\ncapabilities.\nSeveral potential security issues can arise when developing a custom user\nauthentication method, but Django has already dealt with them. We deployed\nour site to Heroku with the static files set up correctly for production. Well\ndone!\nC\nONCLUSION\nThe completion of this fantastic Django course is a cause for celebration. We\nbegan with nothing and have already completed five separate web apps from\nscratch using all of the primary capabilities of Django, including templates,\nviews, urls, users, models, security, testing, and deployment. You should now\nfeel confident creating your own cutting-edge websites with Django.\nPutting what you've learned into practice is essential if you want to become\nproficient at it. Our Blog and Newspaper sites share a feature known as\nCRUD (Create-Read-Update-Delete) with a wide variety of other web apps.\nCan you, for instance, develop a web-based to-do list? Will you create an app\nsimilar to Twitter or Facebook? You don't need anything else because you\nalready have it all. The ideal way to learn the ropes is to construct many\nsimple projects and gradually increase their complexity as you gain\nexperience and knowledge.\nFollow-Up Actions\nThere is a lot more to learn about Django than what we covered in this book.\nThis is crucial if you plan on creating massive websites with hundreds of\nthousands or even millions of monthly visitors. There's no need to look\nfurther than Django itself for this. Django for Professionals is a follow-up\nbook I wrote that covers topics like using Docker, installing a production\ndatabase locally like PostgreSQL, registering advanced users, securing the\nsite, optimizing performance, and much more.\nWhen building mobile apps (iOS/Android) or websites with a dedicated\nJavaScript front-end framework like Vue, React, or Angular, Django is often\nutilized as the back-end API. Django REST Framework181, a third-party\nprogram that is tightly integrated with Django itself, makes it possible to\nconvert any preexisting Django website into an API with no additional\ncoding. If you're interested in reading more, I've devoted a complete book to\nthe subject, entitled Django for APIs.\nThird-party bundles\nAs we’ve seen in this book, 3rd party packages are an essential element of the\nDjango ecosystem, especially regarding deployment or enhancements\nsurrounding user registration. It’s not uncommon for a professional Django\nwebsite to rely on dozens of such packages.\nCaution: don't install 3rd party packages only to save a little time now. Any\nadditional packages increase the chances that their maintainer won't fix all\nbugs or upgrade to the newest version of Django. Learn its uses.\nDjango Packages is a complete database of all available third-party apps if\nyou're interested in viewing additional packages.",
  "segments": [
    {
      "text": "Python\nFlask & Django\nFull Stack Python for Web\nDevelopment\nwww.emenwa.com\nContents\nContents\nIntroduction To Full Stack Python Web Development\nFull-stack development with Python\nBack-end development using Python\nDjango\nFlask\nFront-end development using Python\nWhat is Django Used For?",
      "sentence_number": 1,
      "word_count": 39
    },
    {
      "text": "Part 1 Flask\nChapter 1 – Learning the Strings\nThe PEP Talk\nPEP 8: Style Guide for Python Code\nPEP 257: Docstring Conventions\nRelative imports\nApplication Directory\nInstalling Python\nInstalling Python\nInstall Pip\nChapter 2 – Virtual Environments\nUse virtualenv to manage your environment\nInstall virtualenvwrapper\nMake a Virtual Environment\nInstalling Python Packages\nChapter 3 – Project Organisation\nPatterns of organization\nInitialization\nBlueprints\nChapter 4 – Routing & Configuration\nView decorators\nConfiguration\nInstance folder\nHow to use instance folders\nSecret keys\nConfiguring based on environment variables\nVariable Rule\nChapter 5 – Build A Simple App\nThe actual app\nDevelopment Web Server\nChapter 6 - Dynamic Routes\nConverter\nChapter 7 – Static Templates\nRendering HTML Templates\nA String\nrender_template() function\nFile Structure Strategies\nModule File Structure\nPackage File Structure\nChapter 8 - The Jinja2 Template Engine\nVariables\nFilters\nControl structure\nConditions\nloop\nChapter 9 - Bootstrap Integration with Flask\nWhat is Bootstrap?",
      "sentence_number": 2,
      "word_count": 151
    },
    {
      "text": "Getting Started\nCode Flask App with Bootstrap\nCreate a Real Flask Website\nGetting Bootsrap\nWeb App\nPage redirect\nTemplate inheritance\nWhat is Template Inheritance\nAdding Bootstrap\nNav bar From Bootstrap\nChapter 10 – HTTP Methods (GET/POST) & Retrieving Form Data\nGET\nPOST\nWeb Forms\nLogin page template\nBack-End\nBootstrap forms\nChapter 11 – Sessions vs.",
      "sentence_number": 3,
      "word_count": 55
    },
    {
      "text": "Cookies\nSessions\nSessions or Cookies?",
      "sentence_number": 4,
      "word_count": 5
    },
    {
      "text": "How to set up a Session\nSession Data\nSession Duration\nChapter 12 – Message Flashing\nflash() Function\nDisplaying Flash Message\nDisplaying More Than 1 Message\nChapter 13 – SQL Alchemy Set up & Models\nCreating A Simple Profile Page\nDatabase Management with Flask-SQL Alchemy\nHow to use database\nModels\nChapter 14 - CRUD\nThe Flask Book Store\nYour static web page with Flask\nHandling user input in our web application\nTemplates\nBack-end\nAdd a database\nFront-end\nInitializing\nRetrieving books from our database\nUpdating book titles\nDeleting books from our database\nChapter 15 – Deployment\nWeb Hosting\nAmazon Web Services EC2\nHeroku\nDigital Ocean\nRequirements for deployment\nGunicorn\nDeploy!",
      "sentence_number": 5,
      "word_count": 108
    },
    {
      "text": "Set up Git\nPush your Site\nPart 2 Django\nChapter 1 - Installing to Get Started\nIntroducing the Command Line\nShell Commands\nVirtual Environments\nInstalling Django\nSetup your Virtual Environment for Django on macOS/Linux\nInstalling Pipenv Globally\nYour First Blank Django Project\nIntroducing Text Editors\nSetting Up Django on VS Code\nLastly, Git\nChapter 2 - Create Your First Django Project\nSetup\nHTTP Request/Response Cycle\nModel-View-Controller (MVC) and Model-View-Template (MVT)\nCreating A Blank App\nDesigning Pages\nUsing Git\nChapter 3 - Django App With Pages\nSetup\nAdding Templates\nClass and Views\nOur URLs\nAbout Page\nExtending Templates\nTesting\nWebsite Production\nHeroku\nLet’s Deploy\nChapter 4 - Create Your First Database-Driven App And Use The Django\nAdmin\nInitial Setup\nLet’s Create a Database Model\nActivate the models\nDjango Admin\nViews/Templates/URLs\nLet’s Add New Posts\nTests\nStoring to GitHub\nSetup Heroku\nDeploy to Heroku\nChapter 5 – Blog App\nInitial Set Up\nDatabase Models\nAdmin Access\nURLs\nViews\nTemplates\nAdd some Style!",
      "sentence_number": 6,
      "word_count": 160
    },
    {
      "text": "Individual Blog Pages\nTesting\nGit\nChapter 6 – Django Web Forms\nCreateView\nLet Anyone Edit The Blog\nLet Users Delete Posts\nTesting Program\nChapter 7- User Accounts\nUser Login Access\nCalling the User’s Name on The HomePage\nUser Log Out Access\nAllow Users to Sign Up\nLink to Sign Up\nGitHub\nStatic Files\nTime for Heroku\nDeploy to Heroku\nPostgreSQL vs SQLite\nConclusion\nFollow-Up Actions\nThird-party bundles\nI T F S P W\nNTRODUCTION O ULL TACK YTHON EB\nD\nEVELOPMENT\nFull stack developers are hard to find these days!",
      "sentence_number": 7,
      "word_count": 90
    },
    {
      "text": "You are among a tiny\npercentage that will stand out as a professional web developer.",
      "sentence_number": 8,
      "word_count": 15
    },
    {
      "text": "As technology advances, the technological world undergoes rapid change.",
      "sentence_number": 9,
      "word_count": 9
    },
    {
      "text": "The days when a developer can easily keep a job with only one programming\nlanguage for years without picking up new skills are long gone.",
      "sentence_number": 10,
      "word_count": 25
    },
    {
      "text": "Many of us\nenter the world of programming and web development knowing only one or\ntwo technologies, like Java, C++, or JavaScript, but that is no longer enough.",
      "sentence_number": 11,
      "word_count": 28
    },
    {
      "text": "Before now, web developers used to work in groups on specialized projects,\nsuch as front-end development carried out by a different team of\nprogrammers and back-end development written by a different team of\nprogrammers, also referred to as server-side developers.",
      "sentence_number": 12,
      "word_count": 40
    },
    {
      "text": "Nowadays, everyone is looking for full-stack developers, someone who is\nknowledgeable in both front-end and back-end technology and can work\nindependently to develop a fully functional web application.",
      "sentence_number": 13,
      "word_count": 28
    },
    {
      "text": "Two ways that people can use a computer to make websites are Django and\nFlask.",
      "sentence_number": 14,
      "word_count": 15
    },
    {
      "text": "Web developers use two different programs to create sites and web\napps.",
      "sentence_number": 15,
      "word_count": 12
    },
    {
      "text": "These two programs are called frameworks, and they help people make\nfun, cool sites that look nice and run fast.",
      "sentence_number": 16,
      "word_count": 20
    },
    {
      "text": "Django is one of the top\nframeworks because it is open source and works well.",
      "sentence_number": 17,
      "word_count": 15
    },
    {
      "text": "But you must learn\nabout web apps to build different web pages and website templates.",
      "sentence_number": 18,
      "word_count": 15
    },
    {
      "text": "You will\nneed to create different apps from scratch to develop a single web app.",
      "sentence_number": 19,
      "word_count": 15
    },
    {
      "text": "The\nsecond way, Flask, is simpler and easier.",
      "sentence_number": 20,
      "word_count": 8
    },
    {
      "text": "Flask is a newer framework that is easier to learn for building simple web\napps.",
      "sentence_number": 21,
      "word_count": 15
    },
    {
      "text": "That is a lovely place to start learning web development.",
      "sentence_number": 22,
      "word_count": 10
    },
    {
      "text": "That is why you should be happy that you are on this journey to learn how to\nbuild websites and web apps with Flask and Django.",
      "sentence_number": 23,
      "word_count": 26
    },
    {
      "text": "Two in one!",
      "sentence_number": 24,
      "word_count": 3
    },
    {
      "text": "Learning a framework that complements your primary area of expertise is\npreferable.",
      "sentence_number": 25,
      "word_count": 12
    },
    {
      "text": "For example, a Python developer would learn more from Django\nand Flask than from Angular.",
      "sentence_number": 26,
      "word_count": 15
    },
    {
      "text": "Similarly, a JavaScript developer would learn\nReact and Node JS better than Django and Node JS.",
      "sentence_number": 27,
      "word_count": 16
    },
    {
      "text": "This book is only for\ndevelopers who are familiar with Python programming language.",
      "sentence_number": 28,
      "word_count": 13
    },
    {
      "text": "Full-stack development with Python\nThe Python programming language has many advantages, one of which is a\nrelatively quick development cycle.",
      "sentence_number": 29,
      "word_count": 20
    },
    {
      "text": "The career opportunities that Python as a\nfull-stack engineer may open up for you, however, may be its best feature.",
      "sentence_number": 30,
      "word_count": 20
    },
    {
      "text": "Full-stack and back-end Python engineers are still needed.",
      "sentence_number": 31,
      "word_count": 8
    },
    {
      "text": "Python is\nfrequently used in data science and machine learning, so as a full-stack\nengineer, you can add these to your repertoire of back-end skills.",
      "sentence_number": 32,
      "word_count": 25
    },
    {
      "text": "Back-end development using Python\nFlask, Django, Turbogears, CherryPy, Pyramid, Bottle, and Falcon are just a\nfew Python back-end frameworks.",
      "sentence_number": 33,
      "word_count": 19
    },
    {
      "text": "However, we'll talk about Django and\nFlask, the two most widely used frameworks.",
      "sentence_number": 34,
      "word_count": 13
    },
    {
      "text": "Django\nThe developer community for the free and open-source project Django is\nsizable.",
      "sentence_number": 35,
      "word_count": 13
    },
    {
      "text": "As a result, its security, user, and role management, as well as\ndatabase migration management feature, frequently improve.",
      "sentence_number": 36,
      "word_count": 18
    },
    {
      "text": "Additionally,\nRESTful Web APIs are fully supported by the REST framework in Django.",
      "sentence_number": 37,
      "word_count": 13
    },
    {
      "text": "Flask\nAnother well-liked Python web framework is Flask.",
      "sentence_number": 38,
      "word_count": 8
    },
    {
      "text": "It's referred to as a\nmicro-framework and is lighter than Django.",
      "sentence_number": 39,
      "word_count": 11
    },
    {
      "text": "The back end of APIs is\nfrequently developed using Flask.",
      "sentence_number": 40,
      "word_count": 10
    },
    {
      "text": "The Flask community has lots of pluggable\nfeatures available.",
      "sentence_number": 41,
      "word_count": 9
    },
    {
      "text": "Front-end development using Python\nPython front-end development is still in its infancy in comparison to back-\nend development.",
      "sentence_number": 42,
      "word_count": 18
    },
    {
      "text": "Because of this, the front-end typically uses HTML,\nJavaScript, and CSS.",
      "sentence_number": 43,
      "word_count": 11
    },
    {
      "text": "In this course, you will learn how to implement\nBootstrap with Django and Flask to create a beautiful front-end interface.",
      "sentence_number": 44,
      "word_count": 20
    },
    {
      "text": "The first part of this book focuses on the Flask framework, and the latter part\ndiscusses Django.",
      "sentence_number": 45,
      "word_count": 17
    },
    {
      "text": "We hope you find it interesting.",
      "sentence_number": 46,
      "word_count": 6
    },
    {
      "text": "Typically, it should not take you more than a few weeks at most to learn\nFlask and start to develop apps.",
      "sentence_number": 47,
      "word_count": 21
    },
    {
      "text": "However, that depends on your other\ncommitments and reasons for learning.",
      "sentence_number": 48,
      "word_count": 11
    },
    {
      "text": "This book is divided into short chapters, which are isolated lessons.",
      "sentence_number": 49,
      "word_count": 11
    },
    {
      "text": "Many\nteachers would write their books and tutorials as a long lesson where they\ncreate an example app and update it throughout the book to demonstrate\nconcepts and tasks.",
      "sentence_number": 50,
      "word_count": 29
    },
    {
      "text": "That is not the case here.",
      "sentence_number": 51,
      "word_count": 6
    },
    {
      "text": "In this book, we include\nexamples in each lesson to illustrate the concepts, but we have examples from\nother chapters that may not even be related to the previous.",
      "sentence_number": 52,
      "word_count": 29
    },
    {
      "text": "Hence, the book\nis not meant to be combined into one large project.",
      "sentence_number": 53,
      "word_count": 13
    },
    {
      "text": "This book will help you learn Flask by building a series of projects and\nshowing you verifiable screenshots so that you can use the skills to create\ndifferent projects with Flask.",
      "sentence_number": 54,
      "word_count": 31
    },
    {
      "text": "Please, as you read this book, I recommend\nopening your computer and implementing the codes as we go.",
      "sentence_number": 55,
      "word_count": 18
    },
    {
      "text": "The lessons in\nthis book will help you create a web application on your own.",
      "sentence_number": 56,
      "word_count": 15
    },
    {
      "text": "The second part of this book is for Django.",
      "sentence_number": 57,
      "word_count": 9
    },
    {
      "text": "Django is exciting if you are\ninterested in building websites.",
      "sentence_number": 58,
      "word_count": 10
    },
    {
      "text": "Django is a framework for making websites.",
      "sentence_number": 59,
      "word_count": 7
    },
    {
      "text": "It saves you a lot of time and makes building websites easier and more fun.",
      "sentence_number": 60,
      "word_count": 15
    },
    {
      "text": "Django makes it easy to build and maintain high-quality web applications.",
      "sentence_number": 61,
      "word_count": 11
    },
    {
      "text": "Web development is a creative journey, fun-filled and full of adventure, with\nenough stress to last a day!",
      "sentence_number": 62,
      "word_count": 18
    },
    {
      "text": "Django lets you focus on your web application's\nfun and critical parts while making the tedious parts easier.",
      "sentence_number": 63,
      "word_count": 18
    },
    {
      "text": "In other words, it\nmakes it easier to create common programming tasks and abstract common\nweb development patterns.",
      "sentence_number": 64,
      "word_count": 18
    },
    {
      "text": "It also gives clear rules for how to solve\nproblems.",
      "sentence_number": 65,
      "word_count": 10
    },
    {
      "text": "It does all these things and allows you to work outside the\nframework's scope when needed.",
      "sentence_number": 66,
      "word_count": 16
    },
    {
      "text": "My goal with this book is to help you learn\nand master Django.",
      "sentence_number": 67,
      "word_count": 13
    },
    {
      "text": "I want you to go as far as you possibly want to go in and\nunderstand the Django web framework.",
      "sentence_number": 68,
      "word_count": 20
    },
    {
      "text": "What is Django Used For?",
      "sentence_number": 69,
      "word_count": 5
    },
    {
      "text": "Django's ORM layer is powerful.",
      "sentence_number": 70,
      "word_count": 5
    },
    {
      "text": "It speeds up development by streamlining\ndata and database management.",
      "sentence_number": 71,
      "word_count": 10
    },
    {
      "text": "Without ORM, web developers would have\nto form tabular displays and explain operations or queries, resulting in a large\namount of SQL that is difficult to track.",
      "sentence_number": 72,
      "word_count": 27
    },
    {
      "text": "Its models are all in one file, unlike other web frameworks.",
      "sentence_number": 73,
      "word_count": 11
    },
    {
      "text": "In larger projects,\nmodels.py may be slow.",
      "sentence_number": 74,
      "word_count": 7
    },
    {
      "text": "Django supports multiple databases.",
      "sentence_number": 75,
      "word_count": 4
    },
    {
      "text": "SQLite can be used for development and testing without additional software.",
      "sentence_number": 76,
      "word_count": 11
    },
    {
      "text": "Production databases are PostgreSQL or MYSQL.",
      "sentence_number": 77,
      "word_count": 6
    },
    {
      "text": "For a NoSQL database, use MongoDB with Django.",
      "sentence_number": 78,
      "word_count": 8
    },
    {
      "text": "In this book, you will walk with me as we create really awesome web\ndevelopment projects, CRUD (wiki style) blogs, and so on.",
      "sentence_number": 79,
      "word_count": 23
    },
    {
      "text": "The best way to\nlearn is by doing.",
      "sentence_number": 80,
      "word_count": 8
    },
    {
      "text": "So, follow along on your computer as you read the steps\nand keep up with me.",
      "sentence_number": 81,
      "word_count": 16
    },
    {
      "text": "You don’t have to cram every step.",
      "sentence_number": 82,
      "word_count": 7
    },
    {
      "text": "You will always\nhave this book as a reference.",
      "sentence_number": 83,
      "word_count": 9
    },
    {
      "text": "Follow me.",
      "sentence_number": 84,
      "word_count": 2
    },
    {
      "text": "P 1 F\nART LASK\nC 1 – L S\nHAPTER EARNING THE TRINGS\nAssuming that you are an intelligent programmer, you must identify and use\nspecific terms and conventions that guide the format of Python codes.",
      "sentence_number": 85,
      "word_count": 37
    },
    {
      "text": "You\nmight even know some of these conventions.",
      "sentence_number": 86,
      "word_count": 8
    },
    {
      "text": "This chapter discusses them.",
      "sentence_number": 87,
      "word_count": 4
    },
    {
      "text": "It\nwill be brief.",
      "sentence_number": 88,
      "word_count": 4
    },
    {
      "text": "The PEP Talk\nA PEP is an abbreviation for \"Python Enhancement Proposal.\" Python.org\nindexes and hosts these proposals.",
      "sentence_number": 89,
      "word_count": 18
    },
    {
      "text": "PEPs are classified into several categories\nin the index, including meta-PEPs, which are more informative than\ntechnical.",
      "sentence_number": 90,
      "word_count": 17
    },
    {
      "text": "On the other hand, technical PEPs analyze enhancements to\nPython's internals.",
      "sentence_number": 91,
      "word_count": 11
    },
    {
      "text": "PEPs such as PEP 8 and PEP 257 guide how we write our code.",
      "sentence_number": 92,
      "word_count": 14
    },
    {
      "text": "Guidelines\nfor coding style are included in PEP 8.",
      "sentence_number": 93,
      "word_count": 9
    },
    {
      "text": "PEP 257 specifies procedures for\ndocstrings, the widely used method of documenting code.",
      "sentence_number": 94,
      "word_count": 13
    },
    {
      "text": "PEP 8: Style Guide for Python Code\nPython code should follow PEP 8 as the coding style.",
      "sentence_number": 95,
      "word_count": 17
    },
    {
      "text": "This is like a format for\nwriting Python programs.",
      "sentence_number": 96,
      "word_count": 9
    },
    {
      "text": "You can read about it if you want.",
      "sentence_number": 97,
      "word_count": 8
    },
    {
      "text": "When your code grows to multiple files with hundreds or thousands of lines\nof code, PEP 8 style will make it much more readable.",
      "sentence_number": 98,
      "word_count": 24
    },
    {
      "text": "Furthermore, if your\nproject will be open source, potential contributors will likely expect and feel\nat ease working with code written with PEP 8 in mind.",
      "sentence_number": 99,
      "word_count": 26
    },
    {
      "text": "One crucial suggestion is to use four spaces per indentation level.",
      "sentence_number": 100,
      "word_count": 11
    },
    {
      "text": "Not tabs.",
      "sentence_number": 101,
      "word_count": 2
    },
    {
      "text": "If\nyou violate this convention, switching between projects will be difficult for\nyou and other developers.",
      "sentence_number": 102,
      "word_count": 16
    },
    {
      "text": "Inconsistency like this is annoying in any\nlanguage.",
      "sentence_number": 103,
      "word_count": 8
    },
    {
      "text": "Because that indented space is vital in Python, switching between\ntabs and spaces could result in errors that are difficult to debug.",
      "sentence_number": 104,
      "word_count": 22
    },
    {
      "text": "PEP 257: Docstring Conventions\nAnother Python standard is covered by PEP 257, and it is called docstrings.",
      "sentence_number": 105,
      "word_count": 17
    },
    {
      "text": "A docstring is a string literal that appears as the first statement in the\ndefinition of a module, function, class, or method.",
      "sentence_number": 106,
      "word_count": 22
    },
    {
      "text": "A docstring of this type\nbecomes the object's __doc__ unique attribute.",
      "sentence_number": 107,
      "word_count": 11
    },
    {
      "text": "Relative imports\nWhen developing Flask apps, relative imports make things a little easier.",
      "sentence_number": 108,
      "word_count": 13
    },
    {
      "text": "The\nidea is straightforward.",
      "sentence_number": 109,
      "word_count": 4
    },
    {
      "text": "For example, if you are developing an app and need to import User model\nfrom myapp/models.py module.",
      "sentence_number": 110,
      "word_count": 17
    },
    {
      "text": "You might use the app's package name, such\nas myapp.models.",
      "sentence_number": 111,
      "word_count": 10
    },
    {
      "text": "This would indicate the location of the target module\nrelative to the source using relative imports.",
      "sentence_number": 112,
      "word_count": 16
    },
    {
      "text": "We use a dot notation instead of\na slash, with the first dot representing the current directory and each\nsubsequent dot representing the following parent directory.",
      "sentence_number": 113,
      "word_count": 26
    },
    {
      "text": "# myapp/views.py\n# An absolute import gives us the User model\nfrom myapp.models import User\n# A relative import does the same thing\nfrom .models import User\nThis method makes the package much more modular, which is a good thing.",
      "sentence_number": 114,
      "word_count": 40
    },
    {
      "text": "Now you can change the name of your package and use modules from other\nprojects without changing the import statements.",
      "sentence_number": 115,
      "word_count": 20
    },
    {
      "text": "In summary, what will help you advance in your development journey is to\nfollow the style used in this book,\nfollow the coding style shown in PEP 8,\nuse docstrings defined in PEP 257 to document your app,\nimport internal modules with relative imports.",
      "sentence_number": 116,
      "word_count": 44
    },
    {
      "text": "Application Directory\nI assume you are new to Flask, but you can use Python.",
      "sentence_number": 117,
      "word_count": 14
    },
    {
      "text": "Otherwise, I highly\nrecommend starting your journey by learning Python basics.",
      "sentence_number": 118,
      "word_count": 11
    },
    {
      "text": "Anyway, open your Python text editor or IDE and let us start.",
      "sentence_number": 119,
      "word_count": 12
    },
    {
      "text": "The first task is\nto create a folder where your project will sit.",
      "sentence_number": 120,
      "word_count": 13
    },
    {
      "text": "I use Visual Studio Code.",
      "sentence_number": 121,
      "word_count": 5
    },
    {
      "text": "Open the Terminal, and type in the following code:\nmkdir microblog\nThat will create the folder.",
      "sentence_number": 122,
      "word_count": 16
    },
    {
      "text": "Now cd into your new folder with cd microblog.",
      "sentence_number": 123,
      "word_count": 9
    },
    {
      "text": "Installing Python\nInstall Python if you don't already have it on your computer.",
      "sentence_number": 124,
      "word_count": 13
    },
    {
      "text": "It is possible to\ndownload an installer for Python from the official website if your operating\nsystem does not include a package.",
      "sentence_number": 125,
      "word_count": 22
    },
    {
      "text": "Please keep in mind that if you're using\nWSL or Cygwin on Windows, you won't be able to use the Windows native\nPython; instead, you'll need to download a Unix-friendly version from\nUbuntu or Cygwin, depending on your choice.",
      "sentence_number": 126,
      "word_count": 39
    },
    {
      "text": "Installing Python\nFirst, go to Python’s official website and download the software.",
      "sentence_number": 127,
      "word_count": 12
    },
    {
      "text": "It is pretty\nstraightforward.",
      "sentence_number": 128,
      "word_count": 4
    },
    {
      "text": "Now, after downloading, run the program.",
      "sentence_number": 129,
      "word_count": 6
    },
    {
      "text": "When installing, click on Customise, and you can check these boxes.",
      "sentence_number": 130,
      "word_count": 11
    },
    {
      "text": "Most\nsignificantly, pip and py launcher.",
      "sentence_number": 131,
      "word_count": 6
    },
    {
      "text": "You may leave out the “for all users” if the\ncomputer is not yours.",
      "sentence_number": 132,
      "word_count": 14
    },
    {
      "text": "Click on next.",
      "sentence_number": 133,
      "word_count": 3
    },
    {
      "text": "Check Add Python to environment variables,” and install.",
      "sentence_number": 134,
      "word_count": 8
    },
    {
      "text": "Install Pip\nPip is a Python package manager that will be used to add modules and\nlibraries to our environments.",
      "sentence_number": 135,
      "word_count": 20
    },
    {
      "text": "To see if Pip is installed, open a command prompt by pressing Win+R, typing\n\"cmd,\" and pressing Enter.",
      "sentence_number": 136,
      "word_count": 18
    },
    {
      "text": "Then type \"pip help.\"\nYou should see a list of commands, including one called \"install,\" which we'll\nuse in the next step:\nIt's time for Flask to be installed, but first, I'd like to talk about the best\npractices for installing Python packages.",
      "sentence_number": 137,
      "word_count": 43
    },
    {
      "text": "Flask, for example, is a Python package available in a public repository and\ncan be downloaded and installed by anyone.",
      "sentence_number": 138,
      "word_count": 20
    },
    {
      "text": "PyPI (Python Package Index) is\nthe name of the official Python package repository (some people also refer to\nthis repository as the \"cheese shop\").",
      "sentence_number": 139,
      "word_count": 24
    },
    {
      "text": "A tool called pip makes it easy to install\na package from the PyPI repository.",
      "sentence_number": 140,
      "word_count": 15
    },
    {
      "text": "You can use pip to install a program on your computer as follows:\npip install <package-name>\nUnfortunately, this method of installing packages does not work in\nmany cases.",
      "sentence_number": 141,
      "word_count": 28
    },
    {
      "text": "To run the command above, you'll need to be an administrator on\nyour computer, which means you'll need to be logged in as an administrator.",
      "sentence_number": 142,
      "word_count": 25
    },
    {
      "text": "Even if you don't have to deal with that, think about what happens when you\ndo the installation described above.",
      "sentence_number": 143,
      "word_count": 20
    },
    {
      "text": "The package will be downloaded from\nPyPI and added to your Python installation using the pip command-line tool.",
      "sentence_number": 144,
      "word_count": 18
    },
    {
      "text": "After that, all your Python scripts can access the package you just installed.",
      "sentence_number": 145,
      "word_count": 13
    },
    {
      "text": "Suppose you've finished a web application using Flask version 1.1, which\nwas the most current version of Flask when you started but has since been\nreplaced by Flask version 2.0.",
      "sentence_number": 146,
      "word_count": 30
    },
    {
      "text": "You'd like to use the 2.0 version for a second\napplication, but if you replace the 1.1 version you already have installed, you\ncould end up causing problems for your older application.",
      "sentence_number": 147,
      "word_count": 32
    },
    {
      "text": "Do you see what\nI'm getting at?",
      "sentence_number": 148,
      "word_count": 7
    },
    {
      "text": "It would be ideal if Flask 1.1 and Flask 2.0 could coexist on\nthe same computer.",
      "sentence_number": 149,
      "word_count": 16
    },
    {
      "text": "Flask 1.1 will work as a backend for your older\napplication, and the newer app will have the current version at the time.",
      "sentence_number": 150,
      "word_count": 23
    },
    {
      "text": "Python uses virtual environments to deal with the issue of maintaining\nvarious versions of packages for various applications.",
      "sentence_number": 151,
      "word_count": 18
    },
    {
      "text": "That is what we will\ndiscuss in the next chapter.",
      "sentence_number": 152,
      "word_count": 10
    },
    {
      "text": "C 2 – V E\nHAPTER IRTUAL NVIRONMENTS\nYou can install more software now that the application directory has been\nconfigured.",
      "sentence_number": 153,
      "word_count": 21
    },
    {
      "text": "For your app to function correctly, you will require various\nsoftware.",
      "sentence_number": 154,
      "word_count": 11
    },
    {
      "text": "You must first have at least the Flask package, and the Python\ninstalled.",
      "sentence_number": 155,
      "word_count": 13
    },
    {
      "text": "If not, you might be reading the incorrect book.",
      "sentence_number": 156,
      "word_count": 9
    },
    {
      "text": "The environment\nfor your program is everything that must be accessible for it to run.",
      "sentence_number": 157,
      "word_count": 15
    },
    {
      "text": "There are\nnumerous things we can do to set up and maintain the environment for our\napp.",
      "sentence_number": 158,
      "word_count": 17
    },
    {
      "text": "This chapter is focused on that.",
      "sentence_number": 159,
      "word_count": 6
    },
    {
      "text": "When installing packages privately without impacting the Python interpreter\nthat is already installed on your system, you can do so in a virtual\nenvironment, which is a duplicate of the Python interpreter.",
      "sentence_number": 160,
      "word_count": 32
    },
    {
      "text": "Virtual environments are highly useful because they prevent the system's\nPython interpreter from becoming clogged with mismatched packages and\nversions.",
      "sentence_number": 161,
      "word_count": 20
    },
    {
      "text": "You may make sure that applications only have access to the\npackages they require by setting up a virtual environment for each project.",
      "sentence_number": 162,
      "word_count": 23
    },
    {
      "text": "This allows you to create more virtual environments and keeps the global\ninterpreter clean.",
      "sentence_number": 163,
      "word_count": 14
    },
    {
      "text": "Additionally, since virtual environments may be created and\noperated without administrator privileges, they are superior to the system-\nwide Python interpreter.",
      "sentence_number": 164,
      "word_count": 21
    },
    {
      "text": "Use virtualenv to manage your environment\nvirtualenv is a program that isolates whatever application you are developing\nin a virtual environment.",
      "sentence_number": 165,
      "word_count": 21
    },
    {
      "text": "A virtual environment implies that all the software\nyour program depends on is stored in a single folder.",
      "sentence_number": 166,
      "word_count": 18
    },
    {
      "text": "This means that the\nsoftware is only usable by your application.",
      "sentence_number": 167,
      "word_count": 11
    },
    {
      "text": "The Python interpreter is a type of virtual environment (a copy).",
      "sentence_number": 168,
      "word_count": 11
    },
    {
      "text": "Installing\npackages in a virtual environment has no impact on the Python interpreter\nused by the entire system.",
      "sentence_number": 169,
      "word_count": 18
    },
    {
      "text": "Only the copy is.",
      "sentence_number": 170,
      "word_count": 4
    },
    {
      "text": "As a result, creating a separate\nvirtual machine just for each application is the best way to ensure you can\ninstall any version of your packages.",
      "sentence_number": 171,
      "word_count": 26
    },
    {
      "text": "Additionally, virtual environments do\nnot require an administrator account because they are owned by the user who\ncreates them.",
      "sentence_number": 172,
      "word_count": 19
    },
    {
      "text": "Instead of using system-wide or user-wide package directories, we can\ndownload them to a separate, dedicated folder for our application.",
      "sentence_number": 173,
      "word_count": 20
    },
    {
      "text": "For each\nproject, we can choose the version of Python we want to use and which\ndependencies we want to have available.",
      "sentence_number": 174,
      "word_count": 22
    },
    {
      "text": "It's possible to switch between various versions of the same package with\nVirtualenv.",
      "sentence_number": 175,
      "word_count": 13
    },
    {
      "text": "This kind of scalability can be crucial when working on an older\nsystem with multiple projects requiring different software versions.",
      "sentence_number": 176,
      "word_count": 20
    },
    {
      "text": "As a result of using virtualenv, you'll be limited to a small number of Python\npackages on your machine.",
      "sentence_number": 177,
      "word_count": 19
    },
    {
      "text": "Virtualenv will be one of these.",
      "sentence_number": 178,
      "word_count": 6
    },
    {
      "text": "Pip may be used\nto install virtualenv.",
      "sentence_number": 179,
      "word_count": 7
    },
    {
      "text": "Virtual environments can be created as soon as virtualenv is installed on your\ncomputer.",
      "sentence_number": 180,
      "word_count": 14
    },
    {
      "text": "Run the virtualenv command in your project's directory to get\nstarted.",
      "sentence_number": 181,
      "word_count": 11
    },
    {
      "text": "The virtual environment's destination directory is the only parameter\nrequired.",
      "sentence_number": 182,
      "word_count": 10
    },
    {
      "text": "pip install virtualenv\nNow that we've installed virtualenv, we can make different environments to\ntest our code.",
      "sentence_number": 183,
      "word_count": 17
    },
    {
      "text": "But it can be hard to keep track of all of these places.",
      "sentence_number": 184,
      "word_count": 13
    },
    {
      "text": "So we'll\npip install another package that will help us.",
      "sentence_number": 185,
      "word_count": 10
    },
    {
      "text": "Install virtualenvwrapper\nvirtualenvwrapper is a package that lets you control the virtual environments\nthat virtualenv makes.",
      "sentence_number": 186,
      "word_count": 16
    },
    {
      "text": "Use the following line to install the virtual wrapper for\nour Flask projects.",
      "sentence_number": 187,
      "word_count": 13
    },
    {
      "text": "pip install virtualenvwrapper-win\nMake a Virtual Environment\nThe structure of the command that makes a virtual environment looks like\nthis:\npython -m venv virtual-environment-name\nThe -m venv suggestion launches the venv package from the source file as a\nstandalone script with the name given as an argument.",
      "sentence_number": 188,
      "word_count": 47
    },
    {
      "text": "Inside the microblog directory, you will now make a virtual environment.",
      "sentence_number": 189,
      "word_count": 11
    },
    {
      "text": "Most people call virtual environments \"venv,\" but you can call them\nsomething else if you'd like.",
      "sentence_number": 190,
      "word_count": 16
    },
    {
      "text": "Make sure that microblog is your current\ndirectory, and then run this command:\npython3 -m venv venv\n(you can use any name different from venv)\nAfter the command is done, you'll have a subdirectory called venv (or, like\nmine, blog inside the microblog folder.",
      "sentence_number": 191,
      "word_count": 44
    },
    {
      "text": "This subdirectory will have a brand-\nnew virtual environment with a Python interpreter for this project only.",
      "sentence_number": 192,
      "word_count": 17
    },
    {
      "text": "Now, activate the virtual environment by using the following line:\nblog\\Scripts\\activate\nOnce done with activating the virtual environment, You’ll see “(blog)” next\nto the command prompt.",
      "sentence_number": 193,
      "word_count": 26
    },
    {
      "text": "The line has made a folder with python.exe, pip, and\nsetuptools already installed and ready to go.",
      "sentence_number": 194,
      "word_count": 17
    },
    {
      "text": "It will also turn on the Virtual\nEnvironment, as shown by the (blog).",
      "sentence_number": 195,
      "word_count": 13
    },
    {
      "text": "The PATH environment variable is updated to include the newly enabled\nvirtual environment when you activate it.",
      "sentence_number": 196,
      "word_count": 17
    },
    {
      "text": "A path to an executable file can be\nspecified in this variable.",
      "sentence_number": 197,
      "word_count": 12
    },
    {
      "text": "When you run the activation command, the name of\nthe virtual environment will be appended to the command prompt as a visual\ncue that the environment is now active.",
      "sentence_number": 198,
      "word_count": 29
    },
    {
      "text": "After a virtual environment has been activated, the virtual environment will\nbe used whenever python is typed at the command prompt.",
      "sentence_number": 199,
      "word_count": 21
    },
    {
      "text": "Multiple\ncommand prompt windows necessitate individual activation of the virtual\nenvironment.",
      "sentence_number": 200,
      "word_count": 11
    },
    {
      "text": "Installing Python Packages\nAll virtual environments have the pip package manager, which is used to\ninstall Python packages.",
      "sentence_number": 201,
      "word_count": 18
    },
    {
      "text": "Similar to the python command, entering pip at a\ncommand prompt will launch the version of this program that is a part of the\nactive virtual environment.",
      "sentence_number": 202,
      "word_count": 27
    },
    {
      "text": "Make sure the virtual environment is active before running the following\ncommand in order to install Flask into it:\npip install flask\nWhen you run this prompt, pip will install Flask, and every software Flask\nneeds to work.",
      "sentence_number": 203,
      "word_count": 38
    },
    {
      "text": "You can check the packages installed in your virtual\nenvironment using pip freeze.",
      "sentence_number": 204,
      "word_count": 13
    },
    {
      "text": "Type the following command:\nType deactivate at the command prompt to return your Terminal's PATH\nenvironment variable and the command prompt to their default states once\nyou've finished working in the virtual environment.",
      "sentence_number": 205,
      "word_count": 33
    },
    {
      "text": "Each installed package's version number is shown in the output of pip freeze.",
      "sentence_number": 206,
      "word_count": 13
    },
    {
      "text": "Most likely, the version numbers you get will be different from those shown\nhere.",
      "sentence_number": 207,
      "word_count": 14
    },
    {
      "text": "You can also make sure Flask was installed correctly by starting Python and\ntrying to import it:\nIf there\nare no errors, you can give yourself a pat on the back.",
      "sentence_number": 208,
      "word_count": 31
    },
    {
      "text": "You are ready to move\non to the next level.",
      "sentence_number": 209,
      "word_count": 10
    },
    {
      "text": "C 3 – P O\nHAPTER ROJECT RGANISATION\nFlask doesn't help you to organize your app files.",
      "sentence_number": 210,
      "word_count": 17
    },
    {
      "text": "All of your application's\ncode should be contained in a single folder, or it could be distributed among\nnumerous packages.",
      "sentence_number": 211,
      "word_count": 20
    },
    {
      "text": "You may streamline developing and deploying software\nby following a few organizational patterns.",
      "sentence_number": 212,
      "word_count": 13
    },
    {
      "text": "We'll use different words in this chapter, so let's look at some of them.",
      "sentence_number": 213,
      "word_count": 14
    },
    {
      "text": "Repository - This is the folder for your program on the server.",
      "sentence_number": 214,
      "word_count": 12
    },
    {
      "text": "Version\ncontrol systems are typically used to refer to this word.",
      "sentence_number": 215,
      "word_count": 11
    },
    {
      "text": "Package: This is a Python library that holds the code for your application.",
      "sentence_number": 216,
      "word_count": 13
    },
    {
      "text": "Creating a package for your project will be covered in greater detail later in\nthis chapter, so just know that it is a subdirectory of your repository.",
      "sentence_number": 217,
      "word_count": 27
    },
    {
      "text": "Module: A module is one Python file that other Python files can import.",
      "sentence_number": 218,
      "word_count": 13
    },
    {
      "text": "A\npackage is nothing more than a collection of related modules.",
      "sentence_number": 219,
      "word_count": 11
    },
    {
      "text": "Patterns of organization\nMost Flask examples will have all the code in a single file, usually called\napp.py.",
      "sentence_number": 220,
      "word_count": 18
    },
    {
      "text": "This works well for small projects with a limited number of routes\nand fewer than a few hundred lines of application code, such as those used\nfor tutorials.",
      "sentence_number": 221,
      "word_count": 28
    },
    {
      "text": "When you're working on a project that's a little more complicated, a single\nmodule can get cluttered.",
      "sentence_number": 222,
      "word_count": 17
    },
    {
      "text": "Classes for models and forms must be defined, and\nthey will be mixed in with the script for your routes and configuration.",
      "sentence_number": 223,
      "word_count": 22
    },
    {
      "text": "All of\nthis can slow down progress.",
      "sentence_number": 224,
      "word_count": 7
    },
    {
      "text": "To solve this problem, we can separate the\ndifferent parts of our app into a set of modules that work together.",
      "sentence_number": 225,
      "word_count": 21
    },
    {
      "text": "This is\ncalled a package.",
      "sentence_number": 226,
      "word_count": 5
    },
    {
      "text": "This listing's structure lets you group the different parts of your application in\na way that makes sense.",
      "sentence_number": 227,
      "word_count": 18
    },
    {
      "text": "Model class definitions are grouped together in\nmodels.",
      "sentence_number": 228,
      "word_count": 8
    },
    {
      "text": "The definitions of routes and forms are in views.py.",
      "sentence_number": 229,
      "word_count": 9
    },
    {
      "text": "and forms.py,\nrespectively (we have a whole chapter for forms later).",
      "sentence_number": 230,
      "word_count": 11
    },
    {
      "text": "This table gives a breakdown of the parts included in the majority of Flask\nprojects.",
      "sentence_number": 231,
      "word_count": 15
    },
    {
      "text": "You will likely have many additional files in your repository, typical\nof Flask apps.",
      "sentence_number": 232,
      "word_count": 14
    },
    {
      "text": "This file is executed to launch a\ndevelopment server.",
      "sentence_number": 233,
      "word_count": 9
    },
    {
      "text": "It obtains a copy\nof the application from the package\nrun.py\nand runs it.",
      "sentence_number": 234,
      "word_count": 14
    },
    {
      "text": "This will not be used in\nproduction but is heavily utilized\nthroughout the development phase.",
      "sentence_number": 235,
      "word_count": 15
    },
    {
      "text": "This file lists all Python packages on\nwhich your application depends.",
      "sentence_number": 236,
      "word_count": 11
    },
    {
      "text": "You\nrequirements.txt can have different files for\ndevelopment and production\ndependencies.",
      "sentence_number": 237,
      "word_count": 11
    },
    {
      "text": "This file contains most of the\nconfig.py variables your project needs for\nconfiguration.",
      "sentence_number": 238,
      "word_count": 13
    },
    {
      "text": "This file includes configuration\nvariables that should not be tracked\nby version control.",
      "sentence_number": 239,
      "word_count": 13
    },
    {
      "text": "This includes API\nkeys and database URIs with\nembedded passwords.",
      "sentence_number": 240,
      "word_count": 10
    },
    {
      "text": "Additionally,\nthis contains variables unique to this\n/instance/config.py instance of your program.",
      "sentence_number": 241,
      "word_count": 12
    },
    {
      "text": "For\nexample, you may have DEBUG =\nFalse in config.py but DEBUG =\nTrue in instance/config.py on your\nlocal development system.",
      "sentence_number": 242,
      "word_count": 21
    },
    {
      "text": "Because\nthis file will be read after config.py,\nDEBUG = True.",
      "sentence_number": 243,
      "word_count": 11
    },
    {
      "text": "This is the package that contains your\n/yourapp/\napplication.",
      "sentence_number": 244,
      "word_count": 9
    },
    {
      "text": "This file initializes your application\n/yourapp/__init__.py and assembles its diverse\ncomponents.",
      "sentence_number": 245,
      "word_count": 11
    },
    {
      "text": "This is where route definitions are\nmade.",
      "sentence_number": 246,
      "word_count": 7
    },
    {
      "text": "It may be separated into its\n/yourapp/views.py package (yourapp/views/), with\nrelated views organized into\nmodules.",
      "sentence_number": 247,
      "word_count": 15
    },
    {
      "text": "This is where you define the\napplication's models.",
      "sentence_number": 248,
      "word_count": 8
    },
    {
      "text": "Similar to\n/yourapp/models.py\nviews.py, this may be separated into\nmany modules.py.",
      "sentence_number": 249,
      "word_count": 11
    },
    {
      "text": "This directory contains the public\nCSS, JavaScript, images and other\n/yourapp/static/ files you want to make public via\nyour app.",
      "sentence_number": 250,
      "word_count": 20
    },
    {
      "text": "It is accessible from\nyourapp.com/static/ by default.",
      "sentence_number": 251,
      "word_count": 7
    },
    {
      "text": "This is where you’ll put the Jinja2\n/yourapp/templates/ templates for your app.",
      "sentence_number": 252,
      "word_count": 12
    },
    {
      "text": "Initialization\nAll Flask applications need to create an application instance.",
      "sentence_number": 253,
      "word_count": 10
    },
    {
      "text": "Using a protocol\ncalled WSGI, pronounced \"wiz-ghee\", the web server sends all requests from\nclients to this object so that it can handle them.",
      "sentence_number": 254,
      "word_count": 24
    },
    {
      "text": "The application instance is an\nobject of the class Flask.",
      "sentence_number": 255,
      "word_count": 10
    },
    {
      "text": "Objects of this class are usually made in this way:\nfrom flask import Flask\napp = Flask(__name__)\nThe only thing that has to be given to the Flask class constructor is the name\nof the application's main module or package.",
      "sentence_number": 256,
      "word_count": 40
    },
    {
      "text": "Most of the time, the __name__\nvariable in Python is the correct answer for this argument.",
      "sentence_number": 257,
      "word_count": 16
    },
    {
      "text": "New Flask developers often get confused by the __name__ argument passed\nto the application constructor.",
      "sentence_number": 258,
      "word_count": 15
    },
    {
      "text": "Flask uses this argument to figure out where\nthe application is, which lets it find other files that make up the application,\nlike images and templates.",
      "sentence_number": 259,
      "word_count": 26
    },
    {
      "text": "Blueprints\nAt some time, you may discover that there are numerous interconnected\nroutes.",
      "sentence_number": 260,
      "word_count": 13
    },
    {
      "text": "If you're like me, your initial inclination will be to divide opinions.",
      "sentence_number": 261,
      "word_count": 12
    },
    {
      "text": "Py\ninto a package and organize the views as modules.",
      "sentence_number": 262,
      "word_count": 10
    },
    {
      "text": "It may be time at this\nstage to incorporate your application into blueprints.",
      "sentence_number": 263,
      "word_count": 13
    },
    {
      "text": "Blueprints are essentially self-contained definitions of your application's\ncomponents.",
      "sentence_number": 264,
      "word_count": 9
    },
    {
      "text": "They function as apps within your app.",
      "sentence_number": 265,
      "word_count": 7
    },
    {
      "text": "The admin panel, front-\nend, and user dashboard may each have their own blueprint.",
      "sentence_number": 266,
      "word_count": 14
    },
    {
      "text": "This allows you\nto group views, static files, and templates by component while allowing these\ncomponents to share models, forms, and other features of your application.",
      "sentence_number": 267,
      "word_count": 26
    },
    {
      "text": "Soon, we will discuss how to organize your application using Blueprints.",
      "sentence_number": 268,
      "word_count": 11
    },
    {
      "text": "C 4 – R & C\nHAPTER OUTING ONFIGURATION\nWeb applications that run on web browsers send requests to the web server to\nthe Flask application instance.",
      "sentence_number": 269,
      "word_count": 27
    },
    {
      "text": "For each URL request, the Flask application\ninstance needs to know the code to execute, so it keeps a map of URLs to\nPython functions.",
      "sentence_number": 270,
      "word_count": 25
    },
    {
      "text": "A route is a link between a URL and the function that calls\nit.",
      "sentence_number": 271,
      "word_count": 14
    },
    {
      "text": "Modern web frameworks employ routing to aid users in remembering\napplication URLs.",
      "sentence_number": 272,
      "word_count": 12
    },
    {
      "text": "It is useful to be able to browse directly to the required\npage without first visiting the homepage.",
      "sentence_number": 273,
      "word_count": 18
    },
    {
      "text": "The Python programming language has them built in.",
      "sentence_number": 274,
      "word_count": 8
    },
    {
      "text": "Decorators are often\nused to sign up functions as handler functions that will be called when certain\nevents happen.",
      "sentence_number": 275,
      "word_count": 19
    },
    {
      "text": "The app.route decorator made available by the application instance is the\neasiest way to define a route in a Flask application.",
      "sentence_number": 276,
      "word_count": 21
    },
    {
      "text": "This decorator is used to\ndeclare a route in the following way:\n@app.route(\"/\")\ndef index():\nreturn \"<h1>Hello World!</h1>\"\nIn the previous example, the handler for the application's root URL is set to\nbe the function index().",
      "sentence_number": 277,
      "word_count": 36
    },
    {
      "text": "Flask prefers to register view functions with the app.",
      "sentence_number": 278,
      "word_count": 9
    },
    {
      "text": "route decorator.",
      "sentence_number": 279,
      "word_count": 2
    },
    {
      "text": "However, the app.add_url_rule() method is a more traditional\nway to set up the application routes.",
      "sentence_number": 280,
      "word_count": 15
    },
    {
      "text": "It takes three arguments: the URL, the\nendpoint name, and the view function.",
      "sentence_number": 281,
      "word_count": 13
    },
    {
      "text": "Using the app.add_url_rule(), the\nfollowing example registers an index() function that is the same as the one\nshown above:\ndef index():\nreturn \"<h1>Hello World!</h1>\"\napp.add_url_rule(\"/\", \"index\", index)\nSimilar to index(), view functions manage application URLs.",
      "sentence_number": 282,
      "word_count": 35
    },
    {
      "text": "Going to\nhttp://www.example.com/ in your browser would cause the server to run\nindex if the app runs on a server with the domain name www.example.com\n().",
      "sentence_number": 283,
      "word_count": 26
    },
    {
      "text": "This view function's return value is the response the client receives.",
      "sentence_number": 284,
      "word_count": 11
    },
    {
      "text": "This\nanswer is the page displayed to the user in the browser window if the client is\na web browser.",
      "sentence_number": 285,
      "word_count": 20
    },
    {
      "text": "As we'll see later, a response from a view function could be\nas straightforward as an HTML string, or it might be more intricate.",
      "sentence_number": 286,
      "word_count": 24
    },
    {
      "text": "You'll notice that many of the URLs for services you use on a daily basis\nhave sections that can be modified if you pay attention to how they are\nconstructed.",
      "sentence_number": 287,
      "word_count": 30
    },
    {
      "text": "For instance, https://www.facebook.com/your-name> is the URL\nfor your Facebook profile page.",
      "sentence_number": 288,
      "word_count": 11
    },
    {
      "text": "Your username is a part of this, making it\nparticular to you.",
      "sentence_number": 289,
      "word_count": 12
    },
    {
      "text": "Flask can handle these URLs using a special app.route\ndecorator.",
      "sentence_number": 290,
      "word_count": 10
    },
    {
      "text": "The steps to configure a route with an active portion are as\nfollows:\n@app.route(\"/user/<name>\")\ndef user(name):\nreturn \"<h1>Hello, {}!</h1>\".format(name)\nThe portion of a URL for a route that is enclosed in angle brackets changes.",
      "sentence_number": 291,
      "word_count": 34
    },
    {
      "text": "Any URLs that match the static portions will be mapped to this route, and the\nactive part will be supplied as an argument when the view function is called.",
      "sentence_number": 292,
      "word_count": 29
    },
    {
      "text": "In the preceding illustration, a personalized greeting was provided in\nresponse using the name argument.",
      "sentence_number": 293,
      "word_count": 15
    },
    {
      "text": "The active components of routes can be of other kinds in addition to strings,\nwhich are their default.",
      "sentence_number": 294,
      "word_count": 18
    },
    {
      "text": "If the id dynamic segment has an integer, for\nexample, the route /user/int:id> would only match URLs like /user/123.",
      "sentence_number": 295,
      "word_count": 19
    },
    {
      "text": "Routes of the types string, int, float, and path are all supported by Flask.",
      "sentence_number": 296,
      "word_count": 14
    },
    {
      "text": "The\npath type is a string type that can contain forward slashes, making it distinct\nfrom other string types.",
      "sentence_number": 297,
      "word_count": 19
    },
    {
      "text": "URL routing is used to link a specific function (with web page content) to its\ncorresponding web page URL.",
      "sentence_number": 298,
      "word_count": 19
    },
    {
      "text": "When an endpoint is reached, the web page will display the message, which\nis the output of the function associated with the URL endpoint via the route.",
      "sentence_number": 299,
      "word_count": 27
    },
    {
      "text": "View decorators\nDecorators in Python are functions used to tweak other functions.",
      "sentence_number": 300,
      "word_count": 12
    },
    {
      "text": "When a\nfunction that has been decorated is called, the decorator is instead invoked.",
      "sentence_number": 301,
      "word_count": 14
    },
    {
      "text": "The decorator may then perform an action, modify the parameters, pause\nexecution, or call the original function.",
      "sentence_number": 302,
      "word_count": 17
    },
    {
      "text": "You can use decorators to encapsulate\nviews with code to be executed before their execution.",
      "sentence_number": 303,
      "word_count": 15
    },
    {
      "text": "Configuration\nWhen learning Flask, configuration appears straightforward.",
      "sentence_number": 304,
      "word_count": 7
    },
    {
      "text": "Simply define\nsome variables in config.py, and everything will function properly.",
      "sentence_number": 305,
      "word_count": 11
    },
    {
      "text": "This\nsimplicity begins to diminish while managing settings for a production\napplication.",
      "sentence_number": 306,
      "word_count": 12
    },
    {
      "text": "You might need to secure private API keys or utilize different\nsetups for various environments.",
      "sentence_number": 307,
      "word_count": 15
    },
    {
      "text": "For example, you need a different\nenvironment for production.",
      "sentence_number": 308,
      "word_count": 9
    },
    {
      "text": "This chapter will cover advanced Flask capabilities that make configuration\nmanagement easier.",
      "sentence_number": 309,
      "word_count": 12
    },
    {
      "text": "A basic application might not require these complex features.",
      "sentence_number": 310,
      "word_count": 9
    },
    {
      "text": "It may be\njust enough to place config.py at the repository's root and load it in app.py or\nyourapp/__init__.py.",
      "sentence_number": 311,
      "word_count": 19
    },
    {
      "text": "Each line of the config.py file should contain a variable assignment.",
      "sentence_number": 312,
      "word_count": 11
    },
    {
      "text": "The\nvariables in config.py are used to configure Flask and its extensions, which\nare accessible via the app.config dictionary — for example,\napp.config[\"DEBUG\"].",
      "sentence_number": 313,
      "word_count": 23
    },
    {
      "text": "DEBUG = True # Turns on debugging features in Flask\nBCRYPT_LOG_ROUNDS = 12 # Configuration for the Flask-Bcrypt extension\nMAIL_FROM_EMAIL = \"abby@example.com\" # For use in application emails\nFlask, extensions, and you may utilize configuration variables.",
      "sentence_number": 314,
      "word_count": 36
    },
    {
      "text": "In this\nexample, we may use an app.config[\"MAIL_FROM_EMAIL\"] to specify the\ndefault \"from\" address for transactional emails, such as password resets.",
      "sentence_number": 315,
      "word_count": 21
    },
    {
      "text": "Putting this information into a configuration variable makes future\nmodifications simple.",
      "sentence_number": 316,
      "word_count": 11
    },
    {
      "text": "Instance folder\nOccasionally, you may be required to define configuration variables\ncontaining sensitive information.",
      "sentence_number": 317,
      "word_count": 14
    },
    {
      "text": "These variables will need to be separated\nfrom those in config.py and kept outside of the repository.",
      "sentence_number": 318,
      "word_count": 17
    },
    {
      "text": "You may hide\nsecrets such as database passwords and API credentials or setting machine-\nspecific variables.",
      "sentence_number": 319,
      "word_count": 16
    },
    {
      "text": "To facilitate this, Flask provides us with the instance folder\nfunctionality.",
      "sentence_number": 320,
      "word_count": 11
    },
    {
      "text": "The instance folder is a subdirectory of the repository's root\ndirectory and contains an application-specific configuration file.",
      "sentence_number": 321,
      "word_count": 17
    },
    {
      "text": "We do not\nwish to add it under version control.",
      "sentence_number": 322,
      "word_count": 10
    },
    {
      "text": "How to use instance folders\nIf you want to load configuration variables from an instance folder, you can\nuse the function app.config.from_pyfile().",
      "sentence_number": 323,
      "word_count": 22
    },
    {
      "text": "First, set the\ninstance_relative_config = True when creating your app with the Flask()\nfunction.",
      "sentence_number": 324,
      "word_count": 14
    },
    {
      "text": "The app.config.from_pyfile() will load the file from the instance/\nfolder.",
      "sentence_number": 325,
      "word_count": 10
    },
    {
      "text": "# app.py or app/__init__.py\napp = Flask(__name__, instance_relative_config=True)\napp.config.from_object(\"config\")\napp.config.from_pyfile(\"config.py\")\nNow, instance/config.py can contain variable definitions identical to those in\nconfig.py.",
      "sentence_number": 326,
      "word_count": 21
    },
    {
      "text": "Additionally, you should add the instance folder to the ignore list\nof your version control system.",
      "sentence_number": 327,
      "word_count": 16
    },
    {
      "text": "To accomplish this with Git, add instance/ to\na new line in.gitignore.",
      "sentence_number": 328,
      "word_count": 12
    },
    {
      "text": "Secret keys\nThe instance folder's private nature makes it an ideal location for establishing\nkeys that should not be exposed to version control.",
      "sentence_number": 329,
      "word_count": 23
    },
    {
      "text": "These may include your\napplication's private or third-party API keys.",
      "sentence_number": 330,
      "word_count": 10
    },
    {
      "text": "This is particularly crucial if\nyour program is open source or maybe in the future.",
      "sentence_number": 331,
      "word_count": 15
    },
    {
      "text": "We generally prefer that\nother users and contributors use their own keys.",
      "sentence_number": 332,
      "word_count": 12
    },
    {
      "text": "# instance/config.py\nSECRET_KEY = \"Sm9obiBTY2hyb20ga2lja3MgYXNz\"\nSTRIPE_API_KEY = \"SmFjb2IgS2FwbGFuLU1vc3MgaXMgYSBoZXJv\"\nSQLALCHEMY_DATABASE_URI = (\n\"postgresql://user:TWljaGHFgiBCYXJ0b3N6a2lld2ljeiEh@localhost/databasename\"\n)\nConfiguring based on environment variables\nDon’t add the instance folder under version control.",
      "sentence_number": 333,
      "word_count": 26
    },
    {
      "text": "This means you cannot\ntrace configuration changes to the config setup in your instance.",
      "sentence_number": 334,
      "word_count": 14
    },
    {
      "text": "If you have\none or two variables, this may be overlooked.",
      "sentence_number": 335,
      "word_count": 11
    },
    {
      "text": "Still, you don't want to risk\nlosing precisely calibrated setups for different environments (production,\nstaging, development, etc.).",
      "sentence_number": 336,
      "word_count": 17
    },
    {
      "text": "Upon load, Flask gives us the option to choose a configuration file based on\nthe value of an environment variable.",
      "sentence_number": 337,
      "word_count": 20
    },
    {
      "text": "As a result, we can store different\nconfiguration files in our repository and load the appropriate ones as needed.",
      "sentence_number": 338,
      "word_count": 19
    },
    {
      "text": "Once a large number of configuration files have been produced, we can move\nthem into the appropriate configuration directory.",
      "sentence_number": 339,
      "word_count": 19
    },
    {
      "text": "We'll take advantage of the app.config.from envvar() function to figure out\nwhich configuration file to import.",
      "sentence_number": 340,
      "word_count": 16
    },
    {
      "text": "# yourapp/__init__.py\napp = Flask(__name__, instance_relative_config=True)\n# Load the default configuration\napp.config.from_object(\"config.default\")\n# Load the configuration from the instance folder\napp.config.from_pyfile(\"config.py\")\n# Load the file specified by the APP_CONFIG_FILE environment variable\n# Variables defined here will override those in the default configuration\napp.config.from_envvar(\"APP_CONFIG_FILE\")\nVariable Rule\nApp routing is the process of mapping a certain URL to the function designed\nto complete a given action.",
      "sentence_number": 341,
      "word_count": 64
    },
    {
      "text": "The most recent Web frameworks employ routing\nto aid users in remembering application URLs.",
      "sentence_number": 342,
      "word_count": 14
    },
    {
      "text": "To hard-code each URL while creating an application is pretty inconvenient.",
      "sentence_number": 343,
      "word_count": 11
    },
    {
      "text": "Creating dynamic URLs is a better way to handle this problem.",
      "sentence_number": 344,
      "word_count": 11
    },
    {
      "text": "Using variable elements in the rule parameter allows you to create URLs on\nthe fly.",
      "sentence_number": 345,
      "word_count": 15
    },
    {
      "text": "Variable-name> is the name of this variable component.",
      "sentence_number": 346,
      "word_count": 8
    },
    {
      "text": "It is passed\nas a parameter to the function that corresponds to the rule.",
      "sentence_number": 347,
      "word_count": 14
    },
    {
      "text": "Let's examine the idea of variable rules in great detail.",
      "sentence_number": 348,
      "word_count": 10
    },
    {
      "text": "Dynamic URLs can be created with the use of variable rules.",
      "sentence_number": 349,
      "word_count": 11
    },
    {
      "text": "They are\nessentially the variable sections added to a URL using the variable name> or\nconverter: variable name> tags.",
      "sentence_number": 350,
      "word_count": 19
    },
    {
      "text": "It is passed as a parameter to the function that\ncorresponds to the rule.",
      "sentence_number": 351,
      "word_count": 14
    },
    {
      "text": "Syntax:\n@app.route('hello/<variable_name>')\nOR\n@app.route('hello/<converter: variable_name>')\nC 5 – B A S A\nHAPTER UILD IMPLE PP\nYou've understood the various parts and configurations of a Flask web\napplication in the previous sections.",
      "sentence_number": 352,
      "word_count": 32
    },
    {
      "text": "Now it's time to write your first one.",
      "sentence_number": 353,
      "word_count": 8
    },
    {
      "text": "In\nthe example below, the application script defines an application instance, a\nsingle route, and a single view function, as we've already said.",
      "sentence_number": 354,
      "word_count": 23
    },
    {
      "text": "I'll be using Visual Studio Code, which has installed the Python extension.",
      "sentence_number": 355,
      "word_count": 12
    },
    {
      "text": "The first step is to create a project folder.",
      "sentence_number": 356,
      "word_count": 9
    },
    {
      "text": "Mine is firstapp.",
      "sentence_number": 357,
      "word_count": 3
    },
    {
      "text": "Name yours\nwhatever.",
      "sentence_number": 358,
      "word_count": 3
    },
    {
      "text": "After you have cd that folder, create a virtual environment.",
      "sentence_number": 359,
      "word_count": 10
    },
    {
      "text": "I will name mine\nenvi.",
      "sentence_number": 360,
      "word_count": 5
    },
    {
      "text": "python -m venv envi\nNow, type code in the Terminal, and run.",
      "sentence_number": 361,
      "word_count": 12
    },
    {
      "text": "Visual Studio Code will open in a\nnew window.",
      "sentence_number": 362,
      "word_count": 9
    },
    {
      "text": "Now, open the app folder in the new window like this:\nNext, open the Command Palette.",
      "sentence_number": 363,
      "word_count": 16
    },
    {
      "text": "Go to View and click on Command Palette\n(or press Ctrl+Shift+P).",
      "sentence_number": 364,
      "word_count": 11
    },
    {
      "text": "Select Python: Select the Interpreter command.",
      "sentence_number": 365,
      "word_count": 6
    },
    {
      "text": "This means you want to see interpreters that are available to VS can locate.",
      "sentence_number": 366,
      "word_count": 14
    },
    {
      "text": "Here's mine.",
      "sentence_number": 367,
      "word_count": 2
    },
    {
      "text": "Go to the Command Pallete again and search Terminal.",
      "sentence_number": 368,
      "word_count": 9
    },
    {
      "text": "Click on Terminal:\nCreate New Terminal (SHIFT + CTRL + `)\nCan you see the name of your virtual environment at the bottom left corner?",
      "sentence_number": 369,
      "word_count": 25
    },
    {
      "text": "Mine has the \"envi\" as the name of my virtual environment.",
      "sentence_number": 370,
      "word_count": 11
    },
    {
      "text": "Now that the Virtual environment is active, install Flask in the virtual\nenvironment by running pip install flask in the Terminal.",
      "sentence_number": 371,
      "word_count": 21
    },
    {
      "text": "When you start a separate command prompt, run envi\\Scripts\\activate to\nactivate the environment.",
      "sentence_number": 372,
      "word_count": 13
    },
    {
      "text": "It should begin with (envi), indicating that it is\nengaged.",
      "sentence_number": 373,
      "word_count": 10
    },
    {
      "text": "The actual app\nNow, we will create a new file named app.py inside the firstapp folder.",
      "sentence_number": 374,
      "word_count": 16
    },
    {
      "text": "In app.py, we will add a code to import Flask and construct a Flask object\ninstance.",
      "sentence_number": 375,
      "word_count": 16
    },
    {
      "text": "This object will serve as the WSGI application.",
      "sentence_number": 376,
      "word_count": 8
    },
    {
      "text": "from flask import Flask\napp = Flask(__name__)\nWe will now call the new application object's run () function to run the main\napp.",
      "sentence_number": 377,
      "word_count": 23
    },
    {
      "text": "if __name__ == \"__main__\":\napp.run()\nWe develop a view function for our app to display something in the browser\nwindow.",
      "sentence_number": 378,
      "word_count": 20
    },
    {
      "text": "We will construct a method named hello() that returns \"Hello,\nWorld!",
      "sentence_number": 379,
      "word_count": 11
    },
    {
      "text": "def hello():\nreturn \"Hello World!\";\nNow, let us assign a URL route so that the new Flask app will know when to\ncall the hello() view function.",
      "sentence_number": 380,
      "word_count": 27
    },
    {
      "text": "We associate the URL route with each view\nfunction.",
      "sentence_number": 381,
      "word_count": 9
    },
    {
      "text": "This is done with the route() decorator in front of each view\nfunction like this.",
      "sentence_number": 382,
      "word_count": 15
    },
    {
      "text": "@app.route(\"/\")\ndef hello():\nreturn \"Hello World!\"\nThe complete app.py script is like this:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef hello():\nreturn \"Hello World!\"\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nDevelopment Web Server\nUsing the flask run command, you can start a development web server for\nFlask applications.",
      "sentence_number": 383,
      "word_count": 51
    },
    {
      "text": "This command looks in the FLASK_APP environment\nvariable for the name of the Python script that includes the application\ninstance.",
      "sentence_number": 384,
      "word_count": 20
    },
    {
      "text": "To run the app.py application, first, make sure the virtual environment you\nset up earlier is running, and that Flask is installed in it.",
      "sentence_number": 385,
      "word_count": 24
    },
    {
      "text": "python -m flask run\nWhen the server fires up, it goes into a loop that receives requests and\nhandles them.",
      "sentence_number": 386,
      "word_count": 20
    },
    {
      "text": "This loop will keep going until you press Ctrl+C to stop the\nprogram.",
      "sentence_number": 387,
      "word_count": 13
    },
    {
      "text": "Open your web browser and type http://localhost:5000/ in the url bar while\nthe server is running.",
      "sentence_number": 388,
      "word_count": 16
    },
    {
      "text": "The screenshot below shows what you'll see once\nyou're connected to the app.",
      "sentence_number": 389,
      "word_count": 13
    },
    {
      "text": "Now that is the base url we set a route to.",
      "sentence_number": 390,
      "word_count": 11
    },
    {
      "text": "Adding anything else to the URL\nwill mean that your app won't know how to handle it and will send an error\ncode 404 to the browser.",
      "sentence_number": 391,
      "word_count": 27
    },
    {
      "text": "The app.run() method can also be used to programmatically start the Flask\ndevelopment web server.",
      "sentence_number": 392,
      "word_count": 15
    },
    {
      "text": "In older Flask versions that didn't have the flask\ncommand, the server had to be started by running the application's main\nscript, which had to end with the following code:\nif __name__ == \"__main__\":\napp.run()\nThis is no longer necessary because of the flask run command.",
      "sentence_number": 393,
      "word_count": 46
    },
    {
      "text": "However, the\napp.run() function can still be helpful in some situations, such as unit testing.",
      "sentence_number": 394,
      "word_count": 15
    },
    {
      "text": "C 6 - D R\nHAPTER YNAMIC OUTES\nLet's now consider an alternative routing method.",
      "sentence_number": 395,
      "word_count": 15
    },
    {
      "text": "The next illustration\ndemonstrates how an alternative implementation of the program adds a\nsecond, dynamic route.",
      "sentence_number": 396,
      "word_count": 16
    },
    {
      "text": "Your name appears as a customized greeting when\nyou visit the active URL in your browser.",
      "sentence_number": 397,
      "word_count": 16
    },
    {
      "text": "In this chapter, I will describe variable rules, converters, and an example of\ndynamic routing.",
      "sentence_number": 398,
      "word_count": 15
    },
    {
      "text": "We've discussed routes, views, and static routing when the route decorator's\nrule parameter was a string.",
      "sentence_number": 399,
      "word_count": 16
    },
    {
      "text": "@app.route(\"/about\")\ndef learn():\nreturn \"Flask for web developers!\"\nIf you want to use dynamic routing, the rule argument will not be a constant\nstring like the /about.",
      "sentence_number": 400,
      "word_count": 27
    },
    {
      "text": "Instead, it is a variable rule you passed to the route().",
      "sentence_number": 401,
      "word_count": 11
    },
    {
      "text": "We have learned about Variable Rules.",
      "sentence_number": 402,
      "word_count": 6
    },
    {
      "text": "However, read through this script to\nbetter get a glimpse of the variable rule:\n\"\"\"An application to show Variable Rules in Routing\"\"\"\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\n\"\"\"View for the Home page of your website.\"\"\"\nreturn \"This is your homepage :)\"\n@app.route(\"/<your_name>\")\ndef greetings(your_name):\n\"\"\"View function to greet the user by name.\"\"\"\nreturn \"Welcome \" + your_name + \"!\"\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nThis is the result:\nWhat happens if you add /name?",
      "sentence_number": 403,
      "word_count": 81
    },
    {
      "text": "Like magic!",
      "sentence_number": 404,
      "word_count": 2
    },
    {
      "text": "How can you do this?",
      "sentence_number": 405,
      "word_count": 5
    },
    {
      "text": "Pretty easy.",
      "sentence_number": 406,
      "word_count": 2
    },
    {
      "text": "Follow me.",
      "sentence_number": 407,
      "word_count": 2
    },
    {
      "text": "The first thing you will find different in the new code is the second view\nfunction, greetings ().",
      "sentence_number": 408,
      "word_count": 18
    },
    {
      "text": "There is the variable rule: /<your_name>.",
      "sentence_number": 409,
      "word_count": 6
    },
    {
      "text": "That means the variable is your_name (whatever you type after the /).",
      "sentence_number": 410,
      "word_count": 12
    },
    {
      "text": "We\nthen pass this variable as a parameter to the greetings() function.",
      "sentence_number": 411,
      "word_count": 12
    },
    {
      "text": "That is why\nit is called to return a greeting to whatever name is passed to it.",
      "sentence_number": 412,
      "word_count": 17
    },
    {
      "text": "Facebook is\nnot that sleek now, is it?",
      "sentence_number": 413,
      "word_count": 8
    },
    {
      "text": "Converter\nThe above example used the URL to extract the variable your_name.",
      "sentence_number": 414,
      "word_count": 12
    },
    {
      "text": "Flask\nnow converted that variable into a string and passed it to the greetings()\nfunction.",
      "sentence_number": 415,
      "word_count": 15
    },
    {
      "text": "That is how converters work.",
      "sentence_number": 416,
      "word_count": 5
    },
    {
      "text": "Here are the data types Flask converters can convert:\nStrings: this goes without saying\nint: they convert this only for when you pass in positive integers\nfloat: also only works for positive floats\npath: this means strings with slashes\nuuid: UUID strings means Universally Unique Identifier strings used\nfor identifying information that needs to be unique within a system or\nnetwork.",
      "sentence_number": 417,
      "word_count": 61
    },
    {
      "text": "Let us learn about another feature for web apps.",
      "sentence_number": 418,
      "word_count": 9
    },
    {
      "text": "C 7 – S T\nHAPTER TATIC EMPLATES\nThis chapter will teach you how to create and implement static and HTML\ntemplates.",
      "sentence_number": 419,
      "word_count": 22
    },
    {
      "text": "You will also learn file structure strategies.",
      "sentence_number": 420,
      "word_count": 7
    },
    {
      "text": "Clean and well-structured code is essential for developing apps that are\nsimple to maintain.",
      "sentence_number": 421,
      "word_count": 14
    },
    {
      "text": "Flask view functions have two different jobs, and this can\ncause confusion.",
      "sentence_number": 422,
      "word_count": 12
    },
    {
      "text": "As we can see, a view function's one obvious purpose is to respond to a\nrequest from a web browser.",
      "sentence_number": 423,
      "word_count": 20
    },
    {
      "text": "The status of the application, as determined by\nthe view function, can also be altered by request.",
      "sentence_number": 424,
      "word_count": 17
    },
    {
      "text": "Imagine a user signing up for the first time on your website.",
      "sentence_number": 425,
      "word_count": 12
    },
    {
      "text": "Before clicking\nthe Submit button, he fills up an online form with his email address and\npassword.",
      "sentence_number": 426,
      "word_count": 17
    },
    {
      "text": "The view method, which manages registration requests, receives Flask's\nrequest on the server containing the user's data.",
      "sentence_number": 427,
      "word_count": 17
    },
    {
      "text": "The view function interacts\nwith the database to add the new user and provide a response to display in the\nbrowser.",
      "sentence_number": 428,
      "word_count": 21
    },
    {
      "text": "These two responsibilities are formally referred to as business logic\nand presentation logic, respectively.",
      "sentence_number": 429,
      "word_count": 14
    },
    {
      "text": "Complex code is produced when business and presentation logic are\ncombined.",
      "sentence_number": 430,
      "word_count": 11
    },
    {
      "text": "Imagine having to combine data from a database with the required\nHTML string literals in order to create the HTML code for a large table.",
      "sentence_number": 431,
      "word_count": 25
    },
    {
      "text": "The\napplication's maintainability is improved by placing presentation logic in\ntemplates.",
      "sentence_number": 432,
      "word_count": 11
    },
    {
      "text": "That is why a template is necessary.",
      "sentence_number": 433,
      "word_count": 7
    },
    {
      "text": "A template is a file that contains\nplaceholder variables for the dynamic parts of a response that are only known\nin relation to a request's context.",
      "sentence_number": 434,
      "word_count": 26
    },
    {
      "text": "The process known as rendering is what\ngives variables their real-world values in exchange for the final response\nstring.",
      "sentence_number": 435,
      "word_count": 19
    },
    {
      "text": "Flask renders templates using the powerful Jinja2 template engine.",
      "sentence_number": 436,
      "word_count": 9
    },
    {
      "text": "Rendering HTML Templates\nFlask expects to find template files in the leading application directory's\ntemplates subfolder.",
      "sentence_number": 437,
      "word_count": 16
    },
    {
      "text": "These templates are actually HTML files.",
      "sentence_number": 438,
      "word_count": 6
    },
    {
      "text": "Flask can render HTML using two methods:\nas string\nusing render_template function\nA String\nYou can use HTML as a string for the function.",
      "sentence_number": 439,
      "word_count": 24
    },
    {
      "text": "Here is an example:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"<h1>There's Something About Flask!</h1>\"\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nWhen you run that and follow your local host link, this is what you get:\nThis came out well as a template because we use HTML tags h1.",
      "sentence_number": 440,
      "word_count": 54
    },
    {
      "text": "We can use\nany HTML codes in the scripts, and Flask will read it well.",
      "sentence_number": 441,
      "word_count": 15
    },
    {
      "text": "render_template() function\nNow, the string is suitable for simple one-page websites.",
      "sentence_number": 442,
      "word_count": 11
    },
    {
      "text": "For big applications,\nyou must add your templates as separate files.",
      "sentence_number": 443,
      "word_count": 11
    },
    {
      "text": "In this case, you create the HTML code and keep the file separate in the\nfolder.",
      "sentence_number": 444,
      "word_count": 16
    },
    {
      "text": "You will then call the file in the views function by the file names.",
      "sentence_number": 445,
      "word_count": 14
    },
    {
      "text": "Flask will use the render_template() function to render the HTML templates.",
      "sentence_number": 446,
      "word_count": 11
    },
    {
      "text": "This function uses the following parameters:\ntemplate_name_or_list: that is the template file name or names if they\nare more than one\ncontext: these are variables that are in the template script.",
      "sentence_number": 447,
      "word_count": 31
    },
    {
      "text": "The render_template() returns the output using the view instead of a string.",
      "sentence_number": 448,
      "word_count": 12
    },
    {
      "text": "Here is an example:\ndef view_name():\nreturn render_template(template_name)\nIn this case, we would already have a template saved, perhaps as home.html\nor index.html, with the HTML code in it.",
      "sentence_number": 449,
      "word_count": 29
    },
    {
      "text": "When you run the app, Flask will\nrun all the HTML codes included in the script, and the view will display them\non the web browser.",
      "sentence_number": 450,
      "word_count": 26
    },
    {
      "text": "File Structure Strategies\nWhen you run the program, Flask will execute the script and run through\nyour \\templates folder to find the HTML files you reference in the script.",
      "sentence_number": 451,
      "word_count": 29
    },
    {
      "text": "You\nmust place the folder correctly so that there will be no errors.",
      "sentence_number": 452,
      "word_count": 13
    },
    {
      "text": "These are the\ncorrect file structures that Flask can read:\nModule File Structure\nThis is a very simple and straightforward structure where all the application\nlogic is in a single .py file.",
      "sentence_number": 453,
      "word_count": 32
    },
    {
      "text": "The templates folder will be the same folder as the\n.py file where the developer keeps the HTML files.",
      "sentence_number": 454,
      "word_count": 19
    },
    {
      "text": "Package File Structure\nIn many complex apps, the script is divided into separate .py files.",
      "sentence_number": 455,
      "word_count": 15
    },
    {
      "text": "In this\ncase, you must present all the .py files in the same package.",
      "sentence_number": 456,
      "word_count": 14
    },
    {
      "text": "A package is a\nfolder that contains an __init__.py file.",
      "sentence_number": 457,
      "word_count": 10
    },
    {
      "text": "You must create the templates folder in the main application package to use\nthis structure in your application.",
      "sentence_number": 458,
      "word_count": 18
    },
    {
      "text": "So, let us do it together.",
      "sentence_number": 459,
      "word_count": 6
    },
    {
      "text": "First, know what we want to do: we want to render a\nhome.html template with the render_template() function in our web app,\napp.py.",
      "sentence_number": 460,
      "word_count": 23
    },
    {
      "text": "You will create a templates folder and then create a file inside the new folder\nand call it home.html.",
      "sentence_number": 461,
      "word_count": 19
    },
    {
      "text": "Fill home.html with this code:\n<!DOCTYPE html>\n<html>\n<h1>This is where we say FLASK!",
      "sentence_number": 462,
      "word_count": 14
    },
    {
      "text": ":)</h1>\n</html>\nNow, we can change our app.py code to call the HTML code.",
      "sentence_number": 463,
      "word_count": 14
    },
    {
      "text": "from flask import Flask, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"home.html\")\nif __name__ == \"__main__\":\napp.run(debug=True, host=\"0.0.0.0\", port=3000)\nLook at the result!",
      "sentence_number": 464,
      "word_count": 24
    },
    {
      "text": "C 8 - T J 2 T E\nHAPTER HE INJA EMPLATE NGINE\nJinja2 is a Python template engine.",
      "sentence_number": 465,
      "word_count": 19
    },
    {
      "text": "It can be used instead of Python's standard\nstring interpolation, that is, adding data to strings.",
      "sentence_number": 466,
      "word_count": 16
    },
    {
      "text": "Flask can easily read Jinja2\ntemplates, which is easier to write than the typical Python code.",
      "sentence_number": 467,
      "word_count": 16
    },
    {
      "text": "Jinja2\ntemplates have a more natural language format.",
      "sentence_number": 468,
      "word_count": 8
    },
    {
      "text": "Jinja2 templates are written in HTML or XML and then turned into \"jinja\"\nbytecode, which the Jinja environment can read and use.",
      "sentence_number": 469,
      "word_count": 22
    },
    {
      "text": "The python\ncompiler module turns the templates into bytecode, which is then run by an\ninterpreter that parses and runs jinja scripts built from HTML or XML\ntemplates.",
      "sentence_number": 470,
      "word_count": 28
    },
    {
      "text": "Templates are files that contain both static and dynamic data placeholders.",
      "sentence_number": 471,
      "word_count": 11
    },
    {
      "text": "To\ncreate a finished document, a template is rendered with precise data.",
      "sentence_number": 472,
      "word_count": 12
    },
    {
      "text": "The\nJinja template library is used by Flask to render templates.",
      "sentence_number": 473,
      "word_count": 11
    },
    {
      "text": "Templates will be\nused in your application to render HTML shown in the user's browser.",
      "sentence_number": 474,
      "word_count": 15
    },
    {
      "text": "We have to place the template file in the templates folder.",
      "sentence_number": 475,
      "word_count": 11
    },
    {
      "text": "The templates are\nin the root folder of the project.",
      "sentence_number": 476,
      "word_count": 10
    },
    {
      "text": "For example, we can have our home.html to be:\n<!DOCTYPE html>\n<html>\n{% raw %}\n<h1>Hello {{ name }} </h1>\n{% endraw %}\n<h1>This is where we say FLASK!",
      "sentence_number": 477,
      "word_count": 29
    },
    {
      "text": ":)</h1>\n</html>\nWe will now write the view function as the following code:\n@app.route(\"/user/<name>\")\ndef index(name):\nreturn render_template(\"home.html\", name=name)\nThe Jinja2 template engine is built into the application by the Flask function\nrender_template().",
      "sentence_number": 478,
      "word_count": 33
    },
    {
      "text": "The template's filename is the first argument to the\nrender_template() function.",
      "sentence_number": 479,
      "word_count": 11
    },
    {
      "text": "The rest of the arguments are key-value pairs that\nshow the real values of the variables in the template.",
      "sentence_number": 480,
      "word_count": 19
    },
    {
      "text": "Variables\nA template file is just a normal text file.",
      "sentence_number": 481,
      "word_count": 10
    },
    {
      "text": "The part to be replaced is marked\nwith double curly brackets ({{ }} ), in which the variable name to be replaced\nis written.",
      "sentence_number": 482,
      "word_count": 24
    },
    {
      "text": "This variable supports basic data types, lists, dictionaries, objects,\nand tuples.",
      "sentence_number": 483,
      "word_count": 11
    },
    {
      "text": "The same as in template.html:\n{% raw %}\n<p> A value form a string: {{ name }}.",
      "sentence_number": 484,
      "word_count": 17
    },
    {
      "text": "</p>\n<p> A value form a int: {{ myindex }}.",
      "sentence_number": 485,
      "word_count": 10
    },
    {
      "text": "</p>\n<p> A value form a list: {{ myindex }}.",
      "sentence_number": 486,
      "word_count": 10
    },
    {
      "text": "<p> A value form a list: {{ mylist[3]] }}.",
      "sentence_number": 487,
      "word_count": 9
    },
    {
      "text": "</p>\n<p> A value form a list: {{ mylist[3] }}.</p>\n<p> A value form a list, with a variable index: {{ mylist[myindex] }}.",
      "sentence_number": 488,
      "word_count": 23
    },
    {
      "text": "</p>\n<p> A value form a dictionary: {{ mydict['key'] }}.",
      "sentence_number": 489,
      "word_count": 10
    },
    {
      "text": "</p>\n<p> A value form a dictionary: {{ mydict['key'] }}.",
      "sentence_number": 490,
      "word_count": 10
    },
    {
      "text": "<p> A value form a tuple: {{ mytuple }}.",
      "sentence_number": 491,
      "word_count": 9
    },
    {
      "text": "</p>\n<p> A value form a tuple: {{ mytuple }}.</p>\n<p> A value form a tuple by index: {{ mytuple[myindex] }}.",
      "sentence_number": 492,
      "word_count": 21
    },
    {
      "text": "</p>\n{% endraw %}\nFilters\nAs you write your apps, you may want to change some parts of your values in\nthe template when they come on.",
      "sentence_number": 493,
      "word_count": 27
    },
    {
      "text": "For example, you may set the code to\ncapitalize the first letter in a string, remove spaces, etc.",
      "sentence_number": 494,
      "word_count": 18
    },
    {
      "text": "In Flask, one way to\ndo this is by using a filter.",
      "sentence_number": 495,
      "word_count": 12
    },
    {
      "text": "Filters in the Jinjia2 template engine work like pipes in Linux commands.",
      "sentence_number": 496,
      "word_count": 12
    },
    {
      "text": "For\nexample, they can capitalize the first letter of a string variable.",
      "sentence_number": 497,
      "word_count": 12
    },
    {
      "text": "{% raw %}\n<h1>{{ name | capitalize}}</h1>\n{% endraw %}\nBoth filters and the Linux pipeline command can be spliced.",
      "sentence_number": 498,
      "word_count": 20
    },
    {
      "text": "For example,\nyou can splice a line to do two things at the same time.",
      "sentence_number": 499,
      "word_count": 15
    },
    {
      "text": "Let us write a line to\ncapitalize values and take out whitespace before and after.",
      "sentence_number": 500,
      "word_count": 15
    },
    {
      "text": "{% raw %}\n<h1>{{ name | upper | trim }}</h1>\n{% endraw %}\nAs you see in the code, we connected the filter and the variable with the pipe\nsymbol |.",
      "sentence_number": 501,
      "word_count": 31
    },
    {
      "text": "That is the same as processing the variable value.",
      "sentence_number": 502,
      "word_count": 9
    },
    {
      "text": "Here are some standard filters web developers use:\nfilter description\nsafe rendering is not escaped\ncapitalize initial capitalization\nlower all letters lowercase\nupper all letters uppercase\ntitle Capitalize the first letter of each word in the value\ntrim removes the first blank character\nstripttags removes all HTML tags from the value when rendering\nControl structure\nJinja2 has a number of control structures that can be used to change how the\ntemplate is run.",
      "sentence_number": 503,
      "word_count": 73
    },
    {
      "text": "This section goes over some of the most useful ones and\nshows you how to use them.",
      "sentence_number": 504,
      "word_count": 17
    },
    {
      "text": "Many times, a smarter template rendering is needed, which means being able\nto program the rendering, such as having a style for boys and the same style\nfor girls.",
      "sentence_number": 505,
      "word_count": 29
    },
    {
      "text": "Control structure instructions need to be specified with command\nmarkers, and some simple control structures are explained below.",
      "sentence_number": 506,
      "word_count": 18
    },
    {
      "text": "Conditions\nThis kind of structure is when you use a conditional statement, i.e., an if-else\nstructure in the template.",
      "sentence_number": 507,
      "word_count": 19
    },
    {
      "text": "Here's an example of how you can add a conditional statement to a template:\n{% raw %}\n{% if gender=='male' %}\nHello, Mr {{ name }}\n{% else %}\nHello, Ms {{ name }}\n{% endif %}\n{% endraw %}\nThe view function will be:\n@app.route(\"/hello2/<name>/<gender>\")\ndef hello2(name, gender):\nreturn render_template(\"hello2.html\", name=name, gender=gender)\nThis is no different from the typical python code structure.",
      "sentence_number": 508,
      "word_count": 63
    },
    {
      "text": "loop\nIf your web page has lists, for example, a control structure you want to use is\nloops.",
      "sentence_number": 509,
      "word_count": 18
    },
    {
      "text": "for loops are better suited.",
      "sentence_number": 510,
      "word_count": 5
    },
    {
      "text": "For example, let us display a list with ul.",
      "sentence_number": 511,
      "word_count": 9
    },
    {
      "text": "{% raw %}\n<ul>\n{% for name in names %}\n<li>{{ name }} </li>\n{% endfor %}\n</ul>\n{% endraw %}\nC 9 - B I\nHAPTER OOTSTRAP NTEGRATION WITH\nF\nLASK\nBootstrap is the most common CSS framework.",
      "sentence_number": 512,
      "word_count": 39
    },
    {
      "text": "It has more than 150k stars\non Github and a very large ecosystem that supports it.",
      "sentence_number": 513,
      "word_count": 16
    },
    {
      "text": "To make this chapter\nmore useful, we'll look at an open-source Flask project with a beautiful UI\nstyled with Bootstrap.",
      "sentence_number": 514,
      "word_count": 20
    },
    {
      "text": "This project comes in two flavors: a low model that\nuses components downloaded from the official Bootstrap Samples page and a\nproduction-ready model with more pages (home, about, contact) and a\ncomplete set of features.",
      "sentence_number": 515,
      "word_count": 35
    },
    {
      "text": "What is Bootstrap?",
      "sentence_number": 516,
      "word_count": 3
    },
    {
      "text": "Twitter's Bootstrap is a free web browser framework that makes it simple to\nconstruct aesthetically pleasing, clean web pages that function on desktop and\nmobile platforms with all current web browsers.",
      "sentence_number": 517,
      "word_count": 31
    },
    {
      "text": "Bootstrap is a client-side framework that doesn't directly interact with the\nserver.",
      "sentence_number": 518,
      "word_count": 12
    },
    {
      "text": "The user interface elements must be created using HTML, CSS, and\nJavaScript code once the server sends HTML answers that connect to the\nappropriate Bootstrap Cascading Style Sheets (CSS) and JavaScript files.",
      "sentence_number": 519,
      "word_count": 32
    },
    {
      "text": "It is\neasiest to do all of this using templates.",
      "sentence_number": 520,
      "word_count": 10
    },
    {
      "text": "Getting Started\nThe first step in integrating Bootstrap with your program is to modify the\nHTML templates as needed.",
      "sentence_number": 521,
      "word_count": 19
    },
    {
      "text": "The following code will allow you to create an\nHTML file and view it in your browser.:\n<!doctype html>\n<html lang=\"en\">\n<head>\n<title>My First Bootstrap Page</title>\n<!-- Bootstrap CSS -->\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\nrel=\"stylesheet\">\n</head>\n<body>\n<h1 class=\"text-primary\">\nLet's learn Bootstrap\n</h1>\n<!-- Bootstrap Javascripts -->\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\nHowever, you can do this even better and faster with a Flask extension called\nFlask-Bootstrap, and you can install it with pip:\npip install flask-bootstrap\nYou can initialize Bootstrap into your script very quickly.",
      "sentence_number": 522,
      "word_count": 83
    },
    {
      "text": "Code Flask App with Bootstrap\nNow, go back to your app folder.",
      "sentence_number": 523,
      "word_count": 12
    },
    {
      "text": "You can delete and start over or open a new\nbase folder.",
      "sentence_number": 524,
      "word_count": 12
    },
    {
      "text": "Create a new app.py file and fill it with the following code:\nfrom flask import Flask, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef main():\nreturn render_template('index.html')\nif __name__ == \"__main__\":\napp.run()\nOnce that is saved, you can create an index.html template in the templates\nfolder.",
      "sentence_number": 525,
      "word_count": 44
    },
    {
      "text": "Fill it with this demo script I adapted from W3Schools:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Python Flask & Bootstrap 4</title>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\"\nhref=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n<style>\n.fakeimg {\nheight: 200px;\nbackground: #aaa;\n}\n</style>\n</head>\n<body>\n<div class=\"jumbotron text-center\" style=\"margin-bottom:0\">\n<h1>Python Flask & Bootstrap 4</h1>\n<p>Resize this responsive page to see the effect!</p>\n</div>\n<nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n<a class=\"navbar-brand\" href=\"#\">Navbar</a>\n<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-\ntarget=\"#collapsibleNavbar\">\n<span class=\"navbar-toggler-icon\"></span>\n</button>\n<div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n<ul class=\"navbar-nav\">\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n</ul>\n</div>\n</nav>\n<div class=\"container\" style=\"margin-top:30px\">\n<div class=\"row\">\n<div class=\"col-sm-4\">\n<h2>About Me</h2>\n<h5>Photo of me:</h5>\n<div class=\"fakeimg\">Fake Image</div>\n<p>this is everything I know</p>\n<h3>Some Links</h3>\n<p>I love Flask!.</p>\n<ul class=\"nav nav-pills flex-column\">\n<li class=\"nav-item\">\n<a class=\"nav-link active\" href=\"#\">Active</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link disabled\" href=\"#\">Disabled</a>\n</li>\n</ul>\n<hr class=\"d-sm-none\">\n</div>\n<div class=\"col-sm-8\">\n<h2>Learning Flask!</h2>\n<h5>Title description, 2022</h5>\n<div class=\"fakeimg\">Fake Image</div>\n<p>Some text..</p>\n<p>This is a revolution in the name of Flask, and everything is done in Visual Studio Code.",
      "sentence_number": 526,
      "word_count": 196
    },
    {
      "text": "</p>\n<br>\n<h2>TITLE HEADING</h2>\n<h5>Title description, Sep 2, 2017</h5>\n<div class=\"fakeimg\">Fake Image</div>\n<p>Some text..</p>\n<p>Another long text about how the world is going, and we are here learning about Flask.",
      "sentence_number": 527,
      "word_count": 30
    },
    {
      "text": "What\na beautiful thing to know, but after this, there is nothing more because we are all enjoying\nexercitation ullamco.</p>\n</div>\n</div>\n</div>\n<div class=\"jumbotron text-center\" style=\"margin-bottom:0\">\n<p>Footer</p>\n</div>\n</body>\n</html>\nRun the program by running python -m flask run in the Terminal while your\nvirtual environment is running, and you will see a complete Flask demo\nwebsite like this:\nLet us create a standard website where users can log in, sign up, and register.",
      "sentence_number": 528,
      "word_count": 75
    },
    {
      "text": "Create a Real Flask Website\nCreate a new folder inside your base folder for your new website project.",
      "sentence_number": 529,
      "word_count": 18
    },
    {
      "text": "I\ncall it app.",
      "sentence_number": 530,
      "word_count": 4
    },
    {
      "text": "Inside it, we are going to create a new views.py file.",
      "sentence_number": 531,
      "word_count": 11
    },
    {
      "text": "So, let us begin with the homepage.",
      "sentence_number": 532,
      "word_count": 7
    },
    {
      "text": "Every website needs a very specific\nhome page, and your home page will likely be very different from the rest of\nyour website.",
      "sentence_number": 533,
      "word_count": 23
    },
    {
      "text": "We'll have a separate home page, the only page that doesn't \"extend\" any\nheader stuff like most pages.",
      "sentence_number": 534,
      "word_count": 18
    },
    {
      "text": "Bootstrap takes care of almost all the graphic\nstuff for you, which is great.",
      "sentence_number": 535,
      "word_count": 14
    },
    {
      "text": "You only have to decide where things go; the\nrest is styled for you.",
      "sentence_number": 536,
      "word_count": 14
    },
    {
      "text": "It really does help a lot, too.",
      "sentence_number": 537,
      "word_count": 7
    },
    {
      "text": "To use Bootstrap, you'll need to ‘add’ it to your website.",
      "sentence_number": 538,
      "word_count": 11
    },
    {
      "text": "How do we do that?",
      "sentence_number": 539,
      "word_count": 5
    },
    {
      "text": "Getting Bootsrap\nIt is as simple as installing Python.",
      "sentence_number": 540,
      "word_count": 9
    },
    {
      "text": "Go to the official Bootstrap website here:\nhttps://getbootstrap.com/.",
      "sentence_number": 541,
      "word_count": 8
    },
    {
      "text": "Go to the download page and download it.",
      "sentence_number": 542,
      "word_count": 8
    },
    {
      "text": "Now, extract the zip file.",
      "sentence_number": 543,
      "word_count": 5
    },
    {
      "text": "Go to your Terminal and create a static folder inside\nthe new project folder called static.",
      "sentence_number": 544,
      "word_count": 16
    },
    {
      "text": "So run mkdir static.",
      "sentence_number": 545,
      "word_count": 4
    },
    {
      "text": "Move the two folders\njs and css to the static folder.",
      "sentence_number": 546,
      "word_count": 11
    },
    {
      "text": "After that, we'll need to look through the documents to see what's available.",
      "sentence_number": 547,
      "word_count": 13
    },
    {
      "text": "I\nusually just quickly scroll through until I see something that looks interesting.",
      "sentence_number": 548,
      "word_count": 13
    },
    {
      "text": "You'll most likely be interested in the pages with components or JavaScript.",
      "sentence_number": 549,
      "word_count": 12
    },
    {
      "text": "Below each thing shown is the code that made it.",
      "sentence_number": 550,
      "word_count": 10
    },
    {
      "text": "Note that all the features\nshould work if you copy and paste them onto your page.",
      "sentence_number": 551,
      "word_count": 16
    },
    {
      "text": "You will need to add\nthe script to the JavaScript.",
      "sentence_number": 552,
      "word_count": 10
    },
    {
      "text": "See the videos if you don't know what that means.",
      "sentence_number": 553,
      "word_count": 10
    },
    {
      "text": "In short, you just need to include the required javascript file at the end of\nyour HTML body tags.",
      "sentence_number": 554,
      "word_count": 19
    },
    {
      "text": "This means that you need to call the javascript\nfunctions before you include the javascript function in the script tags.",
      "sentence_number": 555,
      "word_count": 20
    },
    {
      "text": "The file we end up making is this:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Python Programming Tutorials</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link href=\"{{ url_for('static', filename='css/bootstrap.min.css') }}\" rel=\"stylesheet\">\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n</head>\n<header>\n<div class=\"navbar-header\">\n<a class=\"navbar-brand\" href=\"/\">\n<img style=\"max-width:120px; margin-top: -7px;\"\nsrc=\"{{ url_for('static', filename='images/mainlogo.png') }}\">\n</a>\n</div>\n<div class=\"container-fluid\">\n<a href=\"/dashboard/\"><button type=\"button\" class=\"btn btn-primary\" aria-label=\"Left Align\"\nstyle=\"margin-top: 5px; margin-bottom: 5px; height: 44px; margin-right: 15px\">\n<span class=\"glyphicon glyphicon-off\" aria-hidden=\"true\"></span> Start Learning\n</button></a>\n<div style=\"margin-right: 10px; margin-left: 15px; margin-top: 5px; margin-bottom: 5px;\"\nclass=\"container-fluid\">\n</div>\n</div>\n</header>\n<body>\n<script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\n<script type=\"text/javascript\" src=\"{{ url_for('static', filename='js/bootstrap.min.js') }}\"></script>\n</body>\n</html>\nThis is the main.html file.",
      "sentence_number": 556,
      "word_count": 105
    },
    {
      "text": "Web App\nLet's actually go ahead to start building our first web page or website with\nflask.",
      "sentence_number": 557,
      "word_count": 17
    },
    {
      "text": "I have created a new .py file I call app.py in the project folder.",
      "sentence_number": 558,
      "word_count": 14
    },
    {
      "text": "Fill it\nwith the following code:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"Welcome to my Main Page <h1>Hello!<h1>\"\n@app.route(\"/<name>\")\ndef user(name):\nreturn f\"Hello {name}\"\nif __name__ == \"__main__\":\napp.run()\nIn this code, we have created a new app route.",
      "sentence_number": 559,
      "word_count": 44
    },
    {
      "text": "This will create a Hello and\nput whatever you put in after the slash.",
      "sentence_number": 560,
      "word_count": 14
    },
    {
      "text": "Page redirect\nNow, what if you want to redirect different pages from your code?",
      "sentence_number": 561,
      "word_count": 14
    },
    {
      "text": "For\nexample, if we're going to get to a separate page, we need to type that actual\npage, but sometimes a user goes to a page they're not supposed to be.",
      "sentence_number": 562,
      "word_count": 31
    },
    {
      "text": "Perhaps\nthey are not authenticated.",
      "sentence_number": 563,
      "word_count": 5
    },
    {
      "text": "We need to redirect them to the home page.",
      "sentence_number": 564,
      "word_count": 9
    },
    {
      "text": "We go back to our app.py, and import two modules called redirect and\nurl_for.",
      "sentence_number": 565,
      "word_count": 14
    },
    {
      "text": "These two will allow us to return a redirect from a specific function.",
      "sentence_number": 566,
      "word_count": 13
    },
    {
      "text": "Here is the new file:\nfrom flask import Flask, redirect, url_for\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"Welcome to my Main Page <h1>Hello!<h1>\"\n@app.route(\"/<name>\")\ndef user(name):\nreturn f\"Hello {name}!\"\n@app.route(\"/admin\")\ndef admin():\nreturn redirect(url_for(\"user\", name=\"Admin!\"))\nif __name__ == \"__main__\":\napp.run()\nIn this example, we assume that we have an admin page that can only be\naccessed by someone who's signed in or is an admin.",
      "sentence_number": 567,
      "word_count": 66
    },
    {
      "text": "After creating the\ndecorator, we input the redirect to redirect the user to a different page.",
      "sentence_number": 568,
      "word_count": 16
    },
    {
      "text": "We\nthen type in the url_for() function, and inside it, we put the name of the\nfunction we want to redirect to inside of strings.",
      "sentence_number": 569,
      "word_count": 25
    },
    {
      "text": "Restart your server and add\nthe slash admin to be redirected to the home page.",
      "sentence_number": 570,
      "word_count": 15
    },
    {
      "text": "Template inheritance\nTemplate inheritance is an extremely useful tool, so you're not repeating\nHTML code, JavaScript, or whatever it's going to be throughout your entire\nwebsite.",
      "sentence_number": 571,
      "word_count": 26
    },
    {
      "text": "It essentially allows you to create a base template that every other\none of your templates will work off of, and that is what we will use for our\nwebsite with bootstrap.",
      "sentence_number": 572,
      "word_count": 32
    },
    {
      "text": "I'm also going to be showing you how we can add Bootstrap to our website\nand just create a basic navbar.",
      "sentence_number": 573,
      "word_count": 21
    },
    {
      "text": "What is Template Inheritance\nIf we look at the bootstrap website, for example, we can see that this website\nhas a theme, and we can kind of detect that theme by the navbar.",
      "sentence_number": 574,
      "word_count": 33
    },
    {
      "text": "You see a\nspecific color, buttons, links and so on.",
      "sentence_number": 575,
      "word_count": 10
    },
    {
      "text": "All pages on that website have the\nsame theme in terms of colors and buttons.",
      "sentence_number": 576,
      "word_count": 15
    },
    {
      "text": "It would be boring and stupid to keep writing the code to generate this navbar\non every single web page they have because this will stay the same for most\nof the pages.",
      "sentence_number": 577,
      "word_count": 33
    },
    {
      "text": "Flask at least makes this really easy because we can actually inherit\ntemplates.",
      "sentence_number": 578,
      "word_count": 13
    },
    {
      "text": "Now I'm going to do to illustrate this is just create a new template.",
      "sentence_number": 579,
      "word_count": 14
    },
    {
      "text": "I'm just going to create a new file.",
      "sentence_number": 580,
      "word_count": 8
    },
    {
      "text": "I will save this as base.html, representing\nthe base template or the base theme of my website.",
      "sentence_number": 581,
      "word_count": 17
    },
    {
      "text": "It will store all the HTML\ncode that will persist throughout most or the entire website.",
      "sentence_number": 582,
      "word_count": 16
    },
    {
      "text": "So, populate the\nbase.html with the following code:\n<!doctype html>\n<html>\n<head>\n<title>Home Page</title>\n</head>\n<body>\n<h1>{{content}}</h1>\n</body>\n</html>\nWe'll start working with a few things here, so since this is our base template,\nwe are not going to ever render this template.",
      "sentence_number": 583,
      "word_count": 43
    },
    {
      "text": "We'll always use this as\nsomething from which the child templates, which will be, for example,\nindex.html, will inherit.",
      "sentence_number": 584,
      "word_count": 19
    },
    {
      "text": "Inheritance essentially means to use everything and then change a few small\nthings are overwrite some functionality of the parent, which in this case is\ngoing to be the base.html, so the way that we can allow our child templates to\nchange specific functionality of the base template is by adding something\ncalled blocks.",
      "sentence_number": 585,
      "word_count": 54
    },
    {
      "text": "<!doctype html>\n<html>\n<head>\n<title>{% block content %}{% endblock %}</title>\n</head>\n<body>\n<h1>Abby’s Website</h1>\n</body>\n</html>\nYou can see the block in the curly brackets with the same tags used to write\nyou know for loops and if statements in HTML code.",
      "sentence_number": 586,
      "word_count": 42
    },
    {
      "text": "The name directly after\nblock is the name of the block.",
      "sentence_number": 587,
      "word_count": 11
    },
    {
      "text": "We then simply end the block by typing\nendblock with similar syntax.",
      "sentence_number": 588,
      "word_count": 12
    },
    {
      "text": "This says we're going to define a block we're\ngoing to call content, and in this block, we will allow the child template to\ngive us some content that we will fill in.",
      "sentence_number": 589,
      "word_count": 33
    },
    {
      "text": "Let us now go to the child template I can inherit.",
      "sentence_number": 590,
      "word_count": 11
    },
    {
      "text": "Create a new index.html in\nthe templates folder.",
      "sentence_number": 591,
      "word_count": 8
    },
    {
      "text": "Create this block and then tell the block where what\ncontent I want.",
      "sentence_number": 592,
      "word_count": 13
    },
    {
      "text": "Then it will substitute it inside here for a title and use that title\nwhen we render the template.",
      "sentence_number": 593,
      "word_count": 19
    },
    {
      "text": "Here is the code in the index.html file:\n{% extends \"base.html\" %}\n{% block title %}Home Page{% endblock %}\n{% block content %}\n<h1>My Home!</h1>\n{% endblock %}\nOur base.html\n<!doctype html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n<h1>Abby's Website</h1>\n{% block content %}\n{% endblock %}\n</body>\n</html>\nI'm going to do is actually give some content for that block title, so this is the\nexact same as what we had in our base template, except this time I'm actually\ngoing to put some stuff in between kind of blocks, so I'm going to say and\nblock like that so block content and block and then inside here I'm actually\njust going to put homepage now what this is going to do is very similar just\nkind of like an HTML tag where this homepage now will be replaced with\nwhatever this block title is and that will actually show now for us inside title\nso very useful.",
      "sentence_number": 594,
      "word_count": 163
    },
    {
      "text": "I'm going to put something that just says Abby's website, and\nthis h1 tag will be shown on every page no matter what.",
      "sentence_number": 595,
      "word_count": 23
    },
    {
      "text": "Our app.py:\nfrom flask import Flask, redirect, url_for, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\nif __name__ == \"__main__\":\napp.run(debug=True)\nThe result:\nSo, every page we go to will have Abby’s Website as the inherited template.",
      "sentence_number": 596,
      "word_count": 38
    },
    {
      "text": "I was saying that we're going to have some more complex components.",
      "sentence_number": 597,
      "word_count": 12
    },
    {
      "text": "I'm\ngoing to show you how we can add a nav bar now and then how we can use\nthe base template so all our other templates will have that nav bar on it.",
      "sentence_number": 598,
      "word_count": 34
    },
    {
      "text": "Let's\nactually talk about adding Bootstrap.",
      "sentence_number": 599,
      "word_count": 6
    },
    {
      "text": "Adding Bootstrap\nIf you're unfamiliar with Bootstrap, it is a CSS framework for quickly\ncreating and styling your website.",
      "sentence_number": 600,
      "word_count": 19
    },
    {
      "text": "To add, it is actually pretty easy.",
      "sentence_number": 601,
      "word_count": 7
    },
    {
      "text": "You will go to the Bootstrap website and grab the codes!",
      "sentence_number": 602,
      "word_count": 11
    },
    {
      "text": "It is basically copy\nand paste.",
      "sentence_number": 603,
      "word_count": 6
    },
    {
      "text": "Don’t think programmers are magicians.",
      "sentence_number": 604,
      "word_count": 5
    },
    {
      "text": "We don’t cram stuff.",
      "sentence_number": 605,
      "word_count": 4
    },
    {
      "text": "Simply go here on your browser https://getbootstrap.com/docs/4.3/getting-\nstarted/introduction/ and grab the codes.",
      "sentence_number": 606,
      "word_count": 12
    },
    {
      "text": "I'm going to look where it says CSS, and I will copy the link with the copy\nbutton.",
      "sentence_number": 607,
      "word_count": 18
    },
    {
      "text": "I'm going to take that CSS link and paste that inside the head tags of my\nwebsite, in this case, the base.html template.",
      "sentence_number": 608,
      "word_count": 23
    },
    {
      "text": "Next, I'm going to go to where it\nsays Js and copy that too and put them at the end of the body.",
      "sentence_number": 609,
      "word_count": 23
    },
    {
      "text": "This will allow us to use a library of different classes and a bunch of different\nkinds of styling from bootstrap to make our website look nicer.",
      "sentence_number": 610,
      "word_count": 27
    },
    {
      "text": "If you look at the codes, you will see cdn at the end.",
      "sentence_number": 611,
      "word_count": 13
    },
    {
      "text": "That means we don't\nneed to download any Bootstrap files because this will just grab the CSS and\nJavaScript code from the Bootstrap server.",
      "sentence_number": 612,
      "word_count": 24
    },
    {
      "text": "Nav bar From Bootstrap\nI will show you how we can just grab a sidebar layout or a navbar layout\nfrom the bootstrap website.",
      "sentence_number": 613,
      "word_count": 24
    },
    {
      "text": "Go to the sidebar and search for whatever you\nneed.",
      "sentence_number": 614,
      "word_count": 10
    },
    {
      "text": "In this case, the nav bar.",
      "sentence_number": 615,
      "word_count": 6
    },
    {
      "text": "Look for one that you like, as there are a\nbunch of different nav bar codes.",
      "sentence_number": 616,
      "word_count": 16
    },
    {
      "text": "Just place the code on the website in the base template right after the first\nbody tag.",
      "sentence_number": 617,
      "word_count": 17
    },
    {
      "text": "Any child template will automatically have this nav bar at the top\nof it.",
      "sentence_number": 618,
      "word_count": 14
    },
    {
      "text": "Our current base.html code:\n<!doctype html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\"\nintegrity=\"sha384-\nggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\ncrossorigin=\"anonymous\">\n<title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n<a class=\"navbar-brand\" href=\"#\">Navbar</a>\n<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\naria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n<span class=\"navbar-toggler-icon\"></span>\n</button>\n<div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n<ul class=\"navbar-nav\">\n<li class=\"nav-item active\">\n<a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Features</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Pricing</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\n</li>\n</ul>\n</div>\n</nav>\n<h1>Abby's Website</h1>\n{% block content %}\n{% endblock %}\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\nintegrity=\"sha384-\nq8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js\"\nintegrity=\"sha384-\nUO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"\nintegrity=\"sha384-\nJjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\ncrossorigin=\"anonymous\"></script>\n</body>\n</html>\nThe new face of the website:\nIf you wanted to change anything associated with the navbar, obviously, all\nthe codes here so you can change them, but that's just what I wanted to show\nyou regarding how we can add bootstrap.",
      "sentence_number": 619,
      "word_count": 148
    },
    {
      "text": "There are several other frameworks for styling, but I like bootstrap because\nit's pretty easy.",
      "sentence_number": 620,
      "word_count": 15
    },
    {
      "text": "C 10 – HTTP M (GET/POST) &\nHAPTER ETHODS\nR F D\nETRIEVING ORM ATA\nThe templates you worked with in this course are one-way, meaning that\ninformation can only flow from the server to the user.",
      "sentence_number": 621,
      "word_count": 37
    },
    {
      "text": "Most applications also\nneed the information to flow in the opposite direction, from the user to the\nserver, where it is accepted and processed.",
      "sentence_number": 622,
      "word_count": 24
    },
    {
      "text": "Your website may want to collect data from users instead of serving them.",
      "sentence_number": 623,
      "word_count": 13
    },
    {
      "text": "This is done with forms.",
      "sentence_number": 624,
      "word_count": 5
    },
    {
      "text": "With HTML, you can make web forms that users can use to enter\ninformation.",
      "sentence_number": 625,
      "word_count": 14
    },
    {
      "text": "The data from the form is then sent to the server by the web\nbrowser.",
      "sentence_number": 626,
      "word_count": 15
    },
    {
      "text": "This is usually done as a POST request.",
      "sentence_number": 627,
      "word_count": 8
    },
    {
      "text": "We'll talk about HTTP methods in this chapter.",
      "sentence_number": 628,
      "word_count": 8
    },
    {
      "text": "The standard way to send and\nreceive information from and to a web server is through HTTP methods.",
      "sentence_number": 629,
      "word_count": 18
    },
    {
      "text": "Simply put, a website runs on one or more servers and sends information to a\nclient (web browser).",
      "sentence_number": 630,
      "word_count": 18
    },
    {
      "text": "The client and the server share information using\nHTTP, which has a few different ways to do this.",
      "sentence_number": 631,
      "word_count": 18
    },
    {
      "text": "We will talk about the ones\ncalled POST & GET that are often used.",
      "sentence_number": 632,
      "word_count": 14
    },
    {
      "text": "GET\nGET is the most common way of getting or sending information to a website.",
      "sentence_number": 633,
      "word_count": 15
    },
    {
      "text": "GET is the most commonly used HTTP method to retrieve information from\na web server, depending on how this information is going.",
      "sentence_number": 634,
      "word_count": 22
    },
    {
      "text": "POST\nPOST is a way of doing this securely, so GET is an insecure way of getting\nthe most commonly used information.",
      "sentence_number": 635,
      "word_count": 22
    },
    {
      "text": "People often use the POST method to\nsend information to a web server.",
      "sentence_number": 636,
      "word_count": 13
    },
    {
      "text": "It is often used when sending sensitive\ninformation, uploading a file, or getting form data.",
      "sentence_number": 637,
      "word_count": 15
    },
    {
      "text": "With POST, you can send\ndata to a web server in a safe way.",
      "sentence_number": 638,
      "word_count": 14
    },
    {
      "text": "A basic example of that is when we type something in the URL bar or in the\naddress bar.",
      "sentence_number": 639,
      "word_count": 19
    },
    {
      "text": "For instance, if you have your local server running, you will see\na command that pops up saying GET in the console when you go to the home\npage.",
      "sentence_number": 640,
      "word_count": 29
    },
    {
      "text": "Whenever we type something that's not secure, anyone can see it, and\nthe data will be sent to the server here.",
      "sentence_number": 641,
      "word_count": 21
    },
    {
      "text": "Then it will return us the actual web\npage using a GET method.",
      "sentence_number": 642,
      "word_count": 13
    },
    {
      "text": "If we were to use POST, what we would actually do is send secure and\nencrypted information.",
      "sentence_number": 643,
      "word_count": 17
    },
    {
      "text": "Something that cannot be seen from either end and is\nnot stored on the actual web server.",
      "sentence_number": 644,
      "word_count": 17
    },
    {
      "text": "That is the difference between GET and\nPOST.",
      "sentence_number": 645,
      "word_count": 8
    },
    {
      "text": "The best way to think of it is whenever you're using a GET command, it's\nsomething that's not secure that you don't care if someone sees it.",
      "sentence_number": 646,
      "word_count": 27
    },
    {
      "text": "It's\ntypically typed in through the address bar where it's just a link you redirect to,\nand then with POST, that's something secure.",
      "sentence_number": 647,
      "word_count": 23
    },
    {
      "text": "It's usually form data.",
      "sentence_number": 648,
      "word_count": 4
    },
    {
      "text": "It's\nsomething that we're not going to be saving on the actual web server itself\nunless we're going to be sending that to it.",
      "sentence_number": 649,
      "word_count": 24
    },
    {
      "text": "Web Forms\nLet's now go through a basic example of web forms in a website.",
      "sentence_number": 650,
      "word_count": 15
    },
    {
      "text": "You can use\nthe same app.py we have been working with here.",
      "sentence_number": 651,
      "word_count": 12
    },
    {
      "text": "You only need to add a\nfew different pages for this example first.",
      "sentence_number": 652,
      "word_count": 13
    },
    {
      "text": "Here is what the new code will be\nlike:\nfrom flask import Flask, redirect, url_for, render_template\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nreturn render_template()\n@app.route(\"/<usr>\")\ndef user(usr):\nreturn f\"<h1>{usr}</h1>\"\nif __name__ == \"__main__\":\napp.run(debug=True)\nSo what I want to do is set up a page here for logging in\nLogin page template\nNow, I'm going to go and build out the login page template inside my\ntemplates folder.",
      "sentence_number": 653,
      "word_count": 75
    },
    {
      "text": "Create a new file and call this login.html; inside, we'll start\ncreating the form.",
      "sentence_number": 654,
      "word_count": 14
    },
    {
      "text": "Here is the script to create a form:\n{% extends \"base.html\" %}\n{% block title %}Login Page{% endblock %}\n{% block content %}\n<form action=\"#\" method=\"post\">\n<p>Name:</p>\n<p><input type=\"text\" name=\"nm\" /></p>\n<p><input type=\"submit\" value=\"submit\" /></p>\n</form>\n{% endblock %}\nSo we start by extending that base.html and then do the tags for our title.",
      "sentence_number": 655,
      "word_count": 54
    },
    {
      "text": "So\nessentially, a form is a way to send information to the website.",
      "sentence_number": 656,
      "word_count": 13
    },
    {
      "text": "Whenever we know we will get some information from a form, we need to\nput our form tags in HTML.",
      "sentence_number": 657,
      "word_count": 20
    },
    {
      "text": "I'm just going to specify that here, and we need\nto say the action this form will take now.",
      "sentence_number": 658,
      "word_count": 19
    },
    {
      "text": "The action is essentially just a URL\nwe want to redirect to once this form is submitted.",
      "sentence_number": 659,
      "word_count": 17
    },
    {
      "text": "We've decided how the form will be sent.",
      "sentence_number": 660,
      "word_count": 8
    },
    {
      "text": "This means that when the form is\nsent, we will send a request with the data to the web server.",
      "sentence_number": 661,
      "word_count": 20
    },
    {
      "text": "Note the name of the text input field.",
      "sentence_number": 662,
      "word_count": 8
    },
    {
      "text": "We will use this to get the value of the\nfield from our Python code.",
      "sentence_number": 663,
      "word_count": 15
    },
    {
      "text": "So we've created the form.",
      "sentence_number": 664,
      "word_count": 5
    },
    {
      "text": "You need to go back to the app.py and render the\nnew template.",
      "sentence_number": 665,
      "word_count": 13
    },
    {
      "text": "Back-End\nFirst, add request to the imports in your app.py script.",
      "sentence_number": 666,
      "word_count": 11
    },
    {
      "text": "So the first line is like\nthis:\nfrom flask import Flask, redirect, url_for, render_template, request\nNow, add the new login.html in the login function block like this:\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nreturn render_template(\"login.html\")\nNow, we have rendered this template.",
      "sentence_number": 667,
      "word_count": 40
    },
    {
      "text": "We need to figure out how we'll get\nthis information and handle it from this side.",
      "sentence_number": 668,
      "word_count": 16
    },
    {
      "text": "You can test your new update\nby restarting the server in your console and going to the url/login.",
      "sentence_number": 669,
      "word_count": 18
    },
    {
      "text": "You should see a basic little box where we can type some things in, and we\nhave a submit button.",
      "sentence_number": 670,
      "word_count": 20
    },
    {
      "text": "However, when you hit that button, all you see is a hashtag here, and it's\ndifferent because it's using POST.",
      "sentence_number": 671,
      "word_count": 20
    },
    {
      "text": "If you refresh the page, you will get a GET\nrequest rather than a POST.",
      "sentence_number": 672,
      "word_count": 15
    },
    {
      "text": "The job of the request we imported is to determine in this login function\nwhether we called the GET request or the POST request.",
      "sentence_number": 673,
      "word_count": 24
    },
    {
      "text": "I will show you how\nwe can check whether we reach this page with a GET request or a POST\nrequest.",
      "sentence_number": 674,
      "word_count": 21
    },
    {
      "text": "Basically, all we're going to do is use an if-else clause.",
      "sentence_number": 675,
      "word_count": 11
    },
    {
      "text": "We say if\nrequest.method == POST, then we're going to do something specific.",
      "sentence_number": 676,
      "word_count": 13
    },
    {
      "text": "Otherwise, we'll do something else.",
      "sentence_number": 677,
      "word_count": 5
    },
    {
      "text": "In this case, what I'm going to do is move this render down here, so if we\nhave the get request, what we're going to do is render the log in template\nbecause that means you know we didn't click the submit button we're just\ngoing to the /login page so let's show it here but if we have POST what I want\nto do is actually get the information that was from that little name box and\nthen uses that and send us to the user page where we can display the user's\nname.",
      "sentence_number": 678,
      "word_count": 95
    },
    {
      "text": "So how do we do that?",
      "sentence_number": 679,
      "word_count": 6
    },
    {
      "text": "It's pretty easy, so all we need to do is set up a\nvariable that will store our users' names.",
      "sentence_number": 680,
      "word_count": 20
    },
    {
      "text": "We need to say user equals\nrequest.form, and then we will put the dictionary key that we want for the\nname corresponding.",
      "sentence_number": 681,
      "word_count": 22
    },
    {
      "text": "In the login.html script, we had name = nm, so we'll put\nnm as a dictionary key in the code.",
      "sentence_number": 682,
      "word_count": 20
    },
    {
      "text": "What that's going to do is actually give us\nthe data that was typed into this input box.",
      "sentence_number": 683,
      "word_count": 18
    },
    {
      "text": "def login():\nif request.method == \"POST\":\nuser = request.form[\"nm\"]\nreturn redirect(url_for(\"user\", usr=user))\nelse:\nreturn render_template(\"login.html\")\nWe are using the redirect(url_for) function to make sure that this page will\nnot be blank before we go to the next page.",
      "sentence_number": 684,
      "word_count": 38
    },
    {
      "text": "We are telling Flask to use the\ndata from the form to redirect us to the user page.",
      "sentence_number": 685,
      "word_count": 18
    },
    {
      "text": "Refresh your server and\ntest it out.",
      "sentence_number": 686,
      "word_count": 7
    },
    {
      "text": "After clicking submit:\nYou can see that we get redirected to a page that says our name.",
      "sentence_number": 687,
      "word_count": 17
    },
    {
      "text": "That is how we actually get information from a form, and obviously, if you\nhave more than one info you want, you just add it to the input type in the\nlogin.html script.",
      "sentence_number": 688,
      "word_count": 33
    },
    {
      "text": "Then you can get all those information by just using the\nname as a dictionary key on the request.form.",
      "sentence_number": 689,
      "word_count": 19
    },
    {
      "text": "Bootstrap forms\nIf you want to create a beautiful form, you can use Bootstrap.",
      "sentence_number": 690,
      "word_count": 14
    },
    {
      "text": "Just like we got\nthe code for the nav bar, you can get the code for a good form.",
      "sentence_number": 691,
      "word_count": 19
    },
    {
      "text": "{% extends \"base.html\" %}\n{% block title %}Login Page{% endblock %}\n{% block content %}\n<form action=\"#\" method=\"post\">\n<div class=\"mb-3\">\n<label class=\"form-label\" for=\"inputEmail\">Email</label>\n<input type=\"email\" class=\"form-control\" id=\"inputEmail\" placeholder=\"Email\">\n</div>\n<div class=\"mb-3\">\n<label class=\"form-label\" for=\"inputPassword\">Password</label>\n<input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Password\">\n</div>\n<div class=\"mb-3\">\n<div class=\"form-check\">\n<input class=\"form-check-input\" type=\"checkbox\" id=\"checkRemember\">\n<label class=\"form-check-label\" for=\"checkRemember\">Remember me</label>\n</div>\n</div>\n<button type=\"submit\" class=\"btn btn-primary\">Sign in</button>\n</form>\n{% endblock %}\nThis code is still built on the base template.",
      "sentence_number": 692,
      "word_count": 72
    },
    {
      "text": "You have learned the basics behind this.",
      "sentence_number": 693,
      "word_count": 7
    },
    {
      "text": "Notice that request.form comes in as\na dictionary, meaning you can access each object using the key.",
      "sentence_number": 694,
      "word_count": 17
    },
    {
      "text": "Most applications need to take information from the user through web forms,\nstore that information, and use it for the user experience.",
      "sentence_number": 695,
      "word_count": 22
    },
    {
      "text": "The next chapter is\nabout sessions and cookies in Flask.",
      "sentence_number": 696,
      "word_count": 10
    },
    {
      "text": "C 11 – S .",
      "sentence_number": 697,
      "word_count": 5
    },
    {
      "text": "C\nHAPTER ESSIONS VS OOKIES\nThis chapter is about sessions.",
      "sentence_number": 698,
      "word_count": 10
    },
    {
      "text": "Now to try to explain what sessions are, I'm\ngoing to give you an example of what we did in the previous chapter and talk\nabout how we could do this better.",
      "sentence_number": 699,
      "word_count": 32
    },
    {
      "text": "So essentially, we had a login page, and once we logged in, we got the user's\nname, and then we redirected them to a page that showed them their name.",
      "sentence_number": 700,
      "word_count": 30
    },
    {
      "text": "But every time we want to see the users' names, we need them to log in again\nand again.",
      "sentence_number": 701,
      "word_count": 19
    },
    {
      "text": "What if we want to direct to another page and that page wants the user's\nname?",
      "sentence_number": 702,
      "word_count": 16
    },
    {
      "text": "that means we have to set up a way to pass the user's name to that\npage.",
      "sentence_number": 703,
      "word_count": 17
    },
    {
      "text": "For example, if we want to set up a page for a specific user.",
      "sentence_number": 704,
      "word_count": 14
    },
    {
      "text": "That means\nwe have to use a parameter, set up another link, and so on.",
      "sentence_number": 705,
      "word_count": 15
    },
    {
      "text": "That is not the\nbest way to do things, and sometimes you know you don't want to redirect to\na page it says /Abby or /Jo.",
      "sentence_number": 706,
      "word_count": 26
    },
    {
      "text": "What we're going to do to pass around information through the back-end and\nour different web pages is use something called sessions.",
      "sentence_number": 707,
      "word_count": 22
    },
    {
      "text": "Sessions\nSessions are great because they're temporary.",
      "sentence_number": 708,
      "word_count": 7
    },
    {
      "text": "They're stored on the web\nserver and simply there to quickly access information between your website's\ndifferent pages.",
      "sentence_number": 709,
      "word_count": 18
    },
    {
      "text": "Think of a session as something you'll load to use while the\nuser is on your website.",
      "sentence_number": 710,
      "word_count": 17
    },
    {
      "text": "That session will work when they're browsing on the website, and then as\nsoon as they leave, it will disappear.",
      "sentence_number": 711,
      "word_count": 20
    },
    {
      "text": "For example, on Instagram or Facebook,\nwhen someone logs in, a new session will be created to store their username.",
      "sentence_number": 712,
      "word_count": 20
    },
    {
      "text": "Probably some other information as well about what they're doing on the\nwebsite at the current time, and then as they can go between different pages,\nthose pages can access that session data so it can say okay, so I moved to my\nprofile page this is the profile of Abby I know that because I stored that in a\nsession.",
      "sentence_number": 713,
      "word_count": 61
    },
    {
      "text": "So let's show all the information I have stored in the session that only\nAbby needs to see.",
      "sentence_number": 714,
      "word_count": 18
    },
    {
      "text": "Then, as soon as that user leaves the web page or logs out, all of that session\ndata is erased.",
      "sentence_number": 715,
      "word_count": 20
    },
    {
      "text": "And the next time they log in, data will be reloaded into the\nsession, where it can be used for the rest of the pages.",
      "sentence_number": 716,
      "word_count": 25
    },
    {
      "text": "Sessions or Cookies?",
      "sentence_number": 717,
      "word_count": 3
    },
    {
      "text": "Do you accept cookies?",
      "sentence_number": 718,
      "word_count": 4
    },
    {
      "text": "You may have seen this a lot.",
      "sentence_number": 719,
      "word_count": 7
    },
    {
      "text": "I just want to quickly\nexplain the difference between a cookie and a session to clear up any\nconfusion.",
      "sentence_number": 720,
      "word_count": 19
    },
    {
      "text": "Cookie: This feature is stored on the client side (in the user’s web browser)\nand is NOT a safe way to store sensitive information like passwords.",
      "sentence_number": 721,
      "word_count": 26
    },
    {
      "text": "It is\noften used to remember where a user left off on a page or their username so\nthat it will be filled in automatically the next time they visit the page.",
      "sentence_number": 722,
      "word_count": 32
    },
    {
      "text": "Session: This is saved in a temporary folder on the web server.",
      "sentence_number": 723,
      "word_count": 12
    },
    {
      "text": "It is encrypted\nand is a safe way to store information.",
      "sentence_number": 724,
      "word_count": 11
    },
    {
      "text": "Sessions are often used to store\ninformation that the user shouldn't be able to see or modify.",
      "sentence_number": 725,
      "word_count": 17
    },
    {
      "text": "How to set up a Session\nI want to do an example where the user logs in, we create a session for them\nthat stores the name, and then we can redirect to another page that doesn't\nhave this /user.",
      "sentence_number": 726,
      "word_count": 40
    },
    {
      "text": "In this basic example, a user logs in, and we will hold their username in a\nsession until they log out.",
      "sentence_number": 727,
      "word_count": 21
    },
    {
      "text": "Let us open our app.py and add session from flask and timedelta from\ndatetime to the first lines.",
      "sentence_number": 728,
      "word_count": 18
    },
    {
      "text": "from flask import Flask, redirect, url_for, render_template, request, session\nfrom datetime import timedelta\nWhen the user presses login or submit on that login page, we will set up\nsession data based on whatever information they typed in.",
      "sentence_number": 729,
      "word_count": 37
    },
    {
      "text": "I will paste the finished script up here and explain the process:\nfrom flask import Flask, redirect, url_for, render_template, request, session\nfrom datetime import timedelta\napp = Flask(__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\")\ndef user():\nif \"user\" in session:\nuser = session[\"user\"]\nreturn f\"<h1>{user}</h1>\"\nelse:\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nsession.pop(\"user\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nAfter importing session, the first and most important thing in sessions is the\ndata to set up.",
      "sentence_number": 730,
      "word_count": 112
    },
    {
      "text": "Under the login function, we set the session to the user = user.",
      "sentence_number": 731,
      "word_count": 13
    },
    {
      "text": "This is to set\nup some data for our session to store data as a dictionary just like we've seen\nthis requests.form.",
      "sentence_number": 732,
      "word_count": 22
    },
    {
      "text": "If I want to create a new piece of information in my\nsession, I can simply type the name of whatever I want that dictionary key to\nbe and then set it equal to some specific value.",
      "sentence_number": 733,
      "word_count": 37
    },
    {
      "text": "In this case, this is the user\nwho clicks Submit to the form.",
      "sentence_number": 734,
      "word_count": 13
    },
    {
      "text": "How do we get that information to use on another page?",
      "sentence_number": 735,
      "word_count": 11
    },
    {
      "text": "Next, I will change\nthe redirect to redirect to the user, but I'm not going to pass the user as an\nargument without passing any information from the user function.",
      "sentence_number": 736,
      "word_count": 30
    },
    {
      "text": "To do that, I need a conditional clause in the user function.",
      "sentence_number": 737,
      "word_count": 12
    },
    {
      "text": "This new\nstatement will first check if there's any information in the session before I\nreference the user's dictionary key.",
      "sentence_number": 738,
      "word_count": 20
    },
    {
      "text": "Technically, someone could just type\n/user and access the user page without being logged.",
      "sentence_number": 739,
      "word_count": 14
    },
    {
      "text": "That is as easy as it is to store and retrieve session data.",
      "sentence_number": 740,
      "word_count": 13
    },
    {
      "text": "Next, the else statement.",
      "sentence_number": 741,
      "word_count": 4
    },
    {
      "text": "This is what Flask will do if this session does not\nexist.",
      "sentence_number": 742,
      "word_count": 12
    },
    {
      "text": "If there is no user in my session, that means that the user has not logged\nin yet or has left the browser and needs to log in again.",
      "sentence_number": 743,
      "word_count": 29
    },
    {
      "text": "That is the job of the\nredirect line.",
      "sentence_number": 744,
      "word_count": 8
    },
    {
      "text": "Now, what does the secret key do?",
      "sentence_number": 745,
      "word_count": 7
    },
    {
      "text": "It is essentially the way that we decrypt\nand encrypt data.",
      "sentence_number": 746,
      "word_count": 11
    },
    {
      "text": "The line is usually typed at the beginning of the script as\napp.secretkey with any string you want.",
      "sentence_number": 747,
      "word_count": 18
    },
    {
      "text": "Session Data\nIf someone logs out, you probably want to delete all the information\nassociated with their session or at least some of that information.",
      "sentence_number": 748,
      "word_count": 25
    },
    {
      "text": "So you need\na new page for logout.",
      "sentence_number": 749,
      "word_count": 8
    },
    {
      "text": "The job of the session.pop() function is to remove some data from our\nsession.",
      "sentence_number": 750,
      "word_count": 14
    },
    {
      "text": "In the function, we pass in “user”, None.",
      "sentence_number": 751,
      "word_count": 8
    },
    {
      "text": "What this is going to do is\nactually remove the user data from my sessions.",
      "sentence_number": 752,
      "word_count": 15
    },
    {
      "text": "This is just how you remove\nit from the dictionary.",
      "sentence_number": 753,
      "word_count": 10
    },
    {
      "text": "Then this none is just a message that's associated with\nremoving that data.",
      "sentence_number": 754,
      "word_count": 13
    },
    {
      "text": "After that, we must return the user to the login page.",
      "sentence_number": 755,
      "word_count": 11
    },
    {
      "text": "So we'll say url_for\n(“login”).",
      "sentence_number": 756,
      "word_count": 5
    },
    {
      "text": "Session Duration\nRemember that as it stands, the session data is deleted when the user closes\nthe browser.",
      "sentence_number": 757,
      "word_count": 18
    },
    {
      "text": "That is why we need the permanent sessions.",
      "sentence_number": 758,
      "word_count": 8
    },
    {
      "text": "Now what I'm\ngoing to do to set up the permanent session here is define how long I want a\npermanent session to last.",
      "sentence_number": 759,
      "word_count": 24
    },
    {
      "text": "So you may have sometimes noticed you know you\nrevisit a website a few days later, and you just log in immediately.",
      "sentence_number": 760,
      "word_count": 22
    },
    {
      "text": "You don't\nactually have to, you know, go through the process, or maybe your\ninformation is already typed in, and you just hit login.",
      "sentence_number": 761,
      "word_count": 24
    },
    {
      "text": "We will store some of\nthis information in permanent sessions, which means keeping it longer.",
      "sentence_number": 762,
      "word_count": 15
    },
    {
      "text": "So\nthat every time you go back to that web page, you can quickly access\ninformation that you need, and you don't need to log back.",
      "sentence_number": 763,
      "word_count": 26
    },
    {
      "text": "C 12 – M F\nHAPTER ESSAGE LASHING\nIn this chapter, we will talk about flashing messages on the screen.",
      "sentence_number": 764,
      "word_count": 20
    },
    {
      "text": "Essentially, message flashing shows some kind of information from a\nprevious page on the next page when something happens on the GUI.",
      "sentence_number": 765,
      "word_count": 22
    },
    {
      "text": "For example, say I log in, it redirects me to another page and then maybe on\nthe top of that page, it says logged in successfully, login error, or if I log out,\nperhaps I'm going to get redirected to another page.",
      "sentence_number": 766,
      "word_count": 42
    },
    {
      "text": "Still, I want to show on\nthat other page that I logged out successfully, so I'll flash a message in a\nspecific part of that page so that the user has some idea of what they actually\ndid.",
      "sentence_number": 767,
      "word_count": 38
    },
    {
      "text": "This is to give them a little bit more interaction with the page.",
      "sentence_number": 768,
      "word_count": 13
    },
    {
      "text": "flash() Function\nInstead of thinking about changing the whole page or passing through some\nnew variables to show on the screen, you can just flash a message quickly\nwith a module called flash().",
      "sentence_number": 769,
      "word_count": 33
    },
    {
      "text": "All you need to do is to import flash.",
      "sentence_number": 770,
      "word_count": 9
    },
    {
      "text": "Then you can use this function to\ndisplay or kind of like post the messages that are to be flashed and then from\nthe different pages, we can decide where we want to flash those, and we'll do\nthat in a second.",
      "sentence_number": 771,
      "word_count": 42
    },
    {
      "text": "We will use the same app.py from the previous section because we will also\ndeal with sessions and log in.",
      "sentence_number": 772,
      "word_count": 20
    },
    {
      "text": "The simple syntax is\nflash(message, category)\nA basic example of when you might want to flash a message in our app.py\nscript is where a user logs out.",
      "sentence_number": 773,
      "word_count": 28
    },
    {
      "text": "When we log out, we go to a logout page that\npops our session and redirects us back to the login page.",
      "sentence_number": 774,
      "word_count": 22
    },
    {
      "text": "What if we can show\na “Logged out successful” message on that page so that they know there\nwasn't an error?",
      "sentence_number": 775,
      "word_count": 21
    },
    {
      "text": "First, import flash from flask.",
      "sentence_number": 776,
      "word_count": 5
    },
    {
      "text": "That means it goes in the first line.",
      "sentence_number": 777,
      "word_count": 8
    },
    {
      "text": "So go to the\nlogout function in the script and input the following line before the redirect\nline:\nflash(\"You Have Logged Out Successfully!\", \"info\")\nThe next parameter for this is the category, which is optional.",
      "sentence_number": 778,
      "word_count": 35
    },
    {
      "text": "Still, I'm going\nto put “info” as the category.",
      "sentence_number": 779,
      "word_count": 9
    },
    {
      "text": "One of the built-in categories includes a\nwarning, info, and error.",
      "sentence_number": 780,
      "word_count": 11
    },
    {
      "text": "Displaying Flash Message\nNow that we have written a message, we need to display the message from\nour different pages.",
      "sentence_number": 781,
      "word_count": 20
    },
    {
      "text": "So go to the login page, and inside the block content,\nwrite a templated code here to show all of the flashed messages that come up:\n{% extends \"base.html\" %}\n{% block title %}Login Page{% endblock %}\n{% block content %}\n{% with messages = get_flashed_messages() %}\n{% if messages %}\n{% for msg in messages %}\n<p>{{msg}}</p>\n{% endif %}\n{% endif %}\n{% endwith %}\n<form action=\"#\" method=\"post\">\n<p>Name:</p>\n<p><input type=\"text\" name=\"nm\" /></p>\n<p><input type=\"submit\" value=\"submit\" /></p>\n</form>\n{% endblock %}\nThe new thing in this is the with, which is just another Python syntax you can\nuse here.",
      "sentence_number": 782,
      "word_count": 101
    },
    {
      "text": "It says to check if there's any to display.",
      "sentence_number": 783,
      "word_count": 9
    },
    {
      "text": "We'll loop through them\nand show them.",
      "sentence_number": 784,
      "word_count": 7
    },
    {
      "text": "Notice that we can have more than one flash message, which means if we go\nbetween a few different pages, we'll show two or three flash messages on a\nspecific page.",
      "sentence_number": 785,
      "word_count": 31
    },
    {
      "text": "As you see, when I logged out, I saw the message.",
      "sentence_number": 786,
      "word_count": 11
    },
    {
      "text": "The problem we have now is that this message pops out whenever you type\n/log out, even if you had not been logged in before.",
      "sentence_number": 787,
      "word_count": 25
    },
    {
      "text": "In that case, we could\ncheck if we have a user in the session and only if we do will we say you've\nbeen logged out.",
      "sentence_number": 788,
      "word_count": 26
    },
    {
      "text": "What will we do?",
      "sentence_number": 789,
      "word_count": 4
    },
    {
      "text": "We will add an if statement to check if the user was in\nsession and then display their name and say they have been logged out.",
      "sentence_number": 790,
      "word_count": 26
    },
    {
      "text": "from flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\napp = Flask(__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\")\ndef user():\nif \"user\" in session:\nuser = session[\"user\"]\nreturn f\"<h1>{user}</h1>\"\nelse:\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nIf you run this, you will get the result:\nNot logged in, it displays this without the flash message.",
      "sentence_number": 791,
      "word_count": 117
    },
    {
      "text": "Displaying More Than 1 Message\nWe will change the app.py and create a new user.html file to do this example.",
      "sentence_number": 792,
      "word_count": 20
    },
    {
      "text": "Let's start by creating a new HTML file that we'll use to render the user page.",
      "sentence_number": 793,
      "word_count": 16
    },
    {
      "text": "With the app.py right now, we just have some h1 tags.",
      "sentence_number": 794,
      "word_count": 11
    },
    {
      "text": "Let us make\nsomething that looks a little bit nicer.",
      "sentence_number": 795,
      "word_count": 10
    },
    {
      "text": "{% extends \"base.html\" %}\n{% block title %}User{% endblock %}\n{% block content %}\n{% with messages = get_flashed_messages() %}\n{% if messages %}\n{% for message in messages %}\n<p>{{ msg }}</p>\n{% endfor %}\n{% endif %}\n{% endwith %}\n<h2>User Authenticated</h2>\n<p>Welcome, {{user}}</p>\n{% endblock %}\nNow, we go to the user function in the app.py file and render the new\ntemplate.",
      "sentence_number": 796,
      "word_count": 65
    },
    {
      "text": "We can also flash a new message after running the log-in function.",
      "sentence_number": 797,
      "word_count": 12
    },
    {
      "text": "We could\nalso flash “You are not logged in” when the person tries to enter the /user\npage from the url.",
      "sentence_number": 798,
      "word_count": 21
    },
    {
      "text": "from flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\napp = Flask(__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\")\ndef user():\nif \"user\" in session:\nuser = session[\"user\"]\nreturn render_template('user.html', user=user)\nelse:\nflash(\"You Are NOT Logged In!\")\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nNow, let us test it out:\nThat is the message flashing.",
      "sentence_number": 799,
      "word_count": 123
    },
    {
      "text": "In the next chapter, we'll get into the basic\ndatabase and discuss how to set up a scalable web server.",
      "sentence_number": 800,
      "word_count": 20
    },
    {
      "text": "C 13 – SQL A S & M\nHAPTER LCHEMY ET UP ODELS\nIn this chapter, what we're going to be doing is talking about databases and\nhow we can actually save user-specific information to the database.",
      "sentence_number": 801,
      "word_count": 37
    },
    {
      "text": "Application data is organized and kept in a database.",
      "sentence_number": 802,
      "word_count": 9
    },
    {
      "text": "When necessary, the\nprogram then issues queries to retrieve specific portions of the data.",
      "sentence_number": 803,
      "word_count": 14
    },
    {
      "text": "The\nmajority of online applications make use of relational model-based databases.",
      "sentence_number": 804,
      "word_count": 11
    },
    {
      "text": "Because they employ Structured Query Language, these databases are\nsometimes known as SQL databases.",
      "sentence_number": 805,
      "word_count": 14
    },
    {
      "text": "However, document-oriented and key-\nvalue databases, also known as NoSQL databases, have gained popularity as\nalternatives in recent years.",
      "sentence_number": 806,
      "word_count": 19
    },
    {
      "text": "A few database models will be made.",
      "sentence_number": 807,
      "word_count": 7
    },
    {
      "text": "A Flask add-on called Flask-SQLAlchemy makes it simpler to use\nSQLAlchemy in Flask programs.",
      "sentence_number": 808,
      "word_count": 14
    },
    {
      "text": "Strong relational database framework\nSQLAlchemy is compatible with a variety of database backends.",
      "sentence_number": 809,
      "word_count": 13
    },
    {
      "text": "It has both a\nhigh-level ORM and a low-level way to access the SQL features of the\ndatabase.",
      "sentence_number": 810,
      "word_count": 18
    },
    {
      "text": "Creating A Simple Profile Page\nWe want to collect few data from the user.",
      "sentence_number": 811,
      "word_count": 14
    },
    {
      "text": "When the user logs in, they're\nbrought to a page where they can modify some information about themselves.",
      "sentence_number": 812,
      "word_count": 18
    },
    {
      "text": "This is called CRUD (create-update-update-delete).",
      "sentence_number": 813,
      "word_count": 5
    },
    {
      "text": "Well, to keep things simple, we're just going to make that information an\nemail.",
      "sentence_number": 814,
      "word_count": 14
    },
    {
      "text": "In this program, we will create, and each user will upload an email.",
      "sentence_number": 815,
      "word_count": 13
    },
    {
      "text": "When they go there, they can change their email, they can update it, they can\ndelete the email, and we'll save that in a database and then the next time that\nthe user logs in, we'll look for that email, and we'll display it, and then they\ncan change it.",
      "sentence_number": 816,
      "word_count": 50
    },
    {
      "text": "This will give you an idea of how we have persistent\ninformation in CRUD programs in Flask.",
      "sentence_number": 817,
      "word_count": 17
    },
    {
      "text": "Database Management with Flask-SQL Alchemy\nWe will need to install it as an extension in our virtual environment.",
      "sentence_number": 818,
      "word_count": 18
    },
    {
      "text": "Stop\nyour server in the command prompt or terminal and do a pip install flask-\nSQLalchemy.",
      "sentence_number": 819,
      "word_count": 16
    },
    {
      "text": "pip install flask-sqlalchemy\nOnce done, open your app.py and import sqlachemy.",
      "sentence_number": 820,
      "word_count": 11
    },
    {
      "text": "Now we're just going to work on some of the front-end stuff for the website.",
      "sentence_number": 821,
      "word_count": 15
    },
    {
      "text": "So we will start by getting the form set up, grabbing some information from\nthe form with a post request and then we'll get into the database.",
      "sentence_number": 822,
      "word_count": 27
    },
    {
      "text": "The first step is the user.html file.",
      "sentence_number": 823,
      "word_count": 7
    },
    {
      "text": "{% extends \"base.html\" %}\n{% block title %}User{% endblock %}\n{% block content %}\n{% with messages = get_flashed_messages() %}\n{% if messages %}\n{% for message in messages %}\n<p>{{ msg }}</p>\n{% endfor %}\n{% endif %}\n{% endwith %}\n<form action=\"#\" method=\"POST\">\n<input type=\"email\" name=\"email\" placeholder=\"Enter Email\" value=\"{{email if email}}\" />\n<input type=\"submit\" value=\"submit\" />\n</form>\n{% endblock %}\nAnd look closely at the changes in the app.py file:\nfrom flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask (__name__)\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\", methods=[\"POST\", \"GET\"])\ndef user():\nemail = None\nif \"user\" in session:\nuser = session[\"user\"]\nif request.method ==\"POST\":\nemail = request.form[\"email\"]\nsession[\"email\"] = email\nelse:\nif \"email\" in session:\nemail = session[\"email\"]\nreturn render_template('user.html', email=email)\nelse:\nflash(\"You Are NOT Logged In!\")\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nsession.pop(\"email\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\napp.run(debug=True)\nThe result:\nI've actually made a change in the base template too.",
      "sentence_number": 824,
      "word_count": 225
    },
    {
      "text": "I've added this html\nthing that says div class equals container-fluid.",
      "sentence_number": 825,
      "word_count": 11
    },
    {
      "text": "It is a bootstrap class that\ncovers the entire web page.",
      "sentence_number": 826,
      "word_count": 11
    },
    {
      "text": "Here is the entire code:\n<!doctype html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\"\nintegrity=\"sha384-\nggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\ncrossorigin=\"anonymous\">\n<title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n<a class=\"navbar-brand\" href=\"#\">Navbar</a>\n<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\naria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n<span class=\"navbar-toggler-icon\"></span>\n</button>\n<div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n<ul class=\"navbar-nav\">\n<li class=\"nav-item active\">\n<a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"/login\">Login</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"/logout\">Logout</a>\n</li>\n</ul>\n</div>\n</nav>\n<h1>Abby's Website</h1>\n<div class=\"container-fluid\">\n{% block content %}\n{% endblock %}\n</div>\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\nintegrity=\"sha384-\nq8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js\"\nintegrity=\"sha384-\nUO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\ncrossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"\nintegrity=\"sha384-\nJjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\ncrossorigin=\"anonymous\"></script>\n</body>\n</html>\nI did with sessions to save the users email in a session, and then once we have\nit in a session, we can change the user page to have a method.",
      "sentence_number": 827,
      "word_count": 133
    },
    {
      "text": "That is the\nchange in the user function in the app.py file.",
      "sentence_number": 828,
      "word_count": 12
    },
    {
      "text": "Like our login page, you can\nsee the methods=”POST” and “GET”.",
      "sentence_number": 829,
      "word_count": 11
    },
    {
      "text": "I set up a bit of code to collect and save the email in the session.",
      "sentence_number": 830,
      "word_count": 16
    },
    {
      "text": "And we use\nthe if statement to check the current method.",
      "sentence_number": 831,
      "word_count": 11
    },
    {
      "text": "You can play around with the code and even show some message to the user\nto tell them that their email is saved.",
      "sentence_number": 832,
      "word_count": 23
    },
    {
      "text": "If you go to /login, you can see that it still has the email saved.",
      "sentence_number": 833,
      "word_count": 15
    },
    {
      "text": "If we close a\nweb browser as we did not use a permanent session, the data will go away\nand won't be saved.",
      "sentence_number": 834,
      "word_count": 23
    },
    {
      "text": "How to use database\nNow it's time to talk about databases.",
      "sentence_number": 835,
      "word_count": 11
    },
    {
      "text": "We've done great in saving data but\nhave not set up a database to collect it.",
      "sentence_number": 836,
      "word_count": 16
    },
    {
      "text": "The data is saved in the session.",
      "sentence_number": 837,
      "word_count": 7
    },
    {
      "text": "This\nmeans that the data will disappear once you close the browser or after 5 mins.",
      "sentence_number": 838,
      "word_count": 16
    },
    {
      "text": "To set up a database, you need to create a Flask application object for the\nproject and set the URI for the database to use.",
      "sentence_number": 839,
      "word_count": 25
    },
    {
      "text": "Add this line immediately\nafter the __name__\napp = Flask (__name__)\napp.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.sqlite3'\napp.config [\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\ndb = SQLAlchemy(app)\nWe use users because that's what we're going to use, and then again sqlite3.",
      "sentence_number": 840,
      "word_count": 42
    },
    {
      "text": "The second line shows that we're not tracking all the modifications to the\ndatabase.",
      "sentence_number": 841,
      "word_count": 14
    },
    {
      "text": "And the last line creates the database.",
      "sentence_number": 842,
      "word_count": 7
    },
    {
      "text": "Models\nNow, let us create models for the data we want to collect and save into the\ndatabase we have created.",
      "sentence_number": 843,
      "word_count": 21
    },
    {
      "text": "class students(db.Model):\n_id = db.Column('id', db.Integer, primary_key = True)\nname = db.Column(db.String(100))\nemail = db.Column(db.String(100))\nSo that you can understand how databases work, I will explain object relation\nmapping.",
      "sentence_number": 844,
      "word_count": 29
    },
    {
      "text": "Object Relation Mapping is used to identify and store objects.",
      "sentence_number": 845,
      "word_count": 10
    },
    {
      "text": "SQL\nis based on objects.",
      "sentence_number": 846,
      "word_count": 5
    },
    {
      "text": "The objects are referenced by tables like Ms Excel.",
      "sentence_number": 847,
      "word_count": 9
    },
    {
      "text": "Tables hold the information in the RDBMS server.",
      "sentence_number": 848,
      "word_count": 8
    },
    {
      "text": "A relational database\nmanagement system (RDBMS) is a group of programs experts use to create,\nupdate, administer and otherwise interact with a relational database like SQL.",
      "sentence_number": 849,
      "word_count": 26
    },
    {
      "text": "Object-relational mapping is a method for relating an RDBMS table's\nstructure to an object's parameters.",
      "sentence_number": 850,
      "word_count": 15
    },
    {
      "text": "SQLAlchemy helps you do CRUD\noperations without having to write SQL statements.",
      "sentence_number": 851,
      "word_count": 12
    },
    {
      "text": "You must set up the table, that is, what we want to represent.",
      "sentence_number": 852,
      "word_count": 13
    },
    {
      "text": "Any pieces of\ninformation can be stored in rows and columns in our database for each\nobject you want to collect.",
      "sentence_number": 853,
      "word_count": 21
    },
    {
      "text": "In this case, we want a single column, that is, the\nname and email of a user.",
      "sentence_number": 854,
      "word_count": 17
    },
    {
      "text": "The columns will represent pieces of information, and the rows will represent\nindividual items.",
      "sentence_number": 855,
      "word_count": 14
    },
    {
      "text": "We want to store users, and our users are going to have.",
      "sentence_number": 856,
      "word_count": 12
    },
    {
      "text": "In\nthis case, just a name and an email, and that's all we want to store.",
      "sentence_number": 857,
      "word_count": 16
    },
    {
      "text": "We define\na class to represent this user object in our database.",
      "sentence_number": 858,
      "word_count": 12
    },
    {
      "text": "That is why we call it\nusers.",
      "sentence_number": 859,
      "word_count": 7
    },
    {
      "text": "You can play around with the names if you want to store more than\nnames, emails, or different information.",
      "sentence_number": 860,
      "word_count": 19
    },
    {
      "text": "Every single object that we have in our database needs to have a unique\nidentification.",
      "sentence_number": 861,
      "word_count": 15
    },
    {
      "text": "That is why we set an _id class.",
      "sentence_number": 862,
      "word_count": 8
    },
    {
      "text": "The identification could be a\nstring, boolean or an integer.",
      "sentence_number": 863,
      "word_count": 10
    },
    {
      "text": "After selecting the db.column name, we set the\ninput type and the length or the maximum length of the string that we want to\nstore.",
      "sentence_number": 864,
      "word_count": 25
    },
    {
      "text": "In this case, we use 100 characters.",
      "sentence_number": 865,
      "word_count": 7
    },
    {
      "text": "Lastly, we will need to define the function that shows the database that we\nare collecting the data from the user.",
      "sentence_number": 866,
      "word_count": 21
    },
    {
      "text": "def __init__(self, name, email):\nself.name = name\nself.email = email\nThis __init__() method will take the variables we need to create a new object\nbecause technically, we can store some values here that will be None values.",
      "sentence_number": 867,
      "word_count": 37
    },
    {
      "text": "Some objects might not actually have a value for that property.",
      "sentence_number": 868,
      "word_count": 11
    },
    {
      "text": "For example,\nsay we have gender as an option, and now some people decide not to declare\nthat, and we want to leave that as none.",
      "sentence_number": 869,
      "word_count": 26
    },
    {
      "text": "The next thing to do is go to the bottom of the script to add something\ndb.create_all().",
      "sentence_number": 870,
      "word_count": 17
    },
    {
      "text": "This is a method to actually create this database if it doesn't\nalready exist in our program whenever we run this application.",
      "sentence_number": 871,
      "word_count": 22
    },
    {
      "text": "from flask import Flask, redirect, url_for, render_template, request, session, flash\nfrom datetime import timedelta\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask (__name__)\napp.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.sqlite3'\napp.config [\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.secret_key = \"hello\"\napp.permanent_session_lifetime = timedelta(minutes=5)\ndb = SQLAlchemy(app)\nclass students(db.Model):\n_id = db.Column('id', db.Integer, primary_key = True)\nname = db.Column(db.String(100))\nemail = db.Column(db.String(100))\ndef __init__(self, name, email):\nself.name = name\nself.email = email\n@app.route(\"/\")\ndef home():\nreturn render_template(\"index.html\")\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef login():\nif request.method == \"POST\":\nsession.permanent = True\nuser = request.form[\"nm\"]\nsession[\"user\"] = user\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nelse:\nif \"user\" in session:\nflash(\"You Are Logged In!\")\nreturn redirect(url_for(\"user\"))\nreturn render_template(\"login.html\")\n@app.route(\"/user\", methods=[\"POST\", \"GET\"])\ndef user():\nemail = None\nif \"user\" in session:\nuser = session[\"user\"]\nif request.method ==\"POST\":\nemail = request.form[\"email\"]\nsession[\"email\"] = email\nelse:\nif \"email\" in session:\nemail = session[\"email\"]\nreturn render_template('user.html', email=email)\nelse:\nflash(\"You Are NOT Logged In!\")\nreturn redirect(url_for(\"login\"))\n@app.route(\"/logout\")\ndef logout():\nif \"user\" in session:\nuser = session[\"user\"]\nflash(f\"{user}, You Have Logged Out Successfully!\", \"info\")\nsession.pop(\"user\", None)\nsession.pop(\"email\", None)\nreturn redirect(url_for(\"login\"))\nif __name__ == \"__main__\":\ndb.create_all()\napp.run(debug=True)\nC 14 - CRUD\nHAPTER\nNow, let us create a simple web app where users can create, update, delete\nand read posts.",
      "sentence_number": 872,
      "word_count": 200
    },
    {
      "text": "This is called a CRUD app.",
      "sentence_number": 873,
      "word_count": 6
    },
    {
      "text": "We will give our users the ability\nto store information about books.",
      "sentence_number": 874,
      "word_count": 12
    },
    {
      "text": "The database is SQLAlchemy and SQLite.",
      "sentence_number": 875,
      "word_count": 6
    },
    {
      "text": "The app we're making here isn't meant to be valid on its own.",
      "sentence_number": 876,
      "word_count": 13
    },
    {
      "text": "But once you\nknow how to write a simple web app that takes user input and stores it in a\ndatabase, you are well on your way to writing any web app you can think of.",
      "sentence_number": 877,
      "word_count": 36
    },
    {
      "text": "So, we'll keep the example application as simple as possible so you can focus\non the tools themselves instead of details about the application.",
      "sentence_number": 878,
      "word_count": 24
    },
    {
      "text": "You have learned how to set up and model a database.",
      "sentence_number": 879,
      "word_count": 11
    },
    {
      "text": "Now is time to watch\nit work and build web apps.",
      "sentence_number": 880,
      "word_count": 11
    },
    {
      "text": "The Flask Book Store\nFirst, we need to create a simple database.",
      "sentence_number": 881,
      "word_count": 12
    },
    {
      "text": "Then our app lets users to write\nbook titles and upload them as text.",
      "sentence_number": 882,
      "word_count": 14
    },
    {
      "text": "They can also read posts that they have\nadded, change or delete them.",
      "sentence_number": 883,
      "word_count": 13
    },
    {
      "text": "CRUD scripts are found in almost every web app out there.",
      "sentence_number": 884,
      "word_count": 11
    },
    {
      "text": "Whatever you\nwant to build, you'll need to get user input and store it (let your user create\ninformation), show that information back to your user (let your user read\ndata), find a way to fix old or wrong information (let your user update\ninformation), and get rid of information that isn't needed (let your user delete\ninformation) (allow users to delete information that was previously added).",
      "sentence_number": 885,
      "word_count": 67
    },
    {
      "text": "This will make more sense when we see how each CRUD operation works in\nour web application.",
      "sentence_number": 886,
      "word_count": 17
    },
    {
      "text": "Ensure that the following are installed:\nFlask\nSQLAlchemy\nFlask-SQLAlchemy\nYou can install everything with pip by running the following command:\npip3 install --user flask sqlalchemy flask-sqlalchemy\nRemember to install them in your virtual environment.",
      "sentence_number": 887,
      "word_count": 34
    },
    {
      "text": "Your static web page with Flask\nFlask is simple.",
      "sentence_number": 888,
      "word_count": 9
    },
    {
      "text": "That is one of its biggest selling points as a web framework.",
      "sentence_number": 889,
      "word_count": 12
    },
    {
      "text": "We can get a simple page running in only a few lines of code.",
      "sentence_number": 890,
      "word_count": 14
    },
    {
      "text": "Create a folder\nfor your project, create a file inside it called bookmanager.py or leave it as\napp.py.",
      "sentence_number": 891,
      "word_count": 18
    },
    {
      "text": "In this case, book is my virtual environment.",
      "sentence_number": 892,
      "word_count": 8
    },
    {
      "text": "You can create a basic page\nwith this code in your app.py:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef home():\nreturn \"This is an app\"\nif __name__ == \"__main__\":\napp.run(host='0.0.0.0', debug=True)\nHandling user input in our web application\nYou know the basics of how this works, but I will just go over it a bit.",
      "sentence_number": 893,
      "word_count": 57
    },
    {
      "text": "We\nhave a simple web app that doesn't do much now.",
      "sentence_number": 894,
      "word_count": 11
    },
    {
      "text": "We want to create an app\nto take the users' content.",
      "sentence_number": 895,
      "word_count": 11
    },
    {
      "text": "We'll do this by adding an HTML form that sends\ninformation from the front-end of our application (what our users see)\nthrough Flask and to the back-end (our Python code).",
      "sentence_number": 896,
      "word_count": 30
    },
    {
      "text": "In the Python code for our above application, we set up the string \"This is an\napp.\" This was fine because it was only one line, but as our front-end code\ngrows, defining everything in our Python file will become more complex.",
      "sentence_number": 897,
      "word_count": 42
    },
    {
      "text": "Flask lets you keep different things separate by using templates.",
      "sentence_number": 898,
      "word_count": 10
    },
    {
      "text": "Templates\nCreate an index.html file in your templates folder.",
      "sentence_number": 899,
      "word_count": 9
    },
    {
      "text": "This is the first template\nfor this project.",
      "sentence_number": 900,
      "word_count": 8
    },
    {
      "text": "You can fill it with the following code:\n<html>\n<body>\n<form method=\"POST\" action=\"/\">\n<input type=\"text\" name=\"book\">\n<input type=\"submit\" value=\"Add\">\n</form>\n</body>\n</html>\nThis is a simple HTML page that has:\nA text input that will link any text entered to the name \"book.\"\nA simple form\nA submit button with the word \"Add\" on it.",
      "sentence_number": 901,
      "word_count": 55
    },
    {
      "text": "A direction to send the data (\"post\") to our web application's main page (the /\nroute, which is the same page we set up in our app.py file).",
      "sentence_number": 902,
      "word_count": 28
    },
    {
      "text": "We need to make two changes to the app.py file to use our new template.",
      "sentence_number": 903,
      "word_count": 15
    },
    {
      "text": "Add render_template to the imports section, and replace “This is an app” with\nthe following:\nreturn render_template(\"home.html\")\nStart your server and check in your web browser:\nThis is a simple box where the user can type in text and click \"Add.\" Doing\nthis will send the text to the back-end of our app, and we'll all be on the same\npage.",
      "sentence_number": 904,
      "word_count": 61
    },
    {
      "text": "Before we can try it, our back-end code needs to be changed to handle\nthis new feature.",
      "sentence_number": 905,
      "word_count": 17
    },
    {
      "text": "Back-end\nA method=\"POST\" line in our index.html file says that the data in the form\nshould be sent using HTTP POST.",
      "sentence_number": 906,
      "word_count": 21
    },
    {
      "text": "We have learned that Flask routes only\naccept HTTP GET requests by default.",
      "sentence_number": 907,
      "word_count": 13
    },
    {
      "text": "What matters to us is that if we send\nin our form right now, we'll get an error message that says, \"Method not\nallowed.\" Because of this, we need to change our app.py file so that our web\napplication can handle POST requests.",
      "sentence_number": 908,
      "word_count": 43
    },
    {
      "text": "So import request and update your new home function to be like this:\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\nif request.form:\nprint(request.form)\nreturn render_template(\"index.html\")\nHere's what we did:\nWe changed our route decorator by adding methods=[\"GET\", \"POST\"]).",
      "sentence_number": 909,
      "word_count": 36
    },
    {
      "text": "This\nwill get rid of the \"Method not allowed\" error we got when we tried to send\nthe form before.",
      "sentence_number": 910,
      "word_count": 20
    },
    {
      "text": "By default, Flask lets all routes accept GET requests.",
      "sentence_number": 911,
      "word_count": 9
    },
    {
      "text": "Here,\nwe tell it to let both GET and POST requests.",
      "sentence_number": 912,
      "word_count": 11
    },
    {
      "text": "We use the if request.form to see if the form was just sent by someone.",
      "sentence_number": 913,
      "word_count": 15
    },
    {
      "text": "If\nthey did, we can use the request.form variable to get the information they sent\nin.",
      "sentence_number": 914,
      "word_count": 16
    },
    {
      "text": "We'll just print it out to make sure our form works.",
      "sentence_number": 915,
      "word_count": 11
    },
    {
      "text": "Restart your server and test the page now.",
      "sentence_number": 916,
      "word_count": 8
    },
    {
      "text": "Type anything into the box and\nclick \"Add.\" In the console, the string you typed should show up as output,\nlike in the picture below.",
      "sentence_number": 917,
      "word_count": 25
    },
    {
      "text": "Flask stores all of the form data in an ImmutableMultiDict, a fancy Python\ndictionary.",
      "sentence_number": 918,
      "word_count": 14
    },
    {
      "text": "It saved the user's input as a tuple typed into the form, and \"title\"\nis the name we gave it in the home.html template.",
      "sentence_number": 919,
      "word_count": 24
    },
    {
      "text": "You see the two items I added.",
      "sentence_number": 920,
      "word_count": 7
    },
    {
      "text": "You can play around with this with flash\nmessages or everything.",
      "sentence_number": 921,
      "word_count": 11
    },
    {
      "text": "This is only a sample to help open your creative\nmind.",
      "sentence_number": 922,
      "word_count": 11
    },
    {
      "text": "We are not there yet.",
      "sentence_number": 923,
      "word_count": 5
    },
    {
      "text": "Now that we know how to get user input and do\nsomething with it let's learn how to store it.",
      "sentence_number": 924,
      "word_count": 20
    },
    {
      "text": "Add a database\nTo help our Flask app remember our users' input, we need to add the items to\na database.",
      "sentence_number": 925,
      "word_count": 21
    },
    {
      "text": "We have learned how to set up and model a database in the last\nchapter.",
      "sentence_number": 926,
      "word_count": 15
    },
    {
      "text": "Let us do that now.",
      "sentence_number": 927,
      "word_count": 5
    },
    {
      "text": "import os\nfrom flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\nproject_dir = os.path.dirname(os.path.abspath(__file__))\ndatabase_file = \"sqlite:///{}\".format(os.path.join(project_dir, \"bookdatabase.db\"))\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_file\ndb = SQLAlchemy(app)\nOn line 1, we add an import for the os Python library.",
      "sentence_number": 928,
      "word_count": 40
    },
    {
      "text": "This lets us access\npaths on our file system relative to our project directory.",
      "sentence_number": 929,
      "word_count": 14
    },
    {
      "text": "In line 7, we import SQLAlchemy's Flask version (we had to install both\nFlask-SQLAlchemy and SQLAlchemy).",
      "sentence_number": 930,
      "word_count": 16
    },
    {
      "text": "We only import Flask-SQLAlchemy\nbecause it extends and depends on the SQLAlchemy base installation.",
      "sentence_number": 931,
      "word_count": 14
    },
    {
      "text": "In lines 9 and 10, we find out where our project is and set up a database file\nwith its full path and the sqlite:/ prefix to tell SQLAlchemy which database\nengine we are using.",
      "sentence_number": 932,
      "word_count": 35
    },
    {
      "text": "Next, we show our app where to store our database.",
      "sentence_number": 933,
      "word_count": 10
    },
    {
      "text": "Then, we set up a connection to the database and store it in the db variable.",
      "sentence_number": 934,
      "word_count": 16
    },
    {
      "text": "This is what we'll use to talk to our database.",
      "sentence_number": 935,
      "word_count": 10
    },
    {
      "text": "Lastly, we set up the database.",
      "sentence_number": 936,
      "word_count": 6
    },
    {
      "text": "This recap summarizes how to set up the SQLAlchemy database for your\nprogram.",
      "sentence_number": 937,
      "word_count": 13
    },
    {
      "text": "Now we can give the database what to store and how to store it in\nour database.",
      "sentence_number": 938,
      "word_count": 17
    },
    {
      "text": "For a real book store app, there are many details the user may need to post.",
      "sentence_number": 939,
      "word_count": 16
    },
    {
      "text": "The programmer would have to model a lot of information, like the book's\nauthor, title, number of pages, date, etc.",
      "sentence_number": 940,
      "word_count": 20
    },
    {
      "text": "For simplicity, we are only allowing\nusers to post titles.",
      "sentence_number": 941,
      "word_count": 10
    },
    {
      "text": "Add the code below to app.py.",
      "sentence_number": 942,
      "word_count": 6
    },
    {
      "text": "This is how each book will\nbe stored in our database.",
      "sentence_number": 943,
      "word_count": 11
    },
    {
      "text": "Make sure to add the code below the line db =\nSQLAlchemy(app) since we use db to define the book model.",
      "sentence_number": 944,
      "word_count": 21
    },
    {
      "text": "class Book(db.Model):\ntitle = db.Column(db.String(80), unique=True, nullable=False, primary_key=True)\ndef __repr__(self):\nreturn \"<Title: {}>\".format(self.title)\nFront-end\nWhen a user types in the name of a book, we can now make a Book object\nand store it in our database.",
      "sentence_number": 945,
      "word_count": 37
    },
    {
      "text": "To do this, update the home() function once more\nso that it looks like this.",
      "sentence_number": 946,
      "word_count": 15
    },
    {
      "text": "def home():\nif request.form:\nbook = Book(title=request.form.get(\"title\"))\ndb.session.add(book)\ndb.session.commit()\nreturn render_template(\"index.html\")\nWhen we get input, we no longer need to send it to the console.",
      "sentence_number": 947,
      "word_count": 25
    },
    {
      "text": "Instead, we\nmake a new Book object using our form's \"title\" field.",
      "sentence_number": 948,
      "word_count": 12
    },
    {
      "text": "We assign this new\nBook to the book variable.",
      "sentence_number": 949,
      "word_count": 9
    },
    {
      "text": "Then, we include the book into our database and save the modifications.",
      "sentence_number": 950,
      "word_count": 12
    },
    {
      "text": "This is the app.py:\nimport os\nfrom flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\nproject_dir = os.path.dirname(os.path.abspath(__file__))\ndatabase_file = \"sqlite:///{}\".format(os.path.join(project_dir, \"bookdatabase.db\"))\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_file\ndb = SQLAlchemy(app)\nclass Book(db.Model):\ntitle = db.Column(db.String(80), unique=True, nullable=False, primary_key=True)\ndef __repr__(self):\nreturn \"<Title: {}>\".format(self.title)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\nif request.form:\nbook = Book(title=request.form.get(\"title\"))\ndb.session.add(book)\ndb.session.commit()\nreturn render_template(\"index.html\")\nif __name__ == \"__main__\":\napp.run(host='0.0.0.0', debug=True)\nInitializing\nWhen we write codes like app.py, Python, Flask, or other frameworks need to\nrun the code every time we run the program.",
      "sentence_number": 951,
      "word_count": 88
    },
    {
      "text": "There is a way to run a setup\ncode that will be one-time only.",
      "sentence_number": 952,
      "word_count": 14
    },
    {
      "text": "Open a python shell.",
      "sentence_number": 953,
      "word_count": 4
    },
    {
      "text": "You can do this in your Terminal or command prompt\nby typing Python or Python3.",
      "sentence_number": 954,
      "word_count": 15
    },
    {
      "text": "This will open up the Shell.",
      "sentence_number": 955,
      "word_count": 6
    },
    {
      "text": "In the shell, run the\nfollowing 3 lines.",
      "sentence_number": 956,
      "word_count": 8
    },
    {
      "text": ">>> from app import db\n>>> db.create_all()\n>>> exit()\nYou may now return to your online application and add as many book titles\nas you like.",
      "sentence_number": 957,
      "word_count": 26
    },
    {
      "text": "Our CRUD application is complete, and we have reached the C\nstage, where we can generate new books.",
      "sentence_number": 958,
      "word_count": 18
    },
    {
      "text": "The next step is to restore our\nability to read them.",
      "sentence_number": 959,
      "word_count": 11
    },
    {
      "text": "Retrieving books from our database\nWe'd want to retrieve all the latest books from the database and show them to\nthe user every time they visit our web app.",
      "sentence_number": 960,
      "word_count": 29
    },
    {
      "text": "Using SQLAlchemy, we can\nquickly and easily store a Python variable with all the books in our database.",
      "sentence_number": 961,
      "word_count": 18
    },
    {
      "text": "Just before the end of the home() method, add a line to retrieve all of the\nbooks and change the final line so that the books are passed to our front-end\ntemplate.",
      "sentence_number": 962,
      "word_count": 32
    },
    {
      "text": "Home() should end with these two lines.",
      "sentence_number": 963,
      "word_count": 7
    },
    {
      "text": "books = Book.query.all()\nreturn render_template(\"index.html\", books=books)\nYou can currently render all the books in the home.html file using a Jinja for\nloop.",
      "sentence_number": 964,
      "word_count": 22
    },
    {
      "text": "While you're working on the file, feel free to add the headers we'll need\nfor the form and the list of books to appear.",
      "sentence_number": 965,
      "word_count": 24
    },
    {
      "text": "Here is the complete code for the\nindex.html page.",
      "sentence_number": 966,
      "word_count": 9
    },
    {
      "text": "<html>\n<body>\n<h1>Add book</h1>\n<form method=\"POST\" action=\"/\">\n<input type=\"text\" name=\"book\">\n<input type=\"submit\" value=\"Add\">\n</form>\n<h1>Books</h1>\n{% for book in books %}\n<p>{{book.title}}</p>\n{% endfor %}\n</body>\n</html>\nSimply save the file and refresh the program in your browser to see the\nchanges take effect.",
      "sentence_number": 967,
      "word_count": 44
    },
    {
      "text": "You should now see the books as you add them, as\nshown below.",
      "sentence_number": 968,
      "word_count": 13
    },
    {
      "text": "We have successfully finished the C and the R of our CRUD program.",
      "sentence_number": 969,
      "word_count": 13
    },
    {
      "text": "That\nis, our users can now Create and Read their content.",
      "sentence_number": 970,
      "word_count": 11
    },
    {
      "text": "Next, How can we\nupdate that Aby to a book title?",
      "sentence_number": 971,
      "word_count": 11
    },
    {
      "text": "Updating book titles\nNow, the last and probably the most complex part of the project is data\nupdates.",
      "sentence_number": 972,
      "word_count": 18
    },
    {
      "text": "We only present a representation of the data on our front end.",
      "sentence_number": 973,
      "word_count": 12
    },
    {
      "text": "As a result, the\nuser won't be able to alter anything.",
      "sentence_number": 974,
      "word_count": 11
    },
    {
      "text": "As an alternative, we request that you\nsend us a more recent title while we archive the earlier one.",
      "sentence_number": 975,
      "word_count": 19
    },
    {
      "text": "The newly\nupdated book can be found using the old title in our code, which will replace\nit with the one the user submitted.",
      "sentence_number": 976,
      "word_count": 24
    },
    {
      "text": "We'll create each title in its own distinct form because it's unlikely that the\nuser will want to manually enter both the old and new titles.",
      "sentence_number": 977,
      "word_count": 26
    },
    {
      "text": "The previous\ntitle will be available to us when the user gives the revised one.",
      "sentence_number": 978,
      "word_count": 15
    },
    {
      "text": "We will use a\nhidden HTML input to get the previous title without having it appear in the\nuser interface.",
      "sentence_number": 979,
      "word_count": 20
    },
    {
      "text": "Change the for loop in our home.html file to the following:\n{% for book in books %}\n<p>{{book.title}}</p>\n<form method=\"POST\" action=\"./update\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"oldtitle\">\n<input type=\"text\" value=\"{{book.title}}\" name=\"newtitle\">\n<input type=\"submit\" value=\"Update\">\n</form>\n{% endfor %}\nThe form is similar to the previous form that we used to add new books.",
      "sentence_number": 980,
      "word_count": 51
    },
    {
      "text": "Here\nare a few critical updates:\nWe first need to direct this form's data submission to the /update app route,\nnot the home page.",
      "sentence_number": 981,
      "word_count": 24
    },
    {
      "text": "Since we have not created a decorator for it, we must do\nthat in our app.py file.",
      "sentence_number": 982,
      "word_count": 17
    },
    {
      "text": "We use a secret input on line 4 to provide the \"old\" title of the book.",
      "sentence_number": 983,
      "word_count": 16
    },
    {
      "text": "This\narea will automatically be filled from the program database.",
      "sentence_number": 984,
      "word_count": 10
    },
    {
      "text": "So the user will\nsee it.",
      "sentence_number": 985,
      "word_count": 6
    },
    {
      "text": "Open your app.py file and add a redirect to the imports list.",
      "sentence_number": 986,
      "word_count": 12
    },
    {
      "text": "Now add the new route decorator for /update with the following block:\n@app.route(\"/update\", methods=[\"POST\"])\ndef update():\nnewtitle = request.form.get(\"newtitle\")\noldtitle = request.form.get(\"oldtitle\")\nbook = Book.query.filter_by(title=oldtitle).first()\nbook.title = newtitle\ndb.session.commit()\nreturn redirect(\"/\")\nIf you refresh the application page in your browser, you should see something\nthat looks like the image below.",
      "sentence_number": 987,
      "word_count": 50
    },
    {
      "text": "It is possible to alter the titles of already-\ncreated books by editing the corresponding input field and clicking the\n\"Update\" button.",
      "sentence_number": 988,
      "word_count": 22
    },
    {
      "text": "After updating:\nWell done.",
      "sentence_number": 989,
      "word_count": 4
    },
    {
      "text": "You have seen how we handle the CRU with Flask.",
      "sentence_number": 990,
      "word_count": 10
    },
    {
      "text": "Now, let us\ngive the user the power to Delete books that they no longer want to see.",
      "sentence_number": 991,
      "word_count": 18
    },
    {
      "text": "Deleting books from our database\nThis feature is not completely different from how we created the Update\nfeature.",
      "sentence_number": 992,
      "word_count": 18
    },
    {
      "text": "In this case, we don’t need to call the old title.",
      "sentence_number": 993,
      "word_count": 11
    },
    {
      "text": "Open the index.html\nfile and create another form with the for loop.",
      "sentence_number": 994,
      "word_count": 12
    },
    {
      "text": "<form method=\"POST\" action=\"./delete\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"title\">\n<input type=\"submit\" value=\"Delete\">\n</form>\nNext, add a new app route decorator in the app.py for the /delete route and\ncreate the function.",
      "sentence_number": 995,
      "word_count": 29
    },
    {
      "text": "After deleting:\nWe have created a Flask app that handles CRUD operations like magic!",
      "sentence_number": 996,
      "word_count": 14
    },
    {
      "text": "This\nis the basics.",
      "sentence_number": 997,
      "word_count": 4
    },
    {
      "text": "You can use this to create a standard app anyhow you want by\nplaying around with the code and Bootstrap.",
      "sentence_number": 998,
      "word_count": 20
    },
    {
      "text": "These are the working codes:\napp.py:\nimport os\nfrom flask import Flask, render_template, request, redirect\nfrom flask_sqlalchemy import SQLAlchemy\nproject_dir = os.path.dirname(os.path.abspath(__file__))\ndatabase_file = \"sqlite:///{}\".format(os.path.join(project_dir, \"bookdatabase.db\"))\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_file\ndb = SQLAlchemy(app)\nclass Book(db.Model):\ntitle = db.Column(db.String(80), unique=True, nullable=False, primary_key=True)\ndef __repr__(self):\nreturn \"<Title: {}>\".format(self.title)\n@app.route('/', methods=[\"GET\", \"POST\"])\ndef home():\nbooks = None\nif request.form:\ntry:\nbook = Book(title=request.form.get(\"title\"))\ndb.session.add(book)\ndb.session.commit()\nexcept Exception as e:\nprint(\"Failed to add book\")\nprint(e)\nbooks = Book.query.all()\nreturn render_template(\"index.html\", books=books)\n@app.route(\"/update\", methods=[\"POST\"])\ndef update():\ntry:\nnewtitle = request.form.get(\"newtitle\")\noldtitle = request.form.get(\"oldtitle\")\nbook = Book.query.filter_by(title=oldtitle).first()\nbook.title = newtitle\ndb.session.commit()\nexcept Exception as e:\nprint(\"Error in updating title\")\nprint(e)\nreturn redirect(\"/\")\n@app.route(\"/delete\", methods=[\"POST\"])\ndef delete():\ntitle = request.form.get(\"title\")\nbook = Book.query.filter_by(title=title).first()\ndb.session.delete(book)\ndb.session.commit()\nreturn redirect(\"/\")\nif __name__ == \"__main__\":\napp.run(host='0.0.0.0', debug=True)\nOur index.html will look like this:\n<html>\n<body>\n<h1>Add book</h1>\n<form method=\"POST\" action=\"/\">\n<input type=\"text\" name=\"title\">\n<input type=\"submit\" value=\"Add\">\n</form>\n<h1>Books</h1>\n<table>\n{% for book in books %}\n<tr>\n<td>\n{{book.title}}\n</td>\n<td>\n<form method=\"POST\" action=\"./update\" style=\"display: inline\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"oldtitle\">\n<input type=\"text\" value=\"{{book.title}}\" name=\"newtitle\">\n<input type=\"submit\" value=\"Update\">\n</form>\n</td>\n<td>\n<form method=\"POST\" action=\"./delete\" style=\"display: inline\">\n<input type=\"hidden\" value=\"{{book.title}}\" name=\"title\">\n<input type=\"submit\" value=\"Delete\">\n</form>\n</td>\n</tr>\n{% endfor %}\n</table>\n</body>\n</html>\nThe new code now has error handling codes.",
      "sentence_number": 999,
      "word_count": 209
    },
    {
      "text": "When we first learnt about databases, I stated that each object must be\ndistinct.",
      "sentence_number": 1000,
      "word_count": 14
    },
    {
      "text": "If we try to add a book with the same title twice or change the title of\nan existing book to one that already exists, an error will occur.",
      "sentence_number": 1001,
      "word_count": 29
    },
    {
      "text": "The revised\ncode will have a try: except: block around the home() and update() blocks.",
      "sentence_number": 1002,
      "word_count": 15
    },
    {
      "text": "C 15 – D\nHAPTER EPLOYMENT\nAt long last, our app is ready for release.",
      "sentence_number": 1003,
      "word_count": 15
    },
    {
      "text": "The deployment has begun.",
      "sentence_number": 1004,
      "word_count": 4
    },
    {
      "text": "There\nare a lot of factors to consider, which can make this procedure tedious.",
      "sentence_number": 1005,
      "word_count": 14
    },
    {
      "text": "When\nit comes to our production stack, there are also many options to consider.",
      "sentence_number": 1006,
      "word_count": 14
    },
    {
      "text": "In\nthis section, we'll go over a few key components and the various\ncustomization paths available to us for each of them.",
      "sentence_number": 1007,
      "word_count": 22
    },
    {
      "text": "Web Hosting\nSince the beginning of this tutorial, you have been using your local server,\nwhich only you can access.",
      "sentence_number": 1008,
      "word_count": 20
    },
    {
      "text": "You need a server that is accessible to everyone.",
      "sentence_number": 1009,
      "word_count": 9
    },
    {
      "text": "There are thousands of service providers that give this, but I use and\nrecommend the three below.",
      "sentence_number": 1010,
      "word_count": 17
    },
    {
      "text": "The specifics of getting started with them are\noutside the scope of this book.",
      "sentence_number": 1011,
      "word_count": 14
    },
    {
      "text": "Therefore I won't be covering them here.",
      "sentence_number": 1012,
      "word_count": 7
    },
    {
      "text": "Instead, I'll focus on why they're a good choice for Flask app hosting.",
      "sentence_number": 1013,
      "word_count": 13
    },
    {
      "text": "Amazon Web Services EC2\nAmazon Web Services (AWS) is the most common option for new\nbusinesses, so you may have heard of them.",
      "sentence_number": 1014,
      "word_count": 23
    },
    {
      "text": "I am talking about the Amazon\nElastic Compute Cloud (EC2) for your Flask app.",
      "sentence_number": 1015,
      "word_count": 14
    },
    {
      "text": "The main selling feature of\nEC2 is the speed with which new virtual computers, or \"instances\" in AWS\nlingo, may be created.",
      "sentence_number": 1016,
      "word_count": 22
    },
    {
      "text": "Adding more EC2 instances to our app and placing\nthem behind a load balancer allows us to swiftly expand it to meet demand\n(we can even use the AWS Elastic Load Balancer).",
      "sentence_number": 1017,
      "word_count": 32
    },
    {
      "text": "For Flask, AWS is equivalent to any other form of the virtual server.",
      "sentence_number": 1018,
      "word_count": 13
    },
    {
      "text": "In a\nmatter of minutes, we can have it running our preferred Linux distribution,\ncomplete with our Flask app and server stack.",
      "sentence_number": 1019,
      "word_count": 22
    },
    {
      "text": "However, this necessitates that\nwe have some expertise in systems management.",
      "sentence_number": 1020,
      "word_count": 11
    },
    {
      "text": "Heroku\nHeroku is a platform for hosting applications developed on top of existing\nAWS capabilities, such as Elastic Compute Cloud (EC2).",
      "sentence_number": 1021,
      "word_count": 21
    },
    {
      "text": "As a result, we\ncould enjoy EC2's benefits without learning the ins and outs of systems\nadministration.",
      "sentence_number": 1022,
      "word_count": 17
    },
    {
      "text": "When using Heroku, we simply push our application's source code repository\nto their server through git.",
      "sentence_number": 1023,
      "word_count": 16
    },
    {
      "text": "This is handy when we don't feel like logging into\na server through SSH, configuring the software, and thinking out a sensible\ndeployment strategy.",
      "sentence_number": 1024,
      "word_count": 24
    },
    {
      "text": "These luxuries don't come cheap, but both AWS and\nHeroku provide some levels of service at no cost to the user.",
      "sentence_number": 1025,
      "word_count": 21
    },
    {
      "text": "Digital Ocean\nIn recent years, Digital Ocean has emerged as a serious alternative to\nAmazon Web Services EC2.",
      "sentence_number": 1026,
      "word_count": 18
    },
    {
      "text": "In the same way that EC2 allows us to easily\ncreate virtual servers, Digital Ocean will enable us to create what they call\ndroplets.",
      "sentence_number": 1027,
      "word_count": 24
    },
    {
      "text": "In contrast to the lower tiers of EC2, all droplets use solid-state\ndrives.",
      "sentence_number": 1028,
      "word_count": 13
    },
    {
      "text": "The most appealing feature for me is the interface's superior\nsimplicity and ease of use compared to the AWS control panel.",
      "sentence_number": 1029,
      "word_count": 21
    },
    {
      "text": "If you're\nlooking for a hosting service, I highly recommend Digital Ocean.",
      "sentence_number": 1030,
      "word_count": 12
    },
    {
      "text": "Using Flask for deployment on Digital Ocean is similar to using EC2.",
      "sentence_number": 1031,
      "word_count": 12
    },
    {
      "text": "We're\ngoing to install our server stack on a new Linux distribution.",
      "sentence_number": 1032,
      "word_count": 12
    },
    {
      "text": "Requirements for deployment\nThis section will discuss the software that must be installed on the server\nbefore we can begin to host our Flask application.",
      "sentence_number": 1033,
      "word_count": 25
    },
    {
      "text": "As a case study, I will use\nHeroku as our deployment server.",
      "sentence_number": 1034,
      "word_count": 12
    },
    {
      "text": "What do you need to deploy to Heroku?",
      "sentence_number": 1035,
      "word_count": 8
    },
    {
      "text": "Before Heroku accepts to deploy your app, you need to add two files to your\nproject folder and install the app runner called Gunicorn:\nYou must create a requirements.txt file to specify your app's dependencies\nand a special Heroku file called Procfile.",
      "sentence_number": 1036,
      "word_count": 42
    },
    {
      "text": "Gunicorn\nIt is easy to get this by installing with pip:\npip install gunicorn\nAfter that, use the following command to create the requirements.txt file.",
      "sentence_number": 1037,
      "word_count": 25
    },
    {
      "text": "pip freeze > requirements.txt\nYour app's dependencies will be determined mechanically by pip and\ndumped into requirements.txt.",
      "sentence_number": 1038,
      "word_count": 17
    },
    {
      "text": "In the end, Heroku will look to the Procfile to determine how to launch our\napplication.",
      "sentence_number": 1039,
      "word_count": 16
    },
    {
      "text": "It will be instructed to use the gunicorn web server instead of the\nlocal development server.",
      "sentence_number": 1040,
      "word_count": 16
    },
    {
      "text": "Create a file named Procfile and save it in the project's root folder with the\nfollowing contents:\nweb: gunicorn app:app\nReplace the first “app” with the name of the module or file for your main\nflask file and the second “app” with the name of your flask app.",
      "sentence_number": 1041,
      "word_count": 48
    },
    {
      "text": "My app’s module name is app because the script is in the file app.py, and the\nother is the app name also app because that’s the name of my script in the\nfile.",
      "sentence_number": 1042,
      "word_count": 33
    },
    {
      "text": "Once you have the requirements.txt and Procfile in your root folder, you can\ndeploy!",
      "sentence_number": 1043,
      "word_count": 14
    },
    {
      "text": "Deploy!",
      "sentence_number": 1044,
      "word_count": 1
    },
    {
      "text": "While there are a number of options for getting your app up and running on\nHeroku, git is by far the most straightforward.",
      "sentence_number": 1045,
      "word_count": 23
    },
    {
      "text": "Set up Git\nA git repository should have been created for your project's directory; all that\nremains is to make a commit of all of your code.",
      "sentence_number": 1046,
      "word_count": 27
    },
    {
      "text": "Now run git init to initialize\ngit for your code.",
      "sentence_number": 1047,
      "word_count": 10
    },
    {
      "text": "git init\ngit add .",
      "sentence_number": 1048,
      "word_count": 5
    },
    {
      "text": "git commit -m “initial commit”\nThese three commands will configure and commit your script so that Heroku\nknows that you are ready for deployment.",
      "sentence_number": 1049,
      "word_count": 24
    },
    {
      "text": "Push your Site\nFinally, use the following command to push your program up for production\ninto the Heroku environment:\nType heroku create in your terminal and wait for a few minutes.",
      "sentence_number": 1050,
      "word_count": 31
    },
    {
      "text": "Then run the\nfollowing line:\ngit push heroku main\nIt may take a few seconds to push your code.",
      "sentence_number": 1051,
      "word_count": 19
    },
    {
      "text": "That command takes your code\nto the Heroku server.",
      "sentence_number": 1052,
      "word_count": 9
    },
    {
      "text": "Now is time to switch from SQLAlchemy models to the\nnew PostgreSQL database that Heroku understands.",
      "sentence_number": 1053,
      "word_count": 16
    },
    {
      "text": "Type python in your\ncommand line to open the shell and run the following commands:\n>>> from app import db\n>>> db.create_all()\nWhen you type exit(), you will close the shell.",
      "sentence_number": 1054,
      "word_count": 31
    },
    {
      "text": "To test your web app, type\nheroku open.",
      "sentence_number": 1055,
      "word_count": 8
    },
    {
      "text": "It will take you to a free domain name with your code running\nin production.",
      "sentence_number": 1056,
      "word_count": 15
    },
    {
      "text": "P 2 D\nART JANGO\nC 1 - I G S\nHAPTER NSTALLING TO ET TARTED\nAlright, so in this one, we will create a new virtual environment and install\nDjango.",
      "sentence_number": 1057,
      "word_count": 31
    },
    {
      "text": "Django is essentially a Python code.",
      "sentence_number": 1058,
      "word_count": 6
    },
    {
      "text": "That means Python must be\ninstalled before installing Django.",
      "sentence_number": 1059,
      "word_count": 9
    },
    {
      "text": "This chapter explains how to configure Windows or macOS for Django\nprojects.",
      "sentence_number": 1060,
      "word_count": 12
    },
    {
      "text": "Developers use the Command Line to install and configure Django\nprojects.",
      "sentence_number": 1061,
      "word_count": 11
    },
    {
      "text": "This chapter shows you how to set up your Windows or macOS computer\ncorrectly so you can work on Django projects.",
      "sentence_number": 1062,
      "word_count": 21
    },
    {
      "text": "We start by giving an\noverview of the Command Line, powerful text-only interface developers use\nto install and set up Django projects.",
      "sentence_number": 1063,
      "word_count": 22
    },
    {
      "text": "Then we install the most recent version\nof Python, learn how to set up virtual environments that are only used for one\nthing, and install Django.",
      "sentence_number": 1064,
      "word_count": 26
    },
    {
      "text": "As the last step, we'll look at how to use Git for\nversion control and a text editor.",
      "sentence_number": 1065,
      "word_count": 18
    },
    {
      "text": "By the end of this chapter, you will have set\nup a Django project from scratch.",
      "sentence_number": 1066,
      "word_count": 16
    },
    {
      "text": "Introducing the Command Line\nThe command line is that blank screen you see in hacker movies where they\ntype matrices.",
      "sentence_number": 1067,
      "word_count": 20
    },
    {
      "text": "It is how coders and software developers interact with the\ncomputer while most people use a mouse or finger.",
      "sentence_number": 1068,
      "word_count": 19
    },
    {
      "text": "We use it to run\nprograms, install software, and connect to cloud servers.",
      "sentence_number": 1069,
      "word_count": 13
    },
    {
      "text": "Most developers\nfind that the command line is a faster and more powerful way to move around\nand control a computer after a bit of practice.",
      "sentence_number": 1070,
      "word_count": 26
    },
    {
      "text": "The command line is scary for people who have never used it because it only\nhas a blank screen and a blinking cursor.",
      "sentence_number": 1071,
      "word_count": 23
    },
    {
      "text": "After a command has run, you often\ndon't get any feedback.",
      "sentence_number": 1072,
      "word_count": 11
    },
    {
      "text": "You can wipe an entire computer with a single\ncommand without a warning if you're not careful.",
      "sentence_number": 1073,
      "word_count": 17
    },
    {
      "text": "Because of this, the\ncommand line should only be used with care.",
      "sentence_number": 1074,
      "word_count": 12
    },
    {
      "text": "Make sure not to just copy and\npaste commands you find online.",
      "sentence_number": 1075,
      "word_count": 12
    },
    {
      "text": "If you don't fully understand a command,\nonly use trusted sources.",
      "sentence_number": 1076,
      "word_count": 11
    },
    {
      "text": "In real life, the command line is also called the console, terminal, shell,\nprompt, or Command Line Interface (CLI).",
      "sentence_number": 1077,
      "word_count": 19
    },
    {
      "text": "Technically, the terminal is the\nprogram that opens a new window to access the command line.",
      "sentence_number": 1078,
      "word_count": 16
    },
    {
      "text": "A console is a text-based application; a shell is a program that runs\ncommands on the underlying operating system; a prompt is where you type\ncommands and run.",
      "sentence_number": 1079,
      "word_count": 28
    },
    {
      "text": "Are there terms confusing?",
      "sentence_number": 1080,
      "word_count": 4
    },
    {
      "text": "Haha.",
      "sentence_number": 1081,
      "word_count": 1
    },
    {
      "text": "They all mean the same thing: the\ncommand line is where we run and execute text-only commands on our\ncomputer.",
      "sentence_number": 1082,
      "word_count": 20
    },
    {
      "text": "PowerShell is the name of both the built-in terminal and shell on Windows.",
      "sentence_number": 1083,
      "word_count": 13
    },
    {
      "text": "To get to it, press the Windows button and type \"PowerShell\" to open the\napp.",
      "sentence_number": 1084,
      "word_count": 15
    },
    {
      "text": "After the > prompt, it will open a new window with a dark blue\nbackground and a blinking cursor.",
      "sentence_number": 1085,
      "word_count": 19
    },
    {
      "text": "On my computer, it looks like this.",
      "sentence_number": 1086,
      "word_count": 7
    },
    {
      "text": "Before the prompt is PS, which stands for PowerShell.",
      "sentence_number": 1087,
      "word_count": 9
    },
    {
      "text": "Then comes the\nWindows operating system's initial C directory, followed by the Users\ndirectory and the current user, SYSTEM32, on my computer.",
      "sentence_number": 1088,
      "word_count": 22
    },
    {
      "text": "Your username\nwill be different, of course.",
      "sentence_number": 1089,
      "word_count": 7
    },
    {
      "text": "Don't worry about what's to the left of the >\nprompt right now.",
      "sentence_number": 1090,
      "word_count": 13
    },
    {
      "text": "It will be different on each computer and can be changed\nlater.",
      "sentence_number": 1091,
      "word_count": 12
    },
    {
      "text": "From now on, Windows will use the shorter prompt >.",
      "sentence_number": 1092,
      "word_count": 10
    },
    {
      "text": "The built-in terminal on macOS is called Terminal, as it should be.",
      "sentence_number": 1093,
      "word_count": 12
    },
    {
      "text": "You can\nopen it with Spotlight by pressing the Command key and the space bar at the\nsame time, then typing \"terminal.\" You can also open a new Finder window,\ngo to the Applications directory, scroll down to the Utilities folder, and\ndouble-click the Terminal application.",
      "sentence_number": 1094,
      "word_count": 46
    },
    {
      "text": "After the \"%\" prompt, it opens a new\nscreen with a white background and a blinking cursor.",
      "sentence_number": 1095,
      "word_count": 17
    },
    {
      "text": "Don't worry about\nwhat comes after the percent sign.",
      "sentence_number": 1096,
      "word_count": 9
    },
    {
      "text": "It's different for each computer and can be\nchanged in the future.",
      "sentence_number": 1097,
      "word_count": 12
    },
    {
      "text": "If your macOS prompt is $ instead of %, then Bash is used as the shell.",
      "sentence_number": 1098,
      "word_count": 16
    },
    {
      "text": "The\ndefault shell for macOS changed from Bash to zsh in 2019.",
      "sentence_number": 1099,
      "word_count": 12
    },
    {
      "text": "Most of the\ncommands in this book can be used with either Bash or zsh.",
      "sentence_number": 1100,
      "word_count": 15
    },
    {
      "text": "If your computer\nstill uses Bash, you should look online to learn how to switch to zsh through\nSystem Preferences.",
      "sentence_number": 1101,
      "word_count": 20
    },
    {
      "text": "Shell Commands\nThere are a lot of shell commands, but most developers use the same few\nover and over and look up more complicated ones when they need them.",
      "sentence_number": 1102,
      "word_count": 29
    },
    {
      "text": "Most of the time, the commands for macOS and Windows (PowerShell) are\nthe same.",
      "sentence_number": 1103,
      "word_count": 14
    },
    {
      "text": "On Windows, the whoami command shows the computer name and\nuser name.",
      "sentence_number": 1104,
      "word_count": 12
    },
    {
      "text": "On macOS, it only shows the user name.",
      "sentence_number": 1105,
      "word_count": 8
    },
    {
      "text": "Type the command and\npress the return key as with any other shell command.",
      "sentence_number": 1106,
      "word_count": 14
    },
    {
      "text": "But sometimes, the shell commands on Windows and macOS are very\ndifferent from each other.",
      "sentence_number": 1107,
      "word_count": 15
    },
    {
      "text": "One good example is the primary \"Hello, World!\"\ncommand.",
      "sentence_number": 1108,
      "word_count": 9
    },
    {
      "text": "\" message to the terminal.",
      "sentence_number": 1109,
      "word_count": 5
    },
    {
      "text": "On Windows, the command is called\nWrite-Host, and on macOS, it is called echo.",
      "sentence_number": 1110,
      "word_count": 14
    },
    {
      "text": "Using the computer's filesystem is a task that is often done at the command\nline.",
      "sentence_number": 1111,
      "word_count": 15
    },
    {
      "text": "The default shell should show the current location on Windows, but Get-\nLocation can also be used to do this.",
      "sentence_number": 1112,
      "word_count": 20
    },
    {
      "text": "Use pwd on Mac OS (print working\ndirectory).",
      "sentence_number": 1113,
      "word_count": 8
    },
    {
      "text": "You can save your Django code wherever you want, but for ease of use, we'll\nput ours in the desktop directory.",
      "sentence_number": 1114,
      "word_count": 21
    },
    {
      "text": "Both systems can use the command cd\nfollowed by the location you want to go to.",
      "sentence_number": 1115,
      "word_count": 16
    },
    {
      "text": "cd OneDrive\\Desktop\nOR\n% cd desktop\nOn macOS\nYou can use the command mkdir to create a new folder.",
      "sentence_number": 1116,
      "word_count": 19
    },
    {
      "text": "We want to create a\nfolder called script on the Desktop.",
      "sentence_number": 1117,
      "word_count": 11
    },
    {
      "text": "We will keep another folder inside it\ncalled ch1-setup.",
      "sentence_number": 1118,
      "word_count": 9
    },
    {
      "text": "Now here is the command line to do all of these:\n> mkdir code\n> cd code\n> mkdir ch1-setup\n> cd ch1-setup\nPress enter after each line, and you will get something like this:\nI love to believe that you have installed Python on your computer.",
      "sentence_number": 1119,
      "word_count": 47
    },
    {
      "text": "If you\nhaven’t, please head on to Python’s official website and install Python.",
      "sentence_number": 1120,
      "word_count": 13
    },
    {
      "text": "You\nwill find the latest version of Python on the official website.",
      "sentence_number": 1121,
      "word_count": 12
    },
    {
      "text": "After installing\nPython, you have to set up your system for Django.",
      "sentence_number": 1122,
      "word_count": 12
    },
    {
      "text": "To verify that you have Python installed on your Windows or Mac system,\nopen your command prompt and type in the following code:\nPython --version\nOnce you press Enter, the version of Python you have installed on your\ncomputer will show.",
      "sentence_number": 1123,
      "word_count": 41
    },
    {
      "text": "If it doesn’t, go ahead and install Python.",
      "sentence_number": 1124,
      "word_count": 8
    },
    {
      "text": "Once you have verified the installation of Python, you can now install\nDjango.",
      "sentence_number": 1125,
      "word_count": 13
    },
    {
      "text": "Virtual Environments\nDjango's purpose is now clear to you.",
      "sentence_number": 1126,
      "word_count": 9
    },
    {
      "text": "One of the most common issues with\nDjango is that a project built in one version may not be compatible with one\ncreated in another.",
      "sentence_number": 1127,
      "word_count": 25
    },
    {
      "text": "You may run into issues if you upgrade from a version of\nDjango 1.5x to Django 1.6x.",
      "sentence_number": 1128,
      "word_count": 17
    },
    {
      "text": "Installing the latest versions of Python and Django is the right way to start a\nnew project.",
      "sentence_number": 1129,
      "word_count": 17
    },
    {
      "text": "Let’s say you created a project last year and used older versions\nof Python and Django.",
      "sentence_number": 1130,
      "word_count": 16
    },
    {
      "text": "Now, this year you want to use Django 4.0.",
      "sentence_number": 1131,
      "word_count": 9
    },
    {
      "text": "You may\nhave to reinstall the version you used in creating that project at the time to\nopen it.",
      "sentence_number": 1132,
      "word_count": 19
    },
    {
      "text": "Python and Django are installed globally on a computer by default, making it\na pain to install and reinstall different versions whenever you want to switch\nbetween projects.",
      "sentence_number": 1133,
      "word_count": 28
    },
    {
      "text": "This problem can be easily solved if you use Django's version across all your\nprojects.",
      "sentence_number": 1134,
      "word_count": 15
    },
    {
      "text": "That is why creating a virtual environment with its own set of\ninstallation folders is essential.",
      "sentence_number": 1135,
      "word_count": 16
    },
    {
      "text": "You can easily create and manage separate settings for each Python project\non the same computer using virtual environments.",
      "sentence_number": 1136,
      "word_count": 19
    },
    {
      "text": "Otherwise, any changes\nyou make to one website in Django will affect all the others.",
      "sentence_number": 1137,
      "word_count": 15
    },
    {
      "text": "There are many ways to set up virtual environments, but the easiest is to use\nthe venv module, which comes with Python 3 as part of the standard library.",
      "sentence_number": 1138,
      "word_count": 29
    },
    {
      "text": "To try it out, go to the ch1-setup directory that is already on your Desktop.",
      "sentence_number": 1139,
      "word_count": 15
    },
    {
      "text": "cd onedrive\\desktop\\code\\ch1-setup\nUse the following command line to create a virtual environment\npython -m venv <name of env>\non Windows or\npython3 -m venv <name of env>\non macOS\nIt is up to the developer to choose a good name for the environment, but\n.venv is a common choice.",
      "sentence_number": 1140,
      "word_count": 49
    },
    {
      "text": "After that, if you are on Windows, type in the following:\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\nAfter creating a virtual environment, we need to turn it on.",
      "sentence_number": 1141,
      "word_count": 27
    },
    {
      "text": "For scripts to run\non Windows, we must set an Execution Policy for safety reasons.",
      "sentence_number": 1142,
      "word_count": 15
    },
    {
      "text": "The Python\ndocumentation says that scripts should only be run by the CurrentUser, and\nthat is what that second line does.",
      "sentence_number": 1143,
      "word_count": 21
    },
    {
      "text": "On macOS, scripts are not limited in the\nsame way, so you can run source.venv/bin/activate immediately.",
      "sentence_number": 1144,
      "word_count": 16
    },
    {
      "text": ".venv\\Scripts\\Activate.ps1\nFor Mac users:\nsource.venv/bin/activate\nAs you can see in that screenshot, the environment name (.venv) is now\nadded to the shell prompt.",
      "sentence_number": 1145,
      "word_count": 23
    },
    {
      "text": "That shows that the virtual environment is\nactivated.",
      "sentence_number": 1146,
      "word_count": 8
    },
    {
      "text": "Any Python packages that are installed or updated in this location\nwill only work in the active virtual environment.",
      "sentence_number": 1147,
      "word_count": 19
    },
    {
      "text": "Now we can install Django.",
      "sentence_number": 1148,
      "word_count": 5
    },
    {
      "text": "Installing Django\nNow, with the virtual environment active, we can install Django with this\nsimple command line:\npy -m pip install Django\nThat line will download and install the latest Django release.",
      "sentence_number": 1149,
      "word_count": 32
    },
    {
      "text": "Please consult the Django official website here if you have any issues\ninstalling Django.",
      "sentence_number": 1150,
      "word_count": 14
    },
    {
      "text": "Setup your Virtual Environment for Django on\nmacOS/Linux\nNow, I want you to have a new virtual environment and a fresh Django\ninstall, not only just to get the practice of it but also to make sure that we're\nall starting from the exact same spot.",
      "sentence_number": 1151,
      "word_count": 46
    },
    {
      "text": "So if you open up your terminal\nwindow, or if you're on Windows, your PowerShell, or command prompt.",
      "sentence_number": 1152,
      "word_count": 18
    },
    {
      "text": "So if we type out Python -V in the Terminal, you will get the version of\nPython you have on your Mac or Linux computer.",
      "sentence_number": 1153,
      "word_count": 25
    },
    {
      "text": "If you don’t have Python 3\ninstalled, go to the official Python website to get it on your MacOs.",
      "sentence_number": 1154,
      "word_count": 19
    },
    {
      "text": "Now, we need the Virtual Environment.",
      "sentence_number": 1155,
      "word_count": 6
    },
    {
      "text": "Introducing…\nInstalling Pipenv Globally\nNow the first thing you need to get your installation of Django to work on all\nprojects is to install a virtual environment.",
      "sentence_number": 1156,
      "word_count": 27
    },
    {
      "text": "The best way to do this on Mac is\nby installing pipenv.",
      "sentence_number": 1157,
      "word_count": 12
    },
    {
      "text": "First, open Terminal and upgrade pip with the following command line:\n```\npython3 -m pip install pip --upgrade\n```\nThis will upgrade whatever pip version is in your system.",
      "sentence_number": 1158,
      "word_count": 29
    },
    {
      "text": "After this, you can\ninstall pipenv to use Django:\n```\npython3.8 -m pip install pipenv\n```\nThis will essentially install the virtual environment.",
      "sentence_number": 1159,
      "word_count": 23
    },
    {
      "text": "You can verify it by\nusing the following line:\nNow, you can install Django with a single line:\n$ python -m pip install Django\nYour First Blank Django Project\nThe way to create a blank website on Django is to first get the name of the\nsite and then type in the following command:\ndjango-admin startproject mysite .",
      "sentence_number": 1160,
      "word_count": 58
    },
    {
      "text": "Where mysite is the name of your project.",
      "sentence_number": 1161,
      "word_count": 8
    },
    {
      "text": "You can use almost any name, but\nwe will use mydjango in this book.",
      "sentence_number": 1162,
      "word_count": 14
    },
    {
      "text": "This is what the command line loos like:\n(.venv) PS C:\\Users\\Jde\\OneDrive\\Desktop\\script\\ch1-setup> django-admin startproject mydjango .",
      "sentence_number": 1163,
      "word_count": 15
    },
    {
      "text": "Now, let's ensure everything is working by running the runserver command\nto run Django's internal web server.",
      "sentence_number": 1164,
      "word_count": 17
    },
    {
      "text": "This is good for developing locally, but\nwhen it's time to put our projects online, we'll switch to a more robust WSGI\nserver like Gunicorn.",
      "sentence_number": 1165,
      "word_count": 25
    },
    {
      "text": "Type in the following command:\npython manage.py runserver\nIf you do this, you have successfully created a website.",
      "sentence_number": 1166,
      "word_count": 18
    },
    {
      "text": "Check now by\nopening your web browser and typing the following in the URL\nhttp://127.0.0.1:8000/.",
      "sentence_number": 1167,
      "word_count": 15
    },
    {
      "text": "You should see the following:\nWell done!",
      "sentence_number": 1168,
      "word_count": 7
    },
    {
      "text": "You have successfully created your first Django project on a local\nserver.",
      "sentence_number": 1169,
      "word_count": 12
    },
    {
      "text": "Stop the local server by typing the correct command.",
      "sentence_number": 1170,
      "word_count": 9
    },
    {
      "text": "Then, leave the\nvirtual environment by pressing \"deactivate\" and pressing Enter.",
      "sentence_number": 1171,
      "word_count": 11
    },
    {
      "text": "See you in the next chapter, where we will create a website with some words.",
      "sentence_number": 1172,
      "word_count": 15
    },
    {
      "text": "This book will give us a lot of practice with virtual environments, so don't\nworry if it seems complicated right now.",
      "sentence_number": 1173,
      "word_count": 21
    },
    {
      "text": "Every new Django project follows\nthe same basic steps: make and turn on a virtual environment, install Django,\nand run startproject.",
      "sentence_number": 1174,
      "word_count": 21
    },
    {
      "text": "It's important to remember that a command line tab can only have one virtual\nenvironment open at a time.",
      "sentence_number": 1175,
      "word_count": 19
    },
    {
      "text": "In later chapters, we'll make a new virtual\nenvironment for each new project, so when you start a new project, make\nsure your current virtual environment is turned off or open a new tab.",
      "sentence_number": 1176,
      "word_count": 34
    },
    {
      "text": "Introducing Text Editors\nYou have met command lines.",
      "sentence_number": 1177,
      "word_count": 8
    },
    {
      "text": "That is where we run commands for our\nprograms, but expert developers write code in a text editor.",
      "sentence_number": 1178,
      "word_count": 18
    },
    {
      "text": "There are many\ndifferent text editors you can use.",
      "sentence_number": 1179,
      "word_count": 9
    },
    {
      "text": "The computer doesn't care what text editor\nyou use because the end result is just code, but a good text editor can give\nyou helpful tips and catch typos for you.",
      "sentence_number": 1180,
      "word_count": 31
    },
    {
      "text": "There are many modern text editors, but Visual Studio Code is very popular\nbecause it is free, easy to install, and used by many people.",
      "sentence_number": 1181,
      "word_count": 25
    },
    {
      "text": "If you don't\nalready have a text editor, you can get VSCode from the website and install\nit.",
      "sentence_number": 1182,
      "word_count": 18
    },
    {
      "text": "Setting Up Django on VS Code\nWe will set up our Django project on VS Code or Visual Studio Code.",
      "sentence_number": 1183,
      "word_count": 20
    },
    {
      "text": "If you\ndon’t have that app, go to code.visualstudio.com and download the version\nfor your machine.",
      "sentence_number": 1184,
      "word_count": 16
    },
    {
      "text": "It is free and cross-platform.",
      "sentence_number": 1185,
      "word_count": 5
    },
    {
      "text": "It also has a vast community\nof people or developers that build all sorts of great things for it.",
      "sentence_number": 1186,
      "word_count": 19
    },
    {
      "text": "Note that this is not the same as Visual Studio.",
      "sentence_number": 1187,
      "word_count": 10
    },
    {
      "text": "Visual Studio is a different\nkind of text editor.",
      "sentence_number": 1188,
      "word_count": 9
    },
    {
      "text": "There are other types of text editors like Sublime Text and\nPycharm, but Visual Studio Code or VS Code is my favorite.",
      "sentence_number": 1189,
      "word_count": 22
    },
    {
      "text": "Open up VS code, and we will start our new project.",
      "sentence_number": 1190,
      "word_count": 11
    },
    {
      "text": "So you're going to see a\nwelcome screen.",
      "sentence_number": 1191,
      "word_count": 8
    },
    {
      "text": "You will need to install a couple of extensions in VSCode.",
      "sentence_number": 1192,
      "word_count": 11
    },
    {
      "text": "Go to the Extensions tab.",
      "sentence_number": 1193,
      "word_count": 5
    },
    {
      "text": "Search Python and install the first result with the\nhighest number of downloads.",
      "sentence_number": 1194,
      "word_count": 13
    },
    {
      "text": "After that, you need to install Black.",
      "sentence_number": 1195,
      "word_count": 7
    },
    {
      "text": "To do\nthis, go to Terminal, and click on New Terminal.",
      "sentence_number": 1196,
      "word_count": 11
    },
    {
      "text": "From there, type in the\nfollowing command:\npython -m pip install black\nNext, go to File > Preferences > Settings on Windows or Code > Preferences\n> Settings on macOS to open the VSCode settings.",
      "sentence_number": 1197,
      "word_count": 35
    },
    {
      "text": "Look for \"python\nformatting provider\" and then choose \"black\" from the list.",
      "sentence_number": 1198,
      "word_count": 12
    },
    {
      "text": "Then look for\n\"format on save\" and make sure \"Editor: Format on Save\" is turned on.",
      "sentence_number": 1199,
      "word_count": 16
    },
    {
      "text": "Every\ntime you save a .py file, Black will now format your code for you.",
      "sentence_number": 1200,
      "word_count": 15
    },
    {
      "text": "Go to the Explorer tab to confirm that Black and Python are working.",
      "sentence_number": 1201,
      "word_count": 13
    },
    {
      "text": "Find\nDesktop, and open your ch1-setup folder.",
      "sentence_number": 1202,
      "word_count": 7
    },
    {
      "text": "Create a new file and name it\nhello.py.",
      "sentence_number": 1203,
      "word_count": 8
    },
    {
      "text": "On the new page, type in the following using single quotes:\nprint('Hello, World!')\nPress CTRL + S to save and see if the single quotes change to double.",
      "sentence_number": 1204,
      "word_count": 28
    },
    {
      "text": "If it\nchanges, that is Black working.",
      "sentence_number": 1205,
      "word_count": 7
    },
    {
      "text": "Lastly, Git\nThe last step is to install Git, which is a version control system that modern\nsoftware development can't do without.",
      "sentence_number": 1206,
      "word_count": 22
    },
    {
      "text": "Git lets you work with other\ndevelopers, keep track of all your work through \"commits,\" and go back to\nany version of your code, even if you accidentally delete something\nimportant.",
      "sentence_number": 1207,
      "word_count": 31
    },
    {
      "text": "On Windows, go to https://git-scm.com/, which is the official site, and click\non \"Download.\" This should install the correct version for your computer.",
      "sentence_number": 1208,
      "word_count": 23
    },
    {
      "text": "Save the file, then go to your Downloads folder and double-click on the file.",
      "sentence_number": 1209,
      "word_count": 14
    },
    {
      "text": "This will start the installer for Git on Windows.",
      "sentence_number": 1210,
      "word_count": 9
    },
    {
      "text": "Click \"Next\" through most of\nthe early defaults, which are fine and can be changed later if necessary.",
      "sentence_number": 1211,
      "word_count": 18
    },
    {
      "text": "There\nare two exceptions, though.",
      "sentence_number": 1212,
      "word_count": 5
    },
    {
      "text": "Under \"Choosing the default editor used by Git,\"\nchoose VS Code instead of Vim.",
      "sentence_number": 1213,
      "word_count": 14
    },
    {
      "text": "And in the section called \"Changing the\nname of the initial branch in new repositories,\" select the option to use\n\"main\" as the default branch name instead of \"master.\" If not, the suggested\ndefaults are fine; you can always change them later if necessary.",
      "sentence_number": 1214,
      "word_count": 44
    },
    {
      "text": "To ensure that Git is installed on Windows, close all shell windows and open\na new one.",
      "sentence_number": 1215,
      "word_count": 17
    },
    {
      "text": "This will load the changes to our PATH variable.",
      "sentence_number": 1216,
      "word_count": 9
    },
    {
      "text": "Then type the\nfollowing\ngit –version\nThis will show the version you have installed.",
      "sentence_number": 1217,
      "word_count": 14
    },
    {
      "text": "For MacOs, you can install Git with XCode.",
      "sentence_number": 1218,
      "word_count": 8
    },
    {
      "text": "First, open your Terminal.",
      "sentence_number": 1219,
      "word_count": 4
    },
    {
      "text": "Type\nthe following:\ngit –version\nThere should be a message that git is not found, and there will be a\nsuggestion to install it.",
      "sentence_number": 1220,
      "word_count": 24
    },
    {
      "text": "Or you could just type in xcode-select –install to\ninstall it directly.",
      "sentence_number": 1221,
      "word_count": 12
    },
    {
      "text": "Once installed, you need to set it up and register a new account, and you are\ngood to go!",
      "sentence_number": 1222,
      "word_count": 19
    },
    {
      "text": "C 2 - C Y F D\nHAPTER REATE OUR IRST JANGO\nP\nROJECT\nIn this chapter, we'll build a Django website.",
      "sentence_number": 1223,
      "word_count": 22
    },
    {
      "text": "Our website will have a simple\nhomepage that says, \"Welcome to my website.\" Let’s get started.",
      "sentence_number": 1224,
      "word_count": 16
    },
    {
      "text": "Setup\nTo start, fire up a new command prompt window or use VS Code's in-built\nterminal.",
      "sentence_number": 1225,
      "word_count": 16
    },
    {
      "text": "The latter can be accessed by selecting \"Terminal\" from the menu\nbar and \"New Terminal\" from the drop-down menu.",
      "sentence_number": 1226,
      "word_count": 19
    },
    {
      "text": "Verify that you are not in a preexisting virtual environment by ensuring that\nthe command prompt does not have any parentheses.",
      "sentence_number": 1227,
      "word_count": 21
    },
    {
      "text": "To be sure, type\n\"deactivate,\" and you'll be turned off.",
      "sentence_number": 1228,
      "word_count": 10
    },
    {
      "text": "You can then use the following\ncommands in the code directory on your Desktop to make a helloworld folder\nfor our new website.",
      "sentence_number": 1229,
      "word_count": 23
    },
    {
      "text": "As you can see in the above screenshot, there is the first code to call in the\nfolder we have created in the previous chapter called scripts, and we made\nanother folder within it called helloworld.",
      "sentence_number": 1230,
      "word_count": 36
    },
    {
      "text": "Then we activated our virtual\nenvironment and installed the version of Django we wanted to use for this\nproject.",
      "sentence_number": 1231,
      "word_count": 19
    },
    {
      "text": "From here, you should remember the Django startproject command.",
      "sentence_number": 1232,
      "word_count": 9
    },
    {
      "text": "This\ncommand will create a new Django project.",
      "sentence_number": 1233,
      "word_count": 8
    },
    {
      "text": "Let us call our new project\nfirst_website.",
      "sentence_number": 1234,
      "word_count": 7
    },
    {
      "text": "Include the space + full stop ( .",
      "sentence_number": 1235,
      "word_count": 8
    },
    {
      "text": ") at the end of the command so\nthat the program will be installed in the current folder.",
      "sentence_number": 1236,
      "word_count": 18
    },
    {
      "text": "The most important thing for a web developer is the project structure.",
      "sentence_number": 1237,
      "word_count": 12
    },
    {
      "text": "You\nneed an organized space and directories for all your projects and programs.",
      "sentence_number": 1238,
      "word_count": 13
    },
    {
      "text": "Django will automatically set up a project structure for us in this script.",
      "sentence_number": 1239,
      "word_count": 13
    },
    {
      "text": "If you\nwant to see what it looks like, you can open the new folder on your Desktop.",
      "sentence_number": 1240,
      "word_count": 18
    },
    {
      "text": "The Ch1-setup is the folder from chapter 1.",
      "sentence_number": 1241,
      "word_count": 8
    },
    {
      "text": "We don’t need that now.",
      "sentence_number": 1242,
      "word_count": 5
    },
    {
      "text": "However, you can see that the .venv folder was created with our virtual\nenvironment.",
      "sentence_number": 1243,
      "word_count": 14
    },
    {
      "text": "Django added the first_website folder and python file.",
      "sentence_number": 1244,
      "word_count": 8
    },
    {
      "text": "If you\nopen the first_website folder, you will find 5 new files:\n__init__.py shows that the folder's files are part of a Python package.",
      "sentence_number": 1245,
      "word_count": 24
    },
    {
      "text": "We\ncan't install files from another folder without this file, which we will do a lot\nin Django.",
      "sentence_number": 1246,
      "word_count": 18
    },
    {
      "text": "asgi.py offers the option of running an Asynchronous Server Gateway\nInterface.",
      "sentence_number": 1247,
      "word_count": 11
    },
    {
      "text": "settings.py manages the settings of our Django project.",
      "sentence_number": 1248,
      "word_count": 8
    },
    {
      "text": "urls.py tells Django what pages to make when a browser or URL asks for\nthem.",
      "sentence_number": 1249,
      "word_count": 15
    },
    {
      "text": "wsgi.py stands for Web Server Gateway Interface.",
      "sentence_number": 1250,
      "word_count": 7
    },
    {
      "text": "WSGI helps Django serve\nour web pages.",
      "sentence_number": 1251,
      "word_count": 7
    },
    {
      "text": "The manage.py file is not a core component of the Django project, but it is\nused to run Django commands like starting the local web server or making a\nnew app.",
      "sentence_number": 1252,
      "word_count": 31
    },
    {
      "text": "Let's test our project using the light web server with Django for local\ndevelopment.",
      "sentence_number": 1253,
      "word_count": 14
    },
    {
      "text": "The runserver command will be used.",
      "sentence_number": 1254,
      "word_count": 6
    },
    {
      "text": "It can be found in the file\nmanage.py.",
      "sentence_number": 1255,
      "word_count": 8
    },
    {
      "text": "Type in this command:\npython manage.py runserver\nOnce that runs, you can test your server by going to this with your web\nbrowser: http://127.0.0.1:8000/\nYou may see the error in the above screenshot too.",
      "sentence_number": 1256,
      "word_count": 34
    },
    {
      "text": "Don’t fret.",
      "sentence_number": 1257,
      "word_count": 2
    },
    {
      "text": "That is Django\ntelling you that we haven't made any changes to our existing database (i.e.,\n\"migrated\") yet.",
      "sentence_number": 1258,
      "word_count": 18
    },
    {
      "text": "This warning is harmless because we won't use a database in\nthis chapter.",
      "sentence_number": 1259,
      "word_count": 13
    },
    {
      "text": "But if you want to stop the annoying warning, you can get rid of it by\npressing Control + c to stop the local server and then running the following\ncommand line:\npython manage.py migrate.",
      "sentence_number": 1260,
      "word_count": 35
    },
    {
      "text": "Django has migrated its pre-installed apps to a new SQLite database.",
      "sentence_number": 1261,
      "word_count": 11
    },
    {
      "text": "The\nequivalent file in our folder is called db.sqlite3.",
      "sentence_number": 1262,
      "word_count": 9
    },
    {
      "text": "Warnings should now be gone if you rerun python manage.py runserver.",
      "sentence_number": 1263,
      "word_count": 11
    },
    {
      "text": "Let us learn a few concepts you need to know before building our first\nDjango app together.",
      "sentence_number": 1264,
      "word_count": 17
    },
    {
      "text": "HTTP Request/Response Cycle\nA network protocol is a set of rules for formatting and processing data.",
      "sentence_number": 1265,
      "word_count": 16
    },
    {
      "text": "It's\nlike a common language for computers that lets them talk to each other even\nif they are on opposite sides of the world and have very different hardware\nand software.",
      "sentence_number": 1266,
      "word_count": 31
    },
    {
      "text": "HTTP is a protocol that works with a client-server model of computing.",
      "sentence_number": 1267,
      "word_count": 12
    },
    {
      "text": "When you go to a website, your computer, or \"client,\" sends a \"request,\" and\na \"server\" sends back a \"response.\" The client doesn't have to be a computer,\nthough.",
      "sentence_number": 1268,
      "word_count": 29
    },
    {
      "text": "It could be a cell phone or any other device that can connect to the\ninternet.",
      "sentence_number": 1269,
      "word_count": 16
    },
    {
      "text": "But the process is the same: a client sends an HTTP request to a\nURL, and the server sends an HTTP response back.",
      "sentence_number": 1270,
      "word_count": 23
    },
    {
      "text": "In the end, a web framework like Django takes HTTP requests to a given\nURL and sends back an HTTP response with the information needed to\nrender a webpage.",
      "sentence_number": 1271,
      "word_count": 29
    },
    {
      "text": "All done.",
      "sentence_number": 1272,
      "word_count": 2
    },
    {
      "text": "Usually, this process involves finding the correct\nURL, connecting to a server, logic, styling with HTML, CSS, JavaScript, or\nstatic assets, and then sending the HTTP response.",
      "sentence_number": 1273,
      "word_count": 27
    },
    {
      "text": "This is what the abstract flow looks like:\nHTTP Request -> URL -> Django combines database, logic, styling -> HTTP Response\nModel-View-Controller (MVC) and Model-View-\nTemplate (MVT)\nThe Model-View-Controller (MVC) sequence has become a popular way to\nsplit up an application's data, logic, and display into separate parts over time.",
      "sentence_number": 1274,
      "word_count": 50
    },
    {
      "text": "This makes it easier for a programmer to figure out what the code means.",
      "sentence_number": 1275,
      "word_count": 14
    },
    {
      "text": "The\nMVC pattern is used by many web frameworks, such as Ruby on Rails,\nSpring (Java), Laravel (PHP), ASP.NET (C#), and many others.",
      "sentence_number": 1276,
      "word_count": 23
    },
    {
      "text": "There are three main parts to the traditional MVC pattern:\nModel: Takes care of data and the primary project logic\nView: Gives the model's data in a specific format.",
      "sentence_number": 1277,
      "word_count": 29
    },
    {
      "text": "Controller: Takes input from the user and does application-specific logic.",
      "sentence_number": 1278,
      "word_count": 10
    },
    {
      "text": "Django's method, often called Model-View-Template, only loosely follows\nthe traditional MVC method (MVT).",
      "sentence_number": 1279,
      "word_count": 13
    },
    {
      "text": "Developers who have worked with web\nframeworks before might find this confusing at first.",
      "sentence_number": 1280,
      "word_count": 14
    },
    {
      "text": "In reality, Django's\napproach is a 4-part pattern that also includes URL Configuration.",
      "sentence_number": 1281,
      "word_count": 13
    },
    {
      "text": "A better\nway to describe it would be something like MVTU.",
      "sentence_number": 1282,
      "word_count": 11
    },
    {
      "text": "Here's how the Django MVT pattern works:\nModel: Manages data and core business logic\nView: Tells the user what data is sent to them, but not how it is shown.",
      "sentence_number": 1283,
      "word_count": 30
    },
    {
      "text": "Template: Shows the information in HTML, with CSS, JavaScript, and Static\nAssets as options.",
      "sentence_number": 1284,
      "word_count": 14
    },
    {
      "text": "URL Configuration: Regular-expression components set up for a View\nThis interaction is a crucial part of Django, but it can be hard to understand\nfor new users, so let's draw a diagram of how an HTTP request and response\ncycle works.",
      "sentence_number": 1285,
      "word_count": 41
    },
    {
      "text": "When a URL like https://djangoproject.com is typed in, the first\nthing that happens in our Django project is that a URL pattern (contained in\nurls.py) that matches it is found.",
      "sentence_number": 1286,
      "word_count": 30
    },
    {
      "text": "The URL pattern is linked to a single view\n(in views.py) that combines the data from the model (in models.py) and the\nstyling from a template (any file ending in .html).",
      "sentence_number": 1287,
      "word_count": 31
    },
    {
      "text": "After that, the view gives\nthe user an HTTP response.",
      "sentence_number": 1288,
      "word_count": 10
    },
    {
      "text": "The flow looks like below:\nHTTP Request -> URL -> View -> Model and Template -> HTTP Response\nCreating A Blank App\nDjango uses apps and projects to keep code clean and easy to read.",
      "sentence_number": 1289,
      "word_count": 35
    },
    {
      "text": "Multiple\napps can be part of a single Django project.",
      "sentence_number": 1290,
      "word_count": 10
    },
    {
      "text": "Each app will have a set of\nfunctions to control.",
      "sentence_number": 1291,
      "word_count": 10
    },
    {
      "text": "For example, to build an e-commerce site, you may use\none app to log in users, another to handle payments, and another to list item\ndetails.",
      "sentence_number": 1292,
      "word_count": 26
    },
    {
      "text": "That's three different apps that are all part of the same main project.",
      "sentence_number": 1293,
      "word_count": 13
    },
    {
      "text": "You must activate the virtual environment to add a new app to your project.",
      "sentence_number": 1294,
      "word_count": 14
    },
    {
      "text": "Do you still remember how to do that?",
      "sentence_number": 1295,
      "word_count": 8
    },
    {
      "text": "Type in one of the following lines on your Windows or Mac:\n.venv\\Scripts\\Activate.ps1\nOR\nsource .venv/bin/activate\nWe will create a new project (or folder) in our Scripts directory.",
      "sentence_number": 1296,
      "word_count": 28
    },
    {
      "text": "Let us call it\nmy_project.",
      "sentence_number": 1297,
      "word_count": 5
    },
    {
      "text": "Remember to put the space and full stop ( .",
      "sentence_number": 1298,
      "word_count": 10
    },
    {
      "text": ") at the end of the\ncommand so that it is installed in the current folder we are working in.",
      "sentence_number": 1299,
      "word_count": 20
    },
    {
      "text": "django-admin startproject my_project .",
      "sentence_number": 1300,
      "word_count": 4
    },
    {
      "text": "Let's take a moment to look at the new folders that Django has set up for us\nby default.",
      "sentence_number": 1301,
      "word_count": 19
    },
    {
      "text": "If you want to see what it looks like, you can open the new\nmy_project folder on the Desktop.",
      "sentence_number": 1302,
      "word_count": 19
    },
    {
      "text": "You may not see the.venv folder because\nit is hidden.",
      "sentence_number": 1303,
      "word_count": 10
    },
    {
      "text": "Let's try out our new project using the light web server with Django for local\ndevelopment.",
      "sentence_number": 1304,
      "word_count": 16
    },
    {
      "text": "The runserver command will be used.",
      "sentence_number": 1305,
      "word_count": 6
    },
    {
      "text": "It can be found in the file\nmanage.py.",
      "sentence_number": 1306,
      "word_count": 8
    },
    {
      "text": "Use the following line:\npython manage.py runserver\nOR\npython3 manage.py runserver\nNow visit http://127.0.0.1:8000/ on your web browser to test the server.",
      "sentence_number": 1307,
      "word_count": 22
    },
    {
      "text": "Don’t worry about the migration error.",
      "sentence_number": 1308,
      "word_count": 6
    },
    {
      "text": "You know it.",
      "sentence_number": 1309,
      "word_count": 3
    },
    {
      "text": "Let’s fix it.",
      "sentence_number": 1310,
      "word_count": 3
    },
    {
      "text": "Type in the\nfollowing:\npython manage.py migrate\nLet us put our app up in there.",
      "sentence_number": 1311,
      "word_count": 15
    },
    {
      "text": "If you have a running server, you must deactivate it by pressing Ctrl + C.",
      "sentence_number": 1312,
      "word_count": 15
    },
    {
      "text": "You\nthen use the Django startapp command to create the new project and follow it\nby the name of your new app.",
      "sentence_number": 1313,
      "word_count": 22
    },
    {
      "text": "I will call my app webpages.",
      "sentence_number": 1314,
      "word_count": 6
    },
    {
      "text": "python manage.py startapp webpages\nIf you look at the folder we have been using, you will find the new folder for\nwebpages:\nLet's go over what each new webpages app file does:\nadmin.py is a file that tells the Django Admin app how to work.",
      "sentence_number": 1315,
      "word_count": 45
    },
    {
      "text": "apps.py is a file that tells the app how to work and migrations/ keeps track of\nchanges to our models.py file so that it stays in sync with the models in our\ndatabase.",
      "sentence_number": 1316,
      "word_count": 33
    },
    {
      "text": "models.py is where our database models are written, and Django\nautomatically turns them into database tables and tests.",
      "sentence_number": 1317,
      "word_count": 18
    },
    {
      "text": "tests.py is for testing views in an app.",
      "sentence_number": 1318,
      "word_count": 8
    },
    {
      "text": "views.py is where we handle the logic for our web app's requests and\nresponses.",
      "sentence_number": 1319,
      "word_count": 14
    },
    {
      "text": "Notice that the MVT pattern's model, view, and URL are there from the start.",
      "sentence_number": 1320,
      "word_count": 14
    },
    {
      "text": "Only a template is missing, which we'll add soon.",
      "sentence_number": 1321,
      "word_count": 9
    },
    {
      "text": "Even though our new app is part of the Django project, we still have to make\nDjango \"know\" about it by adding it to the my_project/settings.py file.",
      "sentence_number": 1322,
      "word_count": 27
    },
    {
      "text": "Open the\nfile in your text editor and scroll down to where it says \"INSTALLED\nAPPS.\" There are already six Django apps there.",
      "sentence_number": 1323,
      "word_count": 23
    },
    {
      "text": "At the end, add webpages.apps.WebpagesConfig.",
      "sentence_number": 1324,
      "word_count": 5
    },
    {
      "text": "What is PagesConfig?",
      "sentence_number": 1325,
      "word_count": 3
    },
    {
      "text": "The only thing you have to know at this point is that\nthis is a function that we call from the apps.py file that Django created in the\nwebpages folder.",
      "sentence_number": 1326,
      "word_count": 30
    },
    {
      "text": "Designing Pages\nWeb pages on the internet are linked to a database.",
      "sentence_number": 1327,
      "word_count": 12
    },
    {
      "text": "To power a single\ndynamic web page in Django, you need four separate files that follow this\nMVT pattern:\nmodels.py\nviews.py\ntemplates.html (any HTML file will do)\nurls.py\nSince our project today does not need to connect to a database, we can simply\nhardcode all the data into a view and skip the MVT model.",
      "sentence_number": 1328,
      "word_count": 55
    },
    {
      "text": "That is what we\nwill do now.",
      "sentence_number": 1329,
      "word_count": 7
    },
    {
      "text": "This means everything you do on your end can only be accessed\nfrom your computer.",
      "sentence_number": 1330,
      "word_count": 15
    },
    {
      "text": "So, the next thing to do is to make our first page (view).",
      "sentence_number": 1331,
      "word_count": 13
    },
    {
      "text": "Open the views.py\nfile in the webpages folder and edit the code like this:\nfrom django.shortcuts import render\n# Create your views here.",
      "sentence_number": 1332,
      "word_count": 23
    },
    {
      "text": "from django.http import HttpResponse\ndef homePageView(request):\nreturn HttpResponse(\"My New App!\")\nBasically, we're saying that whenever we call the function homePageView,\nDjango should display the text \"My New App!\" In particular, we've imported\nthe built-in HttpResponse method so that we can give the user a response\nobject.",
      "sentence_number": 1333,
      "word_count": 46
    },
    {
      "text": "We made a function called homePageView that takes the request\nobject and sends back the string \"My New App!\" as a response.",
      "sentence_number": 1334,
      "word_count": 22
    },
    {
      "text": "Function-based views (FBVs) and class-based views are the two types of\nviews in Django (CBVs).",
      "sentence_number": 1335,
      "word_count": 15
    },
    {
      "text": "In this example, our code is a function-based view.",
      "sentence_number": 1336,
      "word_count": 9
    },
    {
      "text": "It is clear and easy to implement.",
      "sentence_number": 1337,
      "word_count": 7
    },
    {
      "text": "Django started out with only FBVs, but\nover time it added CBVs, which make it easier to reuse code, keep things\nDRY (Don't Repeat Yourself), and allow mixins to add more functionality.",
      "sentence_number": 1338,
      "word_count": 32
    },
    {
      "text": "The extra abstraction in CBVs makes them very powerful and short, but it\nalso makes them more complicated for people who are new to Django to\nread.",
      "sentence_number": 1339,
      "word_count": 27
    },
    {
      "text": "Django has a number of built-in generic class-based views (GCBVs) to\nhandle common use cases like creating a new object, forms, list views,\npagination, and so on.",
      "sentence_number": 1340,
      "word_count": 27
    },
    {
      "text": "This is because web development tends to be\nrepetitive.",
      "sentence_number": 1341,
      "word_count": 9
    },
    {
      "text": "In later chapters of this book, we will use GCBVs a lot.",
      "sentence_number": 1342,
      "word_count": 12
    },
    {
      "text": "So, technically, there are three ways to write a view in Django: function-\nbased views (FBVs), class-based views (CBVs), and generic class-based\nviews (GCBVs).",
      "sentence_number": 1343,
      "word_count": 24
    },
    {
      "text": "This customization is useful for more experienced\ndevelopers, but it is hard to understand for new developers.",
      "sentence_number": 1344,
      "word_count": 17
    },
    {
      "text": "Many Django\ndevelopers, including the person who wrote this article, like to use GCBVs\nwhen they can and switch to CBVs or FBVs when they have to.",
      "sentence_number": 1345,
      "word_count": 27
    },
    {
      "text": "By the end of\nthis book, you'll have tried all three, so you can decide for yourself which one\nyou like best.",
      "sentence_number": 1346,
      "word_count": 22
    },
    {
      "text": "Next, we need to configure the URLs.",
      "sentence_number": 1347,
      "word_count": 7
    },
    {
      "text": "Notice that there is no urls.py in the\nwebpages folder.",
      "sentence_number": 1348,
      "word_count": 10
    },
    {
      "text": "We need to create it.",
      "sentence_number": 1349,
      "word_count": 5
    },
    {
      "text": "Once you do that, write in the\nfollowing code:\nfrom django.urls import path\nfrom .views import homePageView\nurlpatterns = [\npath(\"\", homePageView, name=\"home\"),\n]\nOn the first line, we import the path from Django to link our URL; on the\nsecond line, we import the views from the same folder.",
      "sentence_number": 1350,
      "word_count": 50
    },
    {
      "text": "By calling the\nviews.py file .views, we are telling Django to look for a views.py file in the\ncurrent folder and import the homePageView function from there.",
      "sentence_number": 1351,
      "word_count": 27
    },
    {
      "text": "Our URL file is made up of three parts:\na Python regular expression for the empty string \" \",\na reference to the view called \"homePageView,\" and\nan optional named URL pattern called \"home.\"\nIn other words, if the user asks for the homepage, represented by the empty\nstring \",\" Django should use the view called homePageView.",
      "sentence_number": 1352,
      "word_count": 57
    },
    {
      "text": "Just one last thing now.",
      "sentence_number": 1353,
      "word_count": 5
    },
    {
      "text": "Now we need to update the urls.py file in our django\nmy_project folder.",
      "sentence_number": 1354,
      "word_count": 13
    },
    {
      "text": "It's common for a Django project to have more than one\napp in our webpages, each app needs its own URL path.",
      "sentence_number": 1355,
      "word_count": 22
    },
    {
      "text": "All you need to do is edit the code like this:\nfrom django.contrib import admin\nfrom django.urls import path\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"\", include(\"webpages.urls\")),\n]\nNow let us test our Home Page.",
      "sentence_number": 1356,
      "word_count": 39
    },
    {
      "text": "Restart your server with the following code\nand reload that url in your browser:\npython manage.py runserver\nNow, let us move on.",
      "sentence_number": 1357,
      "word_count": 22
    },
    {
      "text": "Using Git\nIn the last chapter, we set up Git, which is a version control system.",
      "sentence_number": 1358,
      "word_count": 16
    },
    {
      "text": "Let's put\nit to use.",
      "sentence_number": 1359,
      "word_count": 5
    },
    {
      "text": "The first step is to add Git to our repository or start it up.",
      "sentence_number": 1360,
      "word_count": 14
    },
    {
      "text": "Make sure\nyou have Control+c pressed to stop the local server, and then run the\ncommand git init.",
      "sentence_number": 1361,
      "word_count": 18
    },
    {
      "text": "git init\nWhen you run this, git will take control of the script.",
      "sentence_number": 1362,
      "word_count": 13
    },
    {
      "text": "You can check and track\nchanges by typing the command git status.",
      "sentence_number": 1363,
      "word_count": 12
    },
    {
      "text": "It is not advisable to allow our virtual environment, .venv, to be controlled by\ngit.",
      "sentence_number": 1364,
      "word_count": 15
    },
    {
      "text": "It shouldn't be in Git source control because it often contains secret\ninformation like API keys and the like.",
      "sentence_number": 1365,
      "word_count": 19
    },
    {
      "text": "To hack this, use Django to create a\nnew file called .gitignore that tells Git what to ignore.",
      "sentence_number": 1366,
      "word_count": 18
    },
    {
      "text": ".venv/\n.venv will no longer be there if you run git status again.",
      "sentence_number": 1367,
      "word_count": 13
    },
    {
      "text": "Git has ‘ignored’ it.",
      "sentence_number": 1368,
      "word_count": 4
    },
    {
      "text": "We also need to track the packages that are installed in our virtual\nenvironment.",
      "sentence_number": 1369,
      "word_count": 14
    },
    {
      "text": "The best way to do that is to put this data in a requirements.txt\nfile.",
      "sentence_number": 1370,
      "word_count": 15
    },
    {
      "text": "Type the following command line:\npip freeze > requirements.txt\nThis will create the requirements.txt file and output the data we need.",
      "sentence_number": 1371,
      "word_count": 21
    },
    {
      "text": "We\nneed this because besides installing Django, there are many other packages\nthat Django relies on to run.",
      "sentence_number": 1372,
      "word_count": 18
    },
    {
      "text": "When you install one Python package, you often\nhave to install a few others that it depends on as well.",
      "sentence_number": 1373,
      "word_count": 20
    },
    {
      "text": "A requirements.txt file\nis very important so that it can help us see all the packages.",
      "sentence_number": 1374,
      "word_count": 16
    },
    {
      "text": "Now, we want to ensure that we will not have to manually add anything.",
      "sentence_number": 1375,
      "word_count": 14
    },
    {
      "text": "We\nwill automate it so that it inputs whatever we install moving on.",
      "sentence_number": 1376,
      "word_count": 13
    },
    {
      "text": "Use this\ncode:\n(.venv) > git add -A\n(.venv) > git commit -m \"initial commit\"\nYou can now exit the virtual environment by running “deactivate”.",
      "sentence_number": 1377,
      "word_count": 25
    },
    {
      "text": "Congratulations!",
      "sentence_number": 1378,
      "word_count": 1
    },
    {
      "text": "In this chapter, we've talked about a lot of essential ideas.",
      "sentence_number": 1379,
      "word_count": 11
    },
    {
      "text": "We made our first Django app and learned how projects and apps are set up\nin Django.",
      "sentence_number": 1380,
      "word_count": 17
    },
    {
      "text": "We learned about views, URLs, and the Django web server built\ninto the program.",
      "sentence_number": 1381,
      "word_count": 14
    },
    {
      "text": "Move on to Chapter 3, where we'll use templates and class-\nbased views to create and deploy a more complex Django app.",
      "sentence_number": 1382,
      "word_count": 22
    },
    {
      "text": "C 3 - D A W P\nHAPTER JANGO PP ITH AGES\nIn this chapter, we'll create, test, and deploy a website app with a homepage\nand a services page.",
      "sentence_number": 1383,
      "word_count": 30
    },
    {
      "text": "We haven't learned about databases, so you don’t have to\nworry much.",
      "sentence_number": 1384,
      "word_count": 12
    },
    {
      "text": "However, we'll cover that in the next chapter.",
      "sentence_number": 1385,
      "word_count": 8
    },
    {
      "text": "We'll learn about\nclass-based views and templates, which are the building blocks for the more\ncomplex web applications we'll make later in the book.",
      "sentence_number": 1386,
      "word_count": 24
    },
    {
      "text": "In the previous chapter, the process of creating our blank app involves some\ninitial setup where we need to create some new .py app files for the server.",
      "sentence_number": 1387,
      "word_count": 28
    },
    {
      "text": "We will do the same here.",
      "sentence_number": 1388,
      "word_count": 6
    },
    {
      "text": "Setup\nYou have learned how to set up Django to create an application in chapter 2.",
      "sentence_number": 1389,
      "word_count": 16
    },
    {
      "text": "Use the knowledge to\nmake a new folder (project) called \"website\" for our code and go\nthere.",
      "sentence_number": 1390,
      "word_count": 17
    },
    {
      "text": "create a new virtual environment with the name .venv and turn it on.",
      "sentence_number": 1391,
      "word_count": 13
    },
    {
      "text": "install Django.",
      "sentence_number": 1392,
      "word_count": 2
    },
    {
      "text": "create a new Django project and call it django_project\nmake a new app and call it Pages\nMake sure, at the command line, that you are not working in a virtual\nenvironment that is already set up.",
      "sentence_number": 1393,
      "word_count": 37
    },
    {
      "text": "The steps outlined above are in easy steps, with each of the following lines a\ncommand you must run before the next:\n> cd OneDrive\\Desktop\\script\n> mkdir website\n> cd website\n> python -m venv .venv\n> .venv\\Scripts\\Activate.ps1\n(.venv) > python -m pip install django~=4.0.0\n(.venv) > django-admin startproject django_project .",
      "sentence_number": 1394,
      "word_count": 51
    },
    {
      "text": "(.venv) > python manage.py startapp pages\nRemember that we need to add the new project to the INSTALLED APPS\nsetting in the settings.py file under the django_project folder.",
      "sentence_number": 1395,
      "word_count": 28
    },
    {
      "text": "Now, open this\nfile in your text editor and add the following line to the end:\n\"pages.apps.PagesConfig\",\nThe migrate function moves the database and the runserver tool to start the\nlocal web server.",
      "sentence_number": 1396,
      "word_count": 33
    },
    {
      "text": "Refer to chapter 2.",
      "sentence_number": 1397,
      "word_count": 4
    },
    {
      "text": "Adding Templates\nA good web framework must make it easy to make HTML files.",
      "sentence_number": 1398,
      "word_count": 14
    },
    {
      "text": "In Django,\nwe use templates, which are separate HTML files that can be linked together\nand also have some basic logic built into them.",
      "sentence_number": 1399,
      "word_count": 24
    },
    {
      "text": "Remember that in the last chapter, the phrase \"My First App\" was hardcoded\ninto a views.py file on our first site.",
      "sentence_number": 1400,
      "word_count": 21
    },
    {
      "text": "That works technically, but if you want\nto build a big website, you will suffer a lot going that route.",
      "sentence_number": 1401,
      "word_count": 20
    },
    {
      "text": "The best way is\nto link a view to a template because the information in each is kept separate.",
      "sentence_number": 1402,
      "word_count": 19
    },
    {
      "text": "In this chapter, we'll learn how to use templates to make our homepage and\nabout page.",
      "sentence_number": 1403,
      "word_count": 16
    },
    {
      "text": "In later chapters, you'll learn how to use templates to develop\nwebsites with hundreds, thousands, or even millions of pages that only need a\nsmall amount of code.",
      "sentence_number": 1404,
      "word_count": 28
    },
    {
      "text": "The first thing to learn is where to put templates in a Django project.",
      "sentence_number": 1405,
      "word_count": 14
    },
    {
      "text": "By\ndefault, Django's template loader looks inside each app for templates that go\nwith it.",
      "sentence_number": 1406,
      "word_count": 15
    },
    {
      "text": "But the structure is a little confusing: each app needs a new templates\ndirectory, another directory with the same name as the app, and then the\ntemplate file.",
      "sentence_number": 1407,
      "word_count": 28
    },
    {
      "text": "That implies that there will be a new folder in the pages folder called\ntemplates.",
      "sentence_number": 1408,
      "word_count": 15
    },
    {
      "text": "Inside templates, we need another folder with the name of the app\nas pages, and then we will now save our template itself inside that folder as\nhome.html.",
      "sentence_number": 1409,
      "word_count": 28
    },
    {
      "text": "Now, let us create a templates folder.",
      "sentence_number": 1410,
      "word_count": 7
    },
    {
      "text": "Enter the pages folder in the code and\ntype in the following:\nmkdir templates\nNext, we have to add the new template to the settings.py file inside the\ndjango project so that Django knows where our new templates directory is.",
      "sentence_number": 1411,
      "word_count": 40
    },
    {
      "text": "Add the following to the TEMPLATES setting under \"DIRS.\"\n[BASE_DIR / \"templates\"],\nSo it looks like this:\nMake a new file called home.html in the templates directory.",
      "sentence_number": 1412,
      "word_count": 27
    },
    {
      "text": "You can do this\nin your text editor.",
      "sentence_number": 1413,
      "word_count": 8
    },
    {
      "text": "In Visual Studio Code, click \"File\" and then \"New File\" in\nthe top left corner of the screen.",
      "sentence_number": 1414,
      "word_count": 18
    },
    {
      "text": "Make sure to give the file the correct name\nand save it in the right place.",
      "sentence_number": 1415,
      "word_count": 16
    },
    {
      "text": "For now, a simple headline will be in the home.html file.",
      "sentence_number": 1416,
      "word_count": 11
    },
    {
      "text": "<h1>Homepage\nWelcome to My Website\n</h1>\nThat’s it.",
      "sentence_number": 1417,
      "word_count": 8
    },
    {
      "text": "We are done creating our template.",
      "sentence_number": 1418,
      "word_count": 6
    },
    {
      "text": "The next thing is for us to\nupdate the URL and view files.",
      "sentence_number": 1419,
      "word_count": 13
    },
    {
      "text": "Class and Views\nYou have seen how we deployed function-based views in the previous\nchapter.",
      "sentence_number": 1420,
      "word_count": 15
    },
    {
      "text": "That was how Django was when it came.",
      "sentence_number": 1421,
      "word_count": 8
    },
    {
      "text": "But doing that means\ndevelopers will repeat the same patterns over and over again, writing a view\nthat lists all objects in the model, and so on.",
      "sentence_number": 1422,
      "word_count": 27
    },
    {
      "text": "Classes are an essential part of Python, but we won't go into detail about them\nin this book.",
      "sentence_number": 1423,
      "word_count": 18
    },
    {
      "text": "If you need an introduction or a refresher, I suggest reading the\nofficial Python documentation, which has an excellent tutorial on classes and\nhow to use them.",
      "sentence_number": 1424,
      "word_count": 27
    },
    {
      "text": "We will use the built-in TemplateView to show our template in our view.",
      "sentence_number": 1425,
      "word_count": 13
    },
    {
      "text": "Here is how to do that: Go to the pages folder and edit the views.py file with\nthis code:\nfrom django.shortcuts import render\n# Create your views here.",
      "sentence_number": 1426,
      "word_count": 28
    },
    {
      "text": "from django.views.generic import TemplateView\nclass HomePageView(TemplateView):\ntemplate_name = \"home.html\"\nSince HomePageView is now a Python class, we had to capitalize it.",
      "sentence_number": 1427,
      "word_count": 21
    },
    {
      "text": "Unlike\nfunctions, classes should always start with a capital letter.",
      "sentence_number": 1428,
      "word_count": 10
    },
    {
      "text": "The logic for\nshowing our template is already built into the TemplateView.",
      "sentence_number": 1429,
      "word_count": 12
    },
    {
      "text": "All we need to\ndo is tell it the name of the template.",
      "sentence_number": 1430,
      "word_count": 13
    },
    {
      "text": "Our URLs\nLast, we need to change our URLs.",
      "sentence_number": 1431,
      "word_count": 9
    },
    {
      "text": "You may remember from Chapter 2 that\nwe have to make changes in two places.",
      "sentence_number": 1432,
      "word_count": 15
    },
    {
      "text": "First, we change the django\nproject/urls.py file so that it points to our pages app.",
      "sentence_number": 1433,
      "word_count": 15
    },
    {
      "text": "Then, we match views to\nURL routes within pages.",
      "sentence_number": 1434,
      "word_count": 9
    },
    {
      "text": "Let's start with the urls.py file in the django project folder.",
      "sentence_number": 1435,
      "word_count": 11
    },
    {
      "text": "Do you remember this code?",
      "sentence_number": 1436,
      "word_count": 5
    },
    {
      "text": "On the second line, we add include to point the\ncurrent URL to the Pages app.",
      "sentence_number": 1437,
      "word_count": 16
    },
    {
      "text": "Now, go ahead and create a new file in the pages folder and name it urls.py,\nand put the following code in it.",
      "sentence_number": 1438,
      "word_count": 23
    },
    {
      "text": "This pattern is almost the same as what we\ndid in Chapter 2, with one big difference: when using Class-Based Views,\nyou always add as view() to the end of the view name.",
      "sentence_number": 1439,
      "word_count": 33
    },
    {
      "text": "from django.urls import path\nfrom .views import HomePageView\nurlpatterns = [\npath(\"\", HomePageView.as_view(), name=\"home\"),\n]\nAnd that is it!",
      "sentence_number": 1440,
      "word_count": 19
    },
    {
      "text": "You can run the code now by typing the command:\npython manage.py runserver\nThen go to your browser.",
      "sentence_number": 1441,
      "word_count": 18
    },
    {
      "text": "We did it!",
      "sentence_number": 1442,
      "word_count": 3
    },
    {
      "text": "About Page\nThe process is the same.",
      "sentence_number": 1443,
      "word_count": 7
    },
    {
      "text": "The only difference is in the content.",
      "sentence_number": 1444,
      "word_count": 7
    },
    {
      "text": "We'll create a\nnew template file, a new view, and a new url route.",
      "sentence_number": 1445,
      "word_count": 14
    },
    {
      "text": "How will you do this?",
      "sentence_number": 1446,
      "word_count": 5
    },
    {
      "text": "Start by creating a new template file called about.html within the templates\nfolder and put a short HTML header in it.",
      "sentence_number": 1447,
      "word_count": 21
    },
    {
      "text": "<h1>About Me</h1>\nNow, like you did for the homepage, go to the views.py file in pages and\ncreate a view for this new page template you just built.",
      "sentence_number": 1448,
      "word_count": 28
    },
    {
      "text": "Add the following\ncode after the Home page view that is already there:\nclass AboutPageView(TemplateView):\ntemplate_name = \"about.html\"\nLastly, you need to go to the urls and import the about page view name so\nthat you can connect it to a URL.",
      "sentence_number": 1449,
      "word_count": 42
    },
    {
      "text": "Use the code below:\npath(\"about/\", AboutPageView.as_view(), name=\"about\"),\nGo back to your browser and try the url http://127.0.0.1:8000/about\nExtending Templates\nThe best thing about templates is how you can extend them.",
      "sentence_number": 1450,
      "word_count": 30
    },
    {
      "text": "Most websites\nhave headers or footers that you see on every page.",
      "sentence_number": 1451,
      "word_count": 12
    },
    {
      "text": "How can you do that?",
      "sentence_number": 1452,
      "word_count": 5
    },
    {
      "text": "First, we make a file called base.html within the templates folder, and we will\nput in a header with links to the two pages we have.",
      "sentence_number": 1453,
      "word_count": 26
    },
    {
      "text": "You can call this file\nanything, but many developers use base.html.",
      "sentence_number": 1454,
      "word_count": 11
    },
    {
      "text": "Django has a simple templating language that we can use to add links and\nsimple logic to our templates.",
      "sentence_number": 1455,
      "word_count": 19
    },
    {
      "text": "The official documentation shows the full list\nof template tags that come with the program.",
      "sentence_number": 1456,
      "word_count": 15
    },
    {
      "text": "Template tags are written like\nthis: %something%, where \"something\" is the template tag itself.",
      "sentence_number": 1457,
      "word_count": 14
    },
    {
      "text": "You can\nmake your own template tags, but we won't cover that here.",
      "sentence_number": 1458,
      "word_count": 13
    },
    {
      "text": "We can use the built-in url template tag, which takes the URL pattern name\nas an argument, to add URL links to our project.",
      "sentence_number": 1459,
      "word_count": 24
    },
    {
      "text": "Create the base.html file and\nadd the following code:\n<header>\n<a href=\"{% url 'home' %}\">Home</a> |\n<a href=\"{% url 'about' %}\">About</a>\n</header>\n{% block content %} {% endblock content %}\nNow let us go and edit the home.html and about.html files to show the new\nbase.html code.",
      "sentence_number": 1460,
      "word_count": 47
    },
    {
      "text": "The extends method in the Django templating language can\nbe used for this.",
      "sentence_number": 1461,
      "word_count": 13
    },
    {
      "text": "Open the home.html and change the code that was there to this:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>Welcome to my website!</h1>\n{% endblock content %}\nOpen the about.html and change the code that was there to this:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>About Me</h1>\n{% endblock content %}\nReload your server in the browser, and you will see the header showing on\nboth pages like so:\nYay!",
      "sentence_number": 1462,
      "word_count": 73
    },
    {
      "text": "We have created a two-page website.",
      "sentence_number": 1463,
      "word_count": 6
    },
    {
      "text": "Let us talk about one practice that\ndifferentiates good programmers from great ones.",
      "sentence_number": 1464,
      "word_count": 13
    },
    {
      "text": "Testing\nWhen a codebase changes, it's crucial to add automated tests and run them.",
      "sentence_number": 1465,
      "word_count": 14
    },
    {
      "text": "Tests take a little time to write, but they pay off in the long run.",
      "sentence_number": 1466,
      "word_count": 15
    },
    {
      "text": "Unit testing and integration testing are the two main types of testing.",
      "sentence_number": 1467,
      "word_count": 12
    },
    {
      "text": "Unit\ntests look at a single piece of functionality, while integration tests look at\nhow several pieces work together.",
      "sentence_number": 1468,
      "word_count": 19
    },
    {
      "text": "Unit tests only test a small amount of code,\nso they run faster and are easier to keep up to date.",
      "sentence_number": 1469,
      "word_count": 21
    },
    {
      "text": "Integration tests take\nlonger and are harder to keep up with because the problem comes from when\nthey fail.",
      "sentence_number": 1470,
      "word_count": 19
    },
    {
      "text": "Most developers spend most of their time writing unit tests and only\na few integration tests.",
      "sentence_number": 1471,
      "word_count": 16
    },
    {
      "text": "The Python standard library has a built-in testing framework called unittest.",
      "sentence_number": 1472,
      "word_count": 11
    },
    {
      "text": "It\nuses TestCase instances and a long list of assert methods to check for and\nreport failures.",
      "sentence_number": 1473,
      "word_count": 17
    },
    {
      "text": "On top of Python's unittest, Django's testing framework adds several\nBase class for TestCase.",
      "sentence_number": 1474,
      "word_count": 14
    },
    {
      "text": "These include a test client for making fake Web\nbrowser requests, many Django-specific additional assertions, and four test\ncase classes: SimpleTestCase, TestCase, TransactionTestCase, and\nLiveServerTestCase.",
      "sentence_number": 1475,
      "word_count": 25
    },
    {
      "text": "In general, you use SimpleTestCase when you don't need a database, while\nyou use TestCase when you do want to test the database.",
      "sentence_number": 1476,
      "word_count": 23
    },
    {
      "text": "LiveServerTestCase\nstarts a live server thread that can be used for testing with browser-based\ntools like Selenium.",
      "sentence_number": 1477,
      "word_count": 17
    },
    {
      "text": "TransactionTestCase is useful if you need to test\ndatabase transactions directly.",
      "sentence_number": 1478,
      "word_count": 11
    },
    {
      "text": "One quick note before we move on: you may have noticed that the names of\nmethods in unittest and django.test are written in camelCase instead of the\nmore Pythonic snake case pattern.",
      "sentence_number": 1479,
      "word_count": 32
    },
    {
      "text": "Because unittest is based on the jUnit\ntesting framework from Java, which does use camelCase, camelCase naming\ncame with unittest when it was added to Python.",
      "sentence_number": 1480,
      "word_count": 26
    },
    {
      "text": "If you look in our pages app, you'll see that Django has already given us a file\ncalled tests.py that we can use.",
      "sentence_number": 1481,
      "word_count": 23
    },
    {
      "text": "Since our project hasn't got to do with a\ndatabase, we'll import SimpleTestCase at the top of the file.",
      "sentence_number": 1482,
      "word_count": 19
    },
    {
      "text": "For our first test,\nwe'll make sure that both of our website's URLs, the homepage and the\n\"about\" page, return the standard HTTP status code of 200, which means that\nthe request was successful.",
      "sentence_number": 1483,
      "word_count": 34
    },
    {
      "text": "from django.test import TestCase\n# Create your tests here.",
      "sentence_number": 1484,
      "word_count": 9
    },
    {
      "text": "from django.test import SimpleTestCase\nclass HomepageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\nclass AboutpageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/about/\")\nself.assertEqual(response.status_code, 200)\nTo run the test, you must first stop the server with Ctrl + C and then type in\nthe command python manage.py test to run the tests.",
      "sentence_number": 1485,
      "word_count": 49
    },
    {
      "text": "If you see an error like \"AssertionError: 301 does not equal 200,\" you\nprobably forgot to add the last slash to \"/about\" above.",
      "sentence_number": 1486,
      "word_count": 23
    },
    {
      "text": "The web browser\nknows to automatically add a slash if it's not there, but that causes a 301\nredirect, not a 200 success response.",
      "sentence_number": 1487,
      "word_count": 24
    },
    {
      "text": "How about we test the name of the urls of our pages?",
      "sentence_number": 1488,
      "word_count": 12
    },
    {
      "text": "In our urls.py file in\npages, we added \"home\" to the path for the homepage and \"about\" to the path\nfor the about page.",
      "sentence_number": 1489,
      "word_count": 24
    },
    {
      "text": "We can run a test on both pages with a useful Django\nfunction called reverse.",
      "sentence_number": 1490,
      "word_count": 15
    },
    {
      "text": "Now, open the test.py file, and edit it.",
      "sentence_number": 1491,
      "word_count": 8
    },
    {
      "text": "First, import\nreverse at the top of the code and add a new unit test for each below it.",
      "sentence_number": 1492,
      "word_count": 19
    },
    {
      "text": "This is\nthe latest updated code in the test.py file:\nfrom django.test import SimpleTestCase\nfrom django.urls import reverse\nclass HomepageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nclass AboutpageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/about/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertEqual(response.status_code, 200)\nNow, rerun the test.",
      "sentence_number": 1493,
      "word_count": 54
    },
    {
      "text": "So far, we have tested where our URLs are and what they are called, but not\nour templates.",
      "sentence_number": 1494,
      "word_count": 18
    },
    {
      "text": "Let's ensure that the right templates, home.html, and\nabout.html, are used on each page and that they show the expected content\nwe wrote inside the templates.",
      "sentence_number": 1495,
      "word_count": 26
    },
    {
      "text": "Let us use assertTemplateUsed and assertContains.",
      "sentence_number": 1496,
      "word_count": 6
    },
    {
      "text": "Update the test.py code to\nbecome this:\nfrom django.test import SimpleTestCase\nfrom django.urls import reverse\nclass HomepageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\ndef test_template_name_correct(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertTemplateUsed(response, \"home.html\")\ndef test_template_content(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertContains(response, \"<h1>Welcome to my website!</h1>\")\nclass AboutpageTests(SimpleTestCase):\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/about/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertEqual(response.status_code, 200)\ndef test_template_name_correct(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertTemplateUsed(response, \"about.html\")\ndef test_template_content(self):\nresponse = self.client.get(reverse(\"about\"))\nself.assertContains(response, \"<h1>About Me</h1>\")\nIf an experienced programmer looks at our test code, they may scoff at us\nbecause it repeats a lot.",
      "sentence_number": 1497,
      "word_count": 98
    },
    {
      "text": "For example, we had to set an answer for each of the\neight tests.",
      "sentence_number": 1498,
      "word_count": 14
    },
    {
      "text": "In Django coding, there is a rule called Don't Repeat Yourself (DRY).",
      "sentence_number": 1499,
      "word_count": 12
    },
    {
      "text": "This\nrule makes code clean.",
      "sentence_number": 1500,
      "word_count": 5
    },
    {
      "text": "However, unit tests work best when they are self-\ncontained and very verbose.",
      "sentence_number": 1501,
      "word_count": 13
    },
    {
      "text": "As a test suite grows, it might be better for\nperformance to combine multiple assertions into fewer tests.",
      "sentence_number": 1502,
      "word_count": 18
    },
    {
      "text": "However, that is\nan advanced and often subjective topic that is beyond the scope of this book.",
      "sentence_number": 1503,
      "word_count": 17
    },
    {
      "text": "In the future, especially when we start working with databases, we'll do a lot\nmore testing.",
      "sentence_number": 1504,
      "word_count": 16
    },
    {
      "text": "For now, it's essential to see how easy and important it is to add\ntests to our Django project whenever we add new features.",
      "sentence_number": 1505,
      "word_count": 24
    },
    {
      "text": "Now, let us use Git to track the changes.",
      "sentence_number": 1506,
      "word_count": 9
    },
    {
      "text": "You can upload your code to\nGitHub if you have a repository.",
      "sentence_number": 1507,
      "word_count": 12
    },
    {
      "text": "You can create one for your Django\nprojects.",
      "sentence_number": 1508,
      "word_count": 8
    },
    {
      "text": "Also, remember to create a .gitignore file in your project folder and\nput .venv/ so that we will keep our virtual environment out of the checks.",
      "sentence_number": 1509,
      "word_count": 26
    },
    {
      "text": "Then run the git add -A and the git commit -m \"initial commit\".",
      "sentence_number": 1510,
      "word_count": 13
    },
    {
      "text": "Now go to GitHub.",
      "sentence_number": 1511,
      "word_count": 4
    },
    {
      "text": "If you don’t already have a GitHub account, it’s time you\ncreated one.",
      "sentence_number": 1512,
      "word_count": 13
    },
    {
      "text": "You must now create a new repository and call it \"pages,\" and\nmake sure the \"Private\" radio button is selected.",
      "sentence_number": 1513,
      "word_count": 20
    },
    {
      "text": "Then click the button that\nsays \"Create repository.\"\nScroll to the bottom of the next page until you see \"...or push an existing\nrepository from the command line.\" Copy the two commands there and paste\nthem into your terminal.",
      "sentence_number": 1514,
      "word_count": 39
    },
    {
      "text": "It should look like the example below, but instead of MacVicquayns, your\nGitHub username should be there.",
      "sentence_number": 1515,
      "word_count": 17
    },
    {
      "text": "git remote add origin https://github.com/MacVicquayns/pages.git\ngit push -u origin main\nWebsite Production\nTo deploy our new web project to the internet so that everyone can access it,\nwe need to put our code on an external server and database.",
      "sentence_number": 1516,
      "word_count": 39
    },
    {
      "text": "What we have\ndone is local code.",
      "sentence_number": 1517,
      "word_count": 7
    },
    {
      "text": "That only lives on our computer.",
      "sentence_number": 1518,
      "word_count": 6
    },
    {
      "text": "We need production\ncode that will be on a server outside of our computer that everyone can\naccess.",
      "sentence_number": 1519,
      "word_count": 18
    },
    {
      "text": "The settings.py in our django_project folder is used to set up a new project\nfor local development.",
      "sentence_number": 1520,
      "word_count": 17
    },
    {
      "text": "Because it's easy to use, we have to change a number\nof settings when it's time to put the project into production.",
      "sentence_number": 1521,
      "word_count": 22
    },
    {
      "text": "Django comes with its own basic server, which can be used locally but not in\na production setting.",
      "sentence_number": 1522,
      "word_count": 18
    },
    {
      "text": "You can choose between Gunicorn and uWSGI.",
      "sentence_number": 1523,
      "word_count": 7
    },
    {
      "text": "Gunicorn is the easiest to set up and works well enough for our projects, so\nwe will use that.",
      "sentence_number": 1524,
      "word_count": 19
    },
    {
      "text": "We will use Heroku as our hosting service because it is free for small\nprojects, is used by a lot of people, and is easy to set up.",
      "sentence_number": 1525,
      "word_count": 28
    },
    {
      "text": "Heroku\nSearch for Heroku on your search engine and open the official website.",
      "sentence_number": 1526,
      "word_count": 13
    },
    {
      "text": "Create a free account with the registration form and wait for an email with a\nlink to confirm your account.",
      "sentence_number": 1527,
      "word_count": 20
    },
    {
      "text": "A link in the verification email takes you to the\npage where you can set up your password.",
      "sentence_number": 1528,
      "word_count": 18
    },
    {
      "text": "Once you've set everything up, the\nsite will take you to the dashboard.",
      "sentence_number": 1529,
      "word_count": 13
    },
    {
      "text": "Now that you have signed up, you need to install Heroku's Command Line\nInterface (CLI) so that we can deploy from the command line.",
      "sentence_number": 1530,
      "word_count": 24
    },
    {
      "text": "We currently\nwork on our Pages project in a virtual environment, but we want Heroku to\nbe available everywhere on our machine and not only in the virtual\nenvironment.",
      "sentence_number": 1531,
      "word_count": 29
    },
    {
      "text": "So you can open a new command line terminal for this.",
      "sentence_number": 1532,
      "word_count": 11
    },
    {
      "text": "On Windows, go to the Heroku CLI page to learn how to install the 32-bit or\n64-bit version correctly.",
      "sentence_number": 1533,
      "word_count": 19
    },
    {
      "text": "For macOS, you can use Homebrew to install it.",
      "sentence_number": 1534,
      "word_count": 9
    },
    {
      "text": "Homebrew is already on your Mac computer.",
      "sentence_number": 1535,
      "word_count": 7
    },
    {
      "text": "Type this code in a new\nterminal tab, not in a virtual environment.",
      "sentence_number": 1536,
      "word_count": 13
    },
    {
      "text": "brew tap heroku/brew && brew install heroku\nOnce the installation is done, you can close the new command line tab and go\nback to the first tab with the pages virtual environment open.",
      "sentence_number": 1537,
      "word_count": 33
    },
    {
      "text": "Type \"heroku login\" and follow the instructions to use the email address and\npassword you just set up for Heroku to log in.",
      "sentence_number": 1538,
      "word_count": 23
    },
    {
      "text": "Now, we are ready to deploy the app online.",
      "sentence_number": 1539,
      "word_count": 9
    },
    {
      "text": "Let’s Deploy\nThe first thing to do is to set up Gunicorn, which is a web server for our\nproject that is ready for production.",
      "sentence_number": 1540,
      "word_count": 25
    },
    {
      "text": "Remember that we've been using\nDjango's own lightweight server for local testing, but it's not good enough for\na live website.",
      "sentence_number": 1541,
      "word_count": 21
    },
    {
      "text": "Let us use Pip to install Gunicorn.",
      "sentence_number": 1542,
      "word_count": 7
    },
    {
      "text": "Type in the following code:\npython -m pip install gunicorn==20.1.0\nStep two is to make a file called \"requirements.txt\" that lists all the Python\ndependencies that our project needs.",
      "sentence_number": 1543,
      "word_count": 29
    },
    {
      "text": "That is, all of the Python packages we\nhave installed in our virtual environment right now.",
      "sentence_number": 1544,
      "word_count": 16
    },
    {
      "text": "This is important in case\na team member, or we ever want to start over with the repository.",
      "sentence_number": 1545,
      "word_count": 18
    },
    {
      "text": "It also lets\nHeroku know that the project is written in Python, which makes the\ndeployment steps easier.",
      "sentence_number": 1546,
      "word_count": 18
    },
    {
      "text": "To make this file, we will tell the pip freeze command to send its output to a\nnew file called requirements.txt.",
      "sentence_number": 1547,
      "word_count": 21
    },
    {
      "text": "Use the code below:\npython -m pip freeze > requirements.txt\nThe third step is to look in the django project and add something to the\nsettings.py file.",
      "sentence_number": 1548,
      "word_count": 27
    },
    {
      "text": "Go to the ALLOWED HOSTS setting, which tells us which\nhost/domain names our Django site can serve.",
      "sentence_number": 1549,
      "word_count": 17
    },
    {
      "text": "This is a way to keep HTTP\nHost header attacks from happening.",
      "sentence_number": 1550,
      "word_count": 12
    },
    {
      "text": "For now, we'll use the asterisk * as a\nwildcard so that all domains will work.",
      "sentence_number": 1551,
      "word_count": 16
    },
    {
      "text": "We'll learn later in the book how to\nexplicitly list the domains that should be allowed, which is a much safer way\nto do things.",
      "sentence_number": 1552,
      "word_count": 25
    },
    {
      "text": "Step four is to make a new Procfile in the same folder as manage.py (the base\nfolder).",
      "sentence_number": 1553,
      "word_count": 17
    },
    {
      "text": "Go to the folder where manage.py is, create a new file, and name it\nProcfile.",
      "sentence_number": 1554,
      "word_count": 15
    },
    {
      "text": "The Procfile is unique to Heroku and tells you how to run the app in\ntheir bundle.",
      "sentence_number": 1555,
      "word_count": 17
    },
    {
      "text": "In this case, inside the Profile, we're telling the web function to\nuse the gunicorn server, the WSGI configuration file at django_project.wsgi,\nand the --log-file flag to show us any logging messages.",
      "sentence_number": 1556,
      "word_count": 32
    },
    {
      "text": "Type the following\nline inside the Profile.",
      "sentence_number": 1557,
      "word_count": 7
    },
    {
      "text": "web: gunicorn django_project.wsgi --log-file -\nThe last step is to tell Heroku which version of Python to use.",
      "sentence_number": 1558,
      "word_count": 18
    },
    {
      "text": "This will let\nyou quickly know what version to use in the future.",
      "sentence_number": 1559,
      "word_count": 13
    },
    {
      "text": "Since we are using\nPython 3.10, we need to make a runtime.txt file that is just for it.",
      "sentence_number": 1560,
      "word_count": 18
    },
    {
      "text": "Using your\ntext editor, create this new runtime.txt file in your text editor in the same\nfolder as the Procfile and manage.py files.",
      "sentence_number": 1561,
      "word_count": 23
    },
    {
      "text": "Run python --version to find out what version of Python is being used and\ncopy it and paste it into the new runtime.txt file.",
      "sentence_number": 1562,
      "word_count": 24
    },
    {
      "text": "Make sure everything is in\nsmall letters.",
      "sentence_number": 1563,
      "word_count": 7
    },
    {
      "text": "Check the changes with git status, add the new files, and then commit the\nchanges:\ngit status\ngit add -A\ngit commit -m \"New updates for Heroku deployment\"\nThe last step is to use Heroku to put the code into action.",
      "sentence_number": 1564,
      "word_count": 41
    },
    {
      "text": "If you've ever set up\na server on your own, you'll be surprised at how much easier it is to use a\nplatform-as-a-service like Heroku.",
      "sentence_number": 1565,
      "word_count": 25
    },
    {
      "text": "Here's how we'll do things:\nHeroku: make a new app\nDisable the static file collection (we'll discuss this later).",
      "sentence_number": 1566,
      "word_count": 19
    },
    {
      "text": "The code was sent to Heroku.",
      "sentence_number": 1567,
      "word_count": 6
    },
    {
      "text": "start the Heroku server so the app can be used by people\nvisit the app's URL, which Heroku gives you.",
      "sentence_number": 1568,
      "word_count": 20
    },
    {
      "text": "The first step, making a new Heroku app, can be done from the command\nline with the heroku create command.",
      "sentence_number": 1569,
      "word_count": 20
    },
    {
      "text": "Heroku will give our app a random\nname, like ⬢ intense-inlet-86193 in my case.",
      "sentence_number": 1570,
      "word_count": 14
    },
    {
      "text": "You will have a different\nname.",
      "sentence_number": 1571,
      "word_count": 6
    },
    {
      "text": "The heroku create command also makes a remote for our app called\n\"heroku.\" Type git remote -v to see this.",
      "sentence_number": 1572,
      "word_count": 20
    },
    {
      "text": "With this new remote, we can push and pull code from Heroku as long as the\nword \"heroku\" is in the command.",
      "sentence_number": 1573,
      "word_count": 22
    },
    {
      "text": "At this point, we only need one more set of Heroku setup, and that is to tell\nHeroku to start ignoring static files like CSS and JavaScript.",
      "sentence_number": 1574,
      "word_count": 27
    },
    {
      "text": "Django will\noptimize these for us by default, which can cause problems.",
      "sentence_number": 1575,
      "word_count": 12
    },
    {
      "text": "We'll talk about\nthis in later chapters, so for now, just run the command below:\nheroku config:set DISABLE_COLLECTSTATIC=1\nNow, use the following line to push the code to Heroku:\ngit push heroku main\nWe're done!",
      "sentence_number": 1576,
      "word_count": 35
    },
    {
      "text": "The final step is to make sure our app is up and running.",
      "sentence_number": 1577,
      "word_count": 13
    },
    {
      "text": "If you\ntype the command heroku open, your web browser will open a new tab with\nthe URL of your app:\nYou don't have to log out of your Heroku app or leave it.",
      "sentence_number": 1578,
      "word_count": 34
    },
    {
      "text": "It will keep running\non its own at this free level, but you'll need to type \"deactivate\" to leave the\nlocal virtual environment and move on to the next chapter.",
      "sentence_number": 1579,
      "word_count": 30
    },
    {
      "text": "Congratulations on getting your second Django project up and running.",
      "sentence_number": 1580,
      "word_count": 10
    },
    {
      "text": "This\ntime, we used templates and class-based views, explored URLs in more\ndepth, added basic tests, and used Heroku.",
      "sentence_number": 1581,
      "word_count": 19
    },
    {
      "text": "Don't worry if the deployment\nprocess seems too much for you.",
      "sentence_number": 1582,
      "word_count": 11
    },
    {
      "text": "Deployment is complex, even with a tool\nlike Heroku.",
      "sentence_number": 1583,
      "word_count": 9
    },
    {
      "text": "The good news is that most projects have the same steps, so you\ncan use a deployment checklist each time you start a new project.",
      "sentence_number": 1584,
      "word_count": 25
    },
    {
      "text": "In the next chapter, we'll start our first database-backed project, a Message\nBoard website, and see where Django shines.",
      "sentence_number": 1585,
      "word_count": 19
    },
    {
      "text": "We'll use templates and class-\nbased views to build and deploy a more complex Django app.",
      "sentence_number": 1586,
      "word_count": 16
    },
    {
      "text": "C 4 - C Y F D -\nHAPTER REATE OUR IRST ATABASE\nD A A U T D A\nRIVEN PP ND SE HE JANGO DMIN\nWe'll create a simple message board application in this chapter so users can\npost and read brief messages.",
      "sentence_number": 1587,
      "word_count": 45
    },
    {
      "text": "We're going to use a database for the first time\nhere.",
      "sentence_number": 1588,
      "word_count": 11
    },
    {
      "text": "We'll examine Django's robust internal admin interface, which enables\nus to modify our data understandably.",
      "sentence_number": 1589,
      "word_count": 15
    },
    {
      "text": "After adding tests and deploying the\napp to Heroku, we'll push our code to GitHub.",
      "sentence_number": 1590,
      "word_count": 15
    },
    {
      "text": "There is built-in support for MySQL, PostgreSQL, Oracle, MariaDB, and\nSQLite as database backends, because of Django's robust Object-Relational\nMapper (ORM).",
      "sentence_number": 1591,
      "word_count": 21
    },
    {
      "text": "The same Python code can be written by developers in a\nmodels.py file, and it will be automatically converted into the appropriate\nSQL for each database.",
      "sentence_number": 1592,
      "word_count": 26
    },
    {
      "text": "Our settings.py file, located inside the django project\nfolder, only needs the DATABASES section to be modified.",
      "sentence_number": 1593,
      "word_count": 17
    },
    {
      "text": "This function is\nreally fantastic!",
      "sentence_number": 1594,
      "word_count": 5
    },
    {
      "text": "Since SQLite is a file-based database, it is much simpler to use than the other\ndatabase options, which require running a separate server in addition to\nDjango.",
      "sentence_number": 1595,
      "word_count": 27
    },
    {
      "text": "This is why Django uses SQLite by default for local development.",
      "sentence_number": 1596,
      "word_count": 11
    },
    {
      "text": "Initial Setup\nAt this point in the book, we've already set up a few Django projects, so we\ncan quickly go through the basic commands to start a new one.",
      "sentence_number": 1597,
      "word_count": 30
    },
    {
      "text": "Here's what\nwe need to do:\nCreate a folder called message-board to store our code.",
      "sentence_number": 1598,
      "word_count": 15
    },
    {
      "text": "Make a new project called django_project and install Django in a virtual\nenvironment.",
      "sentence_number": 1599,
      "word_count": 13
    },
    {
      "text": "Make a new Django app called posts\nupdate the settings file at django project/settings.py.",
      "sentence_number": 1600,
      "word_count": 14
    },
    {
      "text": "Type the following commands into a new command line console.",
      "sentence_number": 1601,
      "word_count": 10
    },
    {
      "text": "Remember\nthat you must run each line before typing the next:\n> cd C:\\Users\\OneDrive\\Desktop\\script\n> mkdir message-app\n> cd message-app\n> python -m venv .venv\n> .venv\\Scripts\\Activate.ps1\n(.venv) > python -m pip install django~=4.0.0\n(.venv) > django-admin startproject django_project .",
      "sentence_number": 1602,
      "word_count": 40
    },
    {
      "text": "(.venv) > python manage.py startapp posts\nNow, let’s add the new app, posts to the INSTALLED_APPS section of our\nsettings.py file in the django_project folder.",
      "sentence_number": 1603,
      "word_count": 25
    },
    {
      "text": "Do you remember the way to do\nthat?",
      "sentence_number": 1604,
      "word_count": 8
    },
    {
      "text": "Add the following line to the section:\n\"posts.apps.PostsConfig\",\nThen, use the migrate command to get started with a database already\nconfigured for use with Django.",
      "sentence_number": 1605,
      "word_count": 25
    },
    {
      "text": "python manage.py migrate\nYou should see db.sqlite3 among the new files now representing the SQLite\ndatabase.",
      "sentence_number": 1606,
      "word_count": 16
    },
    {
      "text": "When you first run either migrate or runserver, a db.sqlite3 file is generated,\nbut the migrate command will update the database to reflect the current state\nof any database models that are part of the project and are included in\nINSTALLED APPS.",
      "sentence_number": 1607,
      "word_count": 42
    },
    {
      "text": "That is to say, every time you change a model, you'll\nneed to execute the migrate command to ensure the database is in sync with\nyour changes.",
      "sentence_number": 1608,
      "word_count": 27
    },
    {
      "text": "More to come on this.",
      "sentence_number": 1609,
      "word_count": 5
    },
    {
      "text": "Use the runserver to launch our local server and check whether it’s working.",
      "sentence_number": 1610,
      "word_count": 13
    },
    {
      "text": "python manage.py runserver\nNow go to the local URL on your browser: http://127.0.0.1:8000/\nIf you don’t see the Django welcome page, there is something wrong with\nyour script.",
      "sentence_number": 1611,
      "word_count": 28
    },
    {
      "text": "The Database Model\nThe first course of action is to build a database structure that can be used to\nsave and display user-submitted content.",
      "sentence_number": 1612,
      "word_count": 24
    },
    {
      "text": "This model can be easily converted\ninto a database table with the help of Django's ORM.",
      "sentence_number": 1613,
      "word_count": 16
    },
    {
      "text": "While many different\ndatabase models may be required for a complex Django application, this\nsimple message board program requires a single one.",
      "sentence_number": 1614,
      "word_count": 22
    },
    {
      "text": "Open the models.py file in the posts folder to view the Django-supplied\ndefault code.",
      "sentence_number": 1615,
      "word_count": 14
    },
    {
      "text": "In the first line there, as you can see, Django imports a module called models\nto allow us to create new database models that can \"model\" our data.",
      "sentence_number": 1616,
      "word_count": 28
    },
    {
      "text": "We\nneed a model to save the text of a message board post, and we can achieve so\nby adding the following lines:\nclass Post(models.Model):\ntext = models.TextField()\nRemember that we just made a new database model called Post, which has a\nfield text.",
      "sentence_number": 1617,
      "word_count": 44
    },
    {
      "text": "The type of information stored in this TextField().",
      "sentence_number": 1618,
      "word_count": 8
    },
    {
      "text": "Model fields in\nDjango may store a wide variety of data, including text, dates, numbers,\nemails, and more.",
      "sentence_number": 1619,
      "word_count": 18
    },
    {
      "text": "Activate the models\nOur new model is complete; the next step is to put it into action.",
      "sentence_number": 1620,
      "word_count": 17
    },
    {
      "text": "In the future,\nupdating Django will involve a two-step process anytime a model is created\nor modified:\nTo begin, we use the makemigrations command to generate a migrations file.",
      "sentence_number": 1621,
      "word_count": 29
    },
    {
      "text": "By using migration files, we can keep track of modifications made to the\ndatabase models over time and debug issues as they arise.",
      "sentence_number": 1622,
      "word_count": 23
    },
    {
      "text": "Second, we use the migrate command, which runs the commands in our\nmigrations file, to construct the database.",
      "sentence_number": 1623,
      "word_count": 18
    },
    {
      "text": "Ensure that the local server is stopped.",
      "sentence_number": 1624,
      "word_count": 7
    },
    {
      "text": "You can stop it by typing Control + c\non the command line.",
      "sentence_number": 1625,
      "word_count": 13
    },
    {
      "text": "After that, run python manage.py makemigrations\nposts and python manage.py migrate.",
      "sentence_number": 1626,
      "word_count": 11
    },
    {
      "text": "Please keep in mind that the last name is optional after makemigrations.",
      "sentence_number": 1627,
      "word_count": 12
    },
    {
      "text": "A\nmigrations file will be generated for all accessible modifications in the\nDjango project if you simply execute python manage.py makemigrations.",
      "sentence_number": 1628,
      "word_count": 21
    },
    {
      "text": "That makes sense for a small project with a single app, like ours, but not for\nthe vast majority of Django projects, which typically involve multiple apps.",
      "sentence_number": 1629,
      "word_count": 27
    },
    {
      "text": "So, if you updated the model across different apps, the resulting migrations\nfile would reflect all of those revisions.",
      "sentence_number": 1630,
      "word_count": 19
    },
    {
      "text": "Clearly, this is not the best scenario.",
      "sentence_number": 1631,
      "word_count": 7
    },
    {
      "text": "The smaller and more concise a migrations file is, the simpler it is to debug\nand undo any mistakes.",
      "sentence_number": 1632,
      "word_count": 19
    },
    {
      "text": "To this end, it is recommended that the name of an\napplication be specified whenever the makemigrations command is run.",
      "sentence_number": 1633,
      "word_count": 20
    },
    {
      "text": "Django Admin\nDjango's robust admin interface, which allows users to visually interact with\ndata, is a major selling point for the framework.",
      "sentence_number": 1634,
      "word_count": 22
    },
    {
      "text": "This is partly because\nDjango's origins lie in its employment as a content management system for\nnewspapers (Content Management System).",
      "sentence_number": 1635,
      "word_count": 20
    },
    {
      "text": "The goal was to provide a place\nfor writers to draft and revise articles outside the \"code\" environment.",
      "sentence_number": 1636,
      "word_count": 18
    },
    {
      "text": "The in-\nbuilt admin app has matured into a powerful, ready-made resource for\nhandling any and all parts of a Django project.",
      "sentence_number": 1637,
      "word_count": 22
    },
    {
      "text": "It is necessary to generate a superuser before accessing the Django admin.",
      "sentence_number": 1638,
      "word_count": 12
    },
    {
      "text": "Type python manage.py createsuperuser into the command prompt and enter\na username, email address, and password when prompted.",
      "sentence_number": 1639,
      "word_count": 18
    },
    {
      "text": "python manage.py createsuperuser\nUsername (leave blank to use 'jide'): Abby\nEmail address: abytobyvictoryme@gmail.com\nPassword:\nPassword (again):\nSuperuser created successfully.",
      "sentence_number": 1640,
      "word_count": 19
    },
    {
      "text": "The command line console will hide your password as you write it for\nsecurity purposes.",
      "sentence_number": 1641,
      "word_count": 15
    },
    {
      "text": "Run python manage.py runserver to restart the Django\nserver, then navigate to http://127.0.0.1:8000/admin/ in a web browser.",
      "sentence_number": 1642,
      "word_count": 17
    },
    {
      "text": "A\nscreen prompting you to enter your admin login should appear.",
      "sentence_number": 1643,
      "word_count": 11
    },
    {
      "text": "Enter the new login details you just registered.",
      "sentence_number": 1644,
      "word_count": 8
    },
    {
      "text": "The next screen you see is the\nDjango administration dashboard:\nYou can adjust the LANGUAGE in the settings.py file.",
      "sentence_number": 1645,
      "word_count": 19
    },
    {
      "text": "It is set to American\nEnglish, en-us, by default.",
      "sentence_number": 1646,
      "word_count": 9
    },
    {
      "text": "You can access the admin, forms, and other\ndefault messages in a language other than English.",
      "sentence_number": 1647,
      "word_count": 16
    },
    {
      "text": "Our post app does not appear on any primary administration pages.",
      "sentence_number": 1648,
      "word_count": 11
    },
    {
      "text": "Before\nthis shows on the website, the admin.py file for an app needs to be updated in\nthe same way that the INSTALLED_APPS settings needs to be modified for\nthe app to be shown in the admin.",
      "sentence_number": 1649,
      "word_count": 37
    },
    {
      "text": "For the Post model to be visible, open admin.py in the posts folder in your\npreferred text editor and insert the following lines of code.",
      "sentence_number": 1650,
      "word_count": 25
    },
    {
      "text": "from .models import Post\nadmin.site.register(Post)\nNow, run the server again and go to the page.",
      "sentence_number": 1651,
      "word_count": 15
    },
    {
      "text": "Let's add our first post to the message board to our database.",
      "sentence_number": 1652,
      "word_count": 12
    },
    {
      "text": "Click the \"+\nAdd\" button next to \"Posts\" and type your own text in the \"Text\" field.",
      "sentence_number": 1653,
      "word_count": 17
    },
    {
      "text": "Then, click \"Save.\" This will take you back to the main Post page.",
      "sentence_number": 1654,
      "word_count": 13
    },
    {
      "text": "Yet, if you\ntake a closer look, you'll notice that our new entry is titled \"Post object (1).\"\nYou can change that.",
      "sentence_number": 1655,
      "word_count": 22
    },
    {
      "text": "Go to the posts folder and open the models.py file.",
      "sentence_number": 1656,
      "word_count": 10
    },
    {
      "text": "From there, add a new function with the following code:\ndef __str__(self):\nreturn self.text[:50]\nWe told the code to give the post a title based on the first 50 characters of the\npost on the page.",
      "sentence_number": 1657,
      "word_count": 36
    },
    {
      "text": "If you save this and refresh your admin page, you will see\nthe change:\nAll models should have str() methods to make them easier to read.",
      "sentence_number": 1658,
      "word_count": 26
    },
    {
      "text": "Views/Templates/URLs\nWe need to connect our views, templates, and URLs so that the data in our\ndatabase can be displayed on the front page.",
      "sentence_number": 1659,
      "word_count": 24
    },
    {
      "text": "You should recognize this\nstructure.",
      "sentence_number": 1660,
      "word_count": 5
    },
    {
      "text": "First, let's take in the view.",
      "sentence_number": 1661,
      "word_count": 6
    },
    {
      "text": "Earlier in the book, we displayed a template file\non our homepage using the built-in generic TemplateView.",
      "sentence_number": 1662,
      "word_count": 17
    },
    {
      "text": "To that end, we\nwill detail our database model's components.",
      "sentence_number": 1663,
      "word_count": 10
    },
    {
      "text": "Thankfully, this is very simple\nin web development, and Django provides the generic class-based ListView\nfor this purpose.",
      "sentence_number": 1664,
      "word_count": 18
    },
    {
      "text": "Copy and paste the following Python code into the posts/views.py file:\nfrom django.shortcuts import render\n# Create your views here.",
      "sentence_number": 1665,
      "word_count": 20
    },
    {
      "text": "from django.views.generic import ListView\nfrom .models import Post\nclass HomePageView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nThe ListView and Post models are imported on the first and second lines.",
      "sentence_number": 1666,
      "word_count": 29
    },
    {
      "text": "HomePageView is a subclass of ListView with the appropriate model and\ntemplate declared.",
      "sentence_number": 1667,
      "word_count": 13
    },
    {
      "text": "With the completion of our view, we can go on to the next steps of\ndeveloping our template and setting up our URLs.",
      "sentence_number": 1668,
      "word_count": 23
    },
    {
      "text": "So, let's get started with\nthe basic structure.",
      "sentence_number": 1669,
      "word_count": 8
    },
    {
      "text": "First, use Django to make a folder named templates.",
      "sentence_number": 1670,
      "word_count": 9
    },
    {
      "text": "mkdir templates\nThen we need to tell Django to use this new templates directory by editing\nthe DIRS column in the Templates section in our settings.py file in the\ndjango project folder.",
      "sentence_number": 1671,
      "word_count": 32
    },
    {
      "text": "\"DIRS\": [BASE_DIR / \"templates\"],\nCreate a new file in the templates folder, home.html, using your preferred\ntext editor.",
      "sentence_number": 1672,
      "word_count": 18
    },
    {
      "text": "The template tag has a built-in looping capability, and ListView\nprovides us with a context variable named <model>_list, which is the name\nof our model.",
      "sentence_number": 1673,
      "word_count": 25
    },
    {
      "text": "We'll make a new variable called post and then use post.text to\nget at the field we want to show.",
      "sentence_number": 1674,
      "word_count": 20
    },
    {
      "text": "This is the script for the home.html file:\n<h1>Message board homepage</h1>\n<ul>\n{% for post in post_list %}\n<li>{{ post.text }}</li>\n{% endfor %}\n</ul>\nNow, lastly, we set up our URLs.",
      "sentence_number": 1675,
      "word_count": 32
    },
    {
      "text": "Go to the urls.py file inside the\ndjango_project folder.",
      "sentence_number": 1676,
      "word_count": 9
    },
    {
      "text": "Go to the point where we added our posts app and put\ninclude in the second line like so:\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"\", include(\"posts.urls\")),\n]\nNext, go to the posts folder and create the urls.py there too.",
      "sentence_number": 1677,
      "word_count": 48
    },
    {
      "text": "Update that with\nthe following code:\nfrom django.urls import path\nfrom .views import HomePageView\nurlpatterns = [\npath(\"\", HomePageView.as_view(), name=\"home\"),\n]\nUse python manage.py runserver to restart the server and navigate to the local\nurl in your browser.",
      "sentence_number": 1678,
      "word_count": 38
    },
    {
      "text": "Check the home page of our new app.",
      "sentence_number": 1679,
      "word_count": 8
    },
    {
      "text": "We're almost finished, but before we call it a day, let's make a few more\nforum posts in the Django backend and make sure they show up\nappropriately on the front page.",
      "sentence_number": 1680,
      "word_count": 32
    },
    {
      "text": "Let’s Add New Posts\nPlease return to the Admin and make two more posts in order to update our\nforum.",
      "sentence_number": 1681,
      "word_count": 20
    },
    {
      "text": "It will then display the prepared posts automatically on the homepage\nwhen you return to it.",
      "sentence_number": 1682,
      "word_count": 16
    },
    {
      "text": "Awesome!",
      "sentence_number": 1683,
      "word_count": 1
    },
    {
      "text": "Assuming no errors have been encountered, we may now set up the directory\nand make a .gitignore file.",
      "sentence_number": 1684,
      "word_count": 18
    },
    {
      "text": "Make a new .gitignore file in your text editor and\nadd the following line:\n.venv/\nThen, after using git status once more to verify that the .venv directory is\nbeing ignored, you can use git add -A to add the desired files and directories\nand a first commit message.",
      "sentence_number": 1685,
      "word_count": 49
    },
    {
      "text": "Tests\nPreviously, we used SimpleTestCase because we were testing fixed pages.",
      "sentence_number": 1686,
      "word_count": 11
    },
    {
      "text": "Since our project now incorporates a database, we must use TestCase to\ngenerate a replica of the production database for testing purposes.",
      "sentence_number": 1687,
      "word_count": 22
    },
    {
      "text": "We may\ncreate a new test database, populate it with sample data, and run tests against\nit instead of our live database, which is both safer and more efficient.",
      "sentence_number": 1688,
      "word_count": 29
    },
    {
      "text": "To generate test data, we will invoke the hook setUpTestData().",
      "sentence_number": 1689,
      "word_count": 10
    },
    {
      "text": "This feature,\nintroduced in Django 1.8, makes it possible to produce test data only once per\ntest case rather than once each test, making it much faster than using the\nsetUp() hook from Python's unittest.",
      "sentence_number": 1690,
      "word_count": 35
    },
    {
      "text": "However, setUp() is still commonly\nused in Django projects.",
      "sentence_number": 1691,
      "word_count": 9
    },
    {
      "text": "Any such tests should be migrated to setUpTestData,\nas this is a proven method of increasing the overall speed of a test suite.",
      "sentence_number": 1692,
      "word_count": 23
    },
    {
      "text": "Let's get our data in order and then double-check that it was saved correctly\nin the database, as there is only one field in our Post model: text.",
      "sentence_number": 1693,
      "word_count": 28
    },
    {
      "text": "To make\nsure Django runs them, all test methods should begin with test*.",
      "sentence_number": 1694,
      "word_count": 13
    },
    {
      "text": "The code\nwill look like this:\nfrom django.test import TestCase\n# Create your tests here.",
      "sentence_number": 1695,
      "word_count": 15
    },
    {
      "text": "from .models import Post\nclass PostTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.post = Post.objects.create(text=\"This is a test!\")\ndef test_model_content(self):\nself.assertEqual(self.post.text, \"This is a test!\")\nTestCase and Post are imported first.",
      "sentence_number": 1696,
      "word_count": 28
    },
    {
      "text": "PostTests extends TestCase and uses\nsetUpTestData to create initial data.",
      "sentence_number": 1697,
      "word_count": 10
    },
    {
      "text": "In this case, cls.post stores a single item\nthat may be referred to as self.post in the following tests.",
      "sentence_number": 1698,
      "word_count": 19
    },
    {
      "text": "Our first test, test\nmodel content, uses assertEqual to verify text field content.",
      "sentence_number": 1699,
      "word_count": 13
    },
    {
      "text": "Go to the command line and run this:\npython manage.py test\n(.venv)> python manage.py test\nFound 1 test(s).",
      "sentence_number": 1700,
      "word_count": 18
    },
    {
      "text": "Creating test database for alias 'default'.",
      "sentence_number": 1701,
      "word_count": 6
    },
    {
      "text": "System check identified no issues (0 silenced).",
      "sentence_number": 1702,
      "word_count": 7
    },
    {
      "text": "----------------------------------------------------------------------\nRan 1 test in 0.002s\nOK\nDestroying test database for alias 'default'.",
      "sentence_number": 1703,
      "word_count": 13
    },
    {
      "text": "The test shows no errors!",
      "sentence_number": 1704,
      "word_count": 5
    },
    {
      "text": "Still, the output ran only one test when we have two\nfunctions.",
      "sentence_number": 1705,
      "word_count": 12
    },
    {
      "text": "Note that we set the test to only check functions that start with the\nname test*!",
      "sentence_number": 1706,
      "word_count": 16
    },
    {
      "text": "Now, let’s check our URLs, views, and templates as we did in chapter 3.",
      "sentence_number": 1707,
      "word_count": 14
    },
    {
      "text": "We\nwill also check\nURL for / and a 200 HTTP status code.",
      "sentence_number": 1708,
      "word_count": 13
    },
    {
      "text": "URL for “home”.",
      "sentence_number": 1709,
      "word_count": 3
    },
    {
      "text": "The home page shows “home.html” content correctly\nSince only one webpage is involved in this project, all of these tests may be\nincorporated into the already PostTests class.",
      "sentence_number": 1710,
      "word_count": 28
    },
    {
      "text": "In the header, select \"import\nreverse,\" then add the tests as seen below.",
      "sentence_number": 1711,
      "word_count": 13
    },
    {
      "text": "from django.test import TestCase\nfrom django.urls import reverse\nfrom .models import Post\nclass PostTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.post = Post.objects.create(text=\"This is a test!\")\ndef test_model_content(self):\nself.assertEqual(self.post.text, \"This is a test!\")\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_available_by_name(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\ndef test_template_name_correct(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertTemplateUsed(response, \"home.html\")\ndef test_template_content(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertContains(response, \"This is a test!\")\nWith this, run the test again:\npython manage.py test\nFound 5 test(s).",
      "sentence_number": 1712,
      "word_count": 73
    },
    {
      "text": "Creating test database for alias 'default'.",
      "sentence_number": 1713,
      "word_count": 6
    },
    {
      "text": "System check identified no issues (0 silenced).",
      "sentence_number": 1714,
      "word_count": 7
    },
    {
      "text": "----------------------------------------------------------------------\nRan 5 tests in 0.131s\nOK\nDestroying test database for alias 'default'.",
      "sentence_number": 1715,
      "word_count": 13
    },
    {
      "text": "In the previous chapter, we discussed how unit tests work best when they are\nself-contained and highly verbose.",
      "sentence_number": 1716,
      "word_count": 18
    },
    {
      "text": "However, the last three tests are testing\nthat the homepage works as expected: it uses the correct URL name, the\nintended template name, and contains expected content.",
      "sentence_number": 1717,
      "word_count": 27
    },
    {
      "text": "We can combine\nthese three tests into one single unit test, test_homepage.",
      "sentence_number": 1718,
      "word_count": 12
    },
    {
      "text": "from django.test import TestCase\nfrom django.urls import reverse\nfrom .models import Post\nclass PostTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.post = Post.objects.create(text=\"This is a test!\")\ndef test_model_content(self):\nself.assertEqual(self.post.text, \"This is a test!\")\ndef test_url_exists_at_correct_location(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_homepage(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nself.assertTemplateUsed(response, \"home.html\")\nself.assertContains(response, \"This is a test!\")\nWe want our test suite to cover as much of the code as feasible while still\nbeing straightforward to reason about (both the error messages and the testing\ncode itself).",
      "sentence_number": 1719,
      "word_count": 81
    },
    {
      "text": "This revision is much simpler to read and comprehend, in my\nopinion.",
      "sentence_number": 1720,
      "word_count": 12
    },
    {
      "text": "Now that we've finished making changes to the code for testing, we can\ncommit them to git.",
      "sentence_number": 1721,
      "word_count": 17
    },
    {
      "text": "(.venv) > git add -A\n(.venv) > git commit -m \"added tests\"\n[main 89ba70d] added tests\n2 files changed, 20 insertions(+), 1 deletion(-)\ncreate mode 100644 posts/__pycache__/tests.cpython-310.pyc\nStoring to GitHub\nWe should use GitHub to host our source code.",
      "sentence_number": 1722,
      "word_count": 39
    },
    {
      "text": "Message-board is the name of\nthe repository you will be creating, and if you haven't already done so, log\ninto GitHub and sign up for an account.",
      "sentence_number": 1723,
      "word_count": 27
    },
    {
      "text": "For more discreet communication,\nchoose the \"Private\" option.",
      "sentence_number": 1724,
      "word_count": 8
    },
    {
      "text": "The option to \"or push an existing repository from the command line\" is at\nthe bottom of the following page.",
      "sentence_number": 1725,
      "word_count": 20
    },
    {
      "text": "If you replace my username with your own\nGitHub username, the two commands there should look like the next and may\nbe copied and pasted into your terminal:\ngit remote add origin https://github.com/MacVicquayns/message-board.git\ngit branch -M main\ngit push -u origin main\nSetup Heroku\nBy now, you should have a Heroku account.",
      "sentence_number": 1726,
      "word_count": 52
    },
    {
      "text": "The following is our deployment\nchecklist:\ninstall Gunicorn\nsetup requirements.txt\nedit the ALLOWED_HOSTS in settings.py\ncreate Procfile\ncreate runtime.txt\nUse Pip to install Gunicorn.",
      "sentence_number": 1727,
      "word_count": 24
    },
    {
      "text": "python -m pip install gunicorn==20.1.0\nIn the past, we would simply set ALLOWED HOSTS to * to accept all hosts,\nbut this proved to be a flawed and potentially harmful shortcut.",
      "sentence_number": 1728,
      "word_count": 31
    },
    {
      "text": "Our level of\nspecificity may and should be increased.",
      "sentence_number": 1729,
      "word_count": 9
    },
    {
      "text": "Django can be used on either\nlocalhost:8000 or 127.0.0.1:8000.",
      "sentence_number": 1730,
      "word_count": 9
    },
    {
      "text": "Having used Heroku before, we know that\nall Heroku sites will have the.herokuapp.com extension.",
      "sentence_number": 1731,
      "word_count": 14
    },
    {
      "text": "All three hosts may\nbe included in the ALLOWED HOSTS setting.",
      "sentence_number": 1732,
      "word_count": 11
    },
    {
      "text": "Open your settings.py in the\ndjango_project folder and update the ALLOWED_HOSTS list with the\nfollowing:\n\".herokuapp.com\", \"localhost\", \"127.0.0.1\"\nNow, create your Procfile and put this code in it:\nweb: gunicorn django_project.wsgi --log-file -\nLastly, create a runtime.txt file in the base folder like Procfile.",
      "sentence_number": 1733,
      "word_count": 44
    },
    {
      "text": "And populate\nwith this line:\npython 3.10.1\nNow, commit the new changes to git.",
      "sentence_number": 1734,
      "word_count": 14
    },
    {
      "text": "Deploy to Heroku\nFirst, log in to your Heroku account with the heroku login command.",
      "sentence_number": 1735,
      "word_count": 15
    },
    {
      "text": "Then\nuse the heroku create to create a new server.",
      "sentence_number": 1736,
      "word_count": 10
    },
    {
      "text": "Type in the following to tell Heroku to ignore static pages.",
      "sentence_number": 1737,
      "word_count": 11
    },
    {
      "text": "This is skipped\nwhen you are creating a blog app.",
      "sentence_number": 1738,
      "word_count": 10
    },
    {
      "text": "heroku config:set DISABLE_COLLECTSTATIC=1\nAfter that, we push the code to Heroku.",
      "sentence_number": 1739,
      "word_count": 11
    },
    {
      "text": "git push heroku main\nThen we scale it.",
      "sentence_number": 1740,
      "word_count": 8
    },
    {
      "text": "heroku ps:scale web=1\nFrom the command line, type heroku open to open the new project's URL in a\nnew browser window.",
      "sentence_number": 1741,
      "word_count": 21
    },
    {
      "text": "Closing the present virtual environment is as simple as\ntyping \"deactivate\" at the prompt.",
      "sentence_number": 1742,
      "word_count": 14
    },
    {
      "text": "That’s it.",
      "sentence_number": 1743,
      "word_count": 2
    },
    {
      "text": "We have built a complete forum message board app.",
      "sentence_number": 1744,
      "word_count": 9
    },
    {
      "text": "Well done.",
      "sentence_number": 1745,
      "word_count": 2
    },
    {
      "text": "In\nthe next section, we will create a blog app.",
      "sentence_number": 1746,
      "word_count": 10
    },
    {
      "text": "C 5 – B A\nHAPTER LOG PP\nThis chapter will focus on developing a Blog application where users may\nadd, modify, and remove posts.",
      "sentence_number": 1747,
      "word_count": 25
    },
    {
      "text": "Each blog post will have its own detail page in addition to being shown on\nthe homepage.",
      "sentence_number": 1748,
      "word_count": 17
    },
    {
      "text": "Also covered will be the basics of styling using CSS and how\nDjango handles static files.",
      "sentence_number": 1749,
      "word_count": 16
    },
    {
      "text": "Initial Set Up\nThe first six steps we take in our development course have not changed.",
      "sentence_number": 1750,
      "word_count": 16
    },
    {
      "text": "Set\nup the new Django project in the following steps:\ncreate a new base folder and call it blog\nstart a new virtual and install Django\nstart a new Django project and call it django_project\nstart a new app and call it blog\nmigrate the code to set up the database\nedit the settings.py file with the correct details.",
      "sentence_number": 1751,
      "word_count": 59
    },
    {
      "text": "Let’s get started.",
      "sentence_number": 1752,
      "word_count": 3
    },
    {
      "text": "This is the sequence for Windows:\nThis is for MacOs:\nNow go to the settings.py file and update the INSTALLED_APPS section:\nNow, run the server and check the local url.",
      "sentence_number": 1753,
      "word_count": 30
    },
    {
      "text": "Initial setup complete!",
      "sentence_number": 1754,
      "word_count": 3
    },
    {
      "text": "Well done.",
      "sentence_number": 1755,
      "word_count": 2
    },
    {
      "text": "Database Models\nWhat are the standard features of a blog platform?",
      "sentence_number": 1756,
      "word_count": 11
    },
    {
      "text": "Say each post contains a\nheading, author name, and article.",
      "sentence_number": 1757,
      "word_count": 10
    },
    {
      "text": "The following code can be pasted into the\nmodels.py file in the blog folder to create a database model:\nfrom django.db import models\nfrom django.urls import reverse\nclass Post(models.Model):\ntitle = models.CharField(max_length=200)\nauthor = models.ForeignKey(\n\"auth.User\",\non_delete=models.CASCADE,\n)\nbody = models.TextField()\ndef __str__(self):\nreturn self.title\ndef get_absolute_url(self):\nreturn reverse(\"post_detail\", kwargs={\"pk\": self.pk})\nOnce the new database model is complete, a migration record can be made,\nand an update may be made to the database.",
      "sentence_number": 1758,
      "word_count": 73
    },
    {
      "text": "Press Ctrl + c to terminate the server.",
      "sentence_number": 1759,
      "word_count": 8
    },
    {
      "text": "You can finish this two-stage procedure by following the instructions below.",
      "sentence_number": 1760,
      "word_count": 11
    },
    {
      "text": "python manage.py makemigrations blog\npython manage.py migrate\nWith these lines, we have created our database.",
      "sentence_number": 1761,
      "word_count": 15
    },
    {
      "text": "Admin Access\nHow will we access our data?",
      "sentence_number": 1762,
      "word_count": 8
    },
    {
      "text": "We need to create Django's backend admin.",
      "sentence_number": 1763,
      "word_count": 7
    },
    {
      "text": "Type the following command and then follow the prompts to create a\nsuperuser account with a unique email address and password.",
      "sentence_number": 1764,
      "word_count": 21
    },
    {
      "text": "For security\nreasons, your password will not display as you type it.",
      "sentence_number": 1765,
      "word_count": 12
    },
    {
      "text": "python manage.py createsuperuser\nNow, we update the admin.py file.",
      "sentence_number": 1766,
      "word_count": 9
    },
    {
      "text": "from django.contrib import admin\nfrom .models import Post\nadmin.site.register(Post)\nLet's add on a couple more blog posts.",
      "sentence_number": 1767,
      "word_count": 17
    },
    {
      "text": "To add a new post, select the + Add\nbutton that appears next to Posts.",
      "sentence_number": 1768,
      "word_count": 15
    },
    {
      "text": "All model fields are mandatory by default.",
      "sentence_number": 1769,
      "word_count": 7
    },
    {
      "text": "Therefore be careful to give each post an \"author\" tag.",
      "sentence_number": 1770,
      "word_count": 10
    },
    {
      "text": "In order to display the data on our web application, we must now develop the\nviews, URLs, and templates required to interact with the database.",
      "sentence_number": 1771,
      "word_count": 25
    },
    {
      "text": "URLs\nTo achieve this, we will first configure our urls.py file in the django_project\nfolder, as we have done in previous chapters, and then our app-level blog\nfolder’s urls.py file.",
      "sentence_number": 1772,
      "word_count": 30
    },
    {
      "text": "Make a new file in the blog app named urls.py and paste the following into it\nusing your text editor.",
      "sentence_number": 1773,
      "word_count": 20
    },
    {
      "text": "from django.urls import path\nfrom .views import BlogListView\nurlpatterns = [\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nWe imported the views we will do later.",
      "sentence_number": 1774,
      "word_count": 23
    },
    {
      "text": "We give it a name, home so that we\ncan use it in our views later on, and the empty string (\"\") instructs Python to\nmatch all values.",
      "sentence_number": 1775,
      "word_count": 28
    },
    {
      "text": "Although giving each URL a name isn't required, it's a good idea to help keep\ntrack of them as your list of URLs expands.",
      "sentence_number": 1776,
      "word_count": 24
    },
    {
      "text": "We also need to edit the urls.py file in the django_project folder so that it will\nsend all blog app requests there.",
      "sentence_number": 1777,
      "word_count": 22
    },
    {
      "text": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"\", include(\"blog.urls\")),\n]\nViews\nWe will be using class-based views.",
      "sentence_number": 1778,
      "word_count": 24
    },
    {
      "text": "Just a few lines of code in our views file,\nand we'll be able to see the results of our Post model in a ListView.",
      "sentence_number": 1779,
      "word_count": 25
    },
    {
      "text": "from django.shortcuts import render\n# Create your views here.",
      "sentence_number": 1780,
      "word_count": 9
    },
    {
      "text": "from django.views.generic import ListView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nTemplates\nNow that we have finished with our URLs and views, we can go on to the\nnext piece of the jigsaw, which is the templates.",
      "sentence_number": 1781,
      "word_count": 42
    },
    {
      "text": "Previously in Chapter 4, we\nlearned that we can keep our code tidy by adopting from other templates.",
      "sentence_number": 1782,
      "word_count": 18
    },
    {
      "text": "Therefore, we'll begin with a base.html file and an inherited home.html file.",
      "sentence_number": 1783,
      "word_count": 12
    },
    {
      "text": "Next, we'll add templates for making and revising blog articles, and those\nmay all derive from base.html.",
      "sentence_number": 1784,
      "word_count": 17
    },
    {
      "text": "We should begin by making a folder to store our new template files.",
      "sentence_number": 1785,
      "word_count": 13
    },
    {
      "text": "So, stop\nyour server and type in the code:\nmkdir templates\nMake two new template files in the templates folder.",
      "sentence_number": 1786,
      "word_count": 20
    },
    {
      "text": "Call them base.html and\nhome.html.",
      "sentence_number": 1787,
      "word_count": 5
    },
    {
      "text": "The next step is to edit the settings.py file to direct Django to the appropriate\nfolder to find our templates.",
      "sentence_number": 1788,
      "word_count": 20
    },
    {
      "text": "Add this line to the TEMPLATES section:\n\"DIRS\": [BASE_DIR / \"templates\"],\nIn the base.html file, put the following:\n<!-- templates/base.html -->\n<html>\n<head>\n<title>Django blog</title>\n</head>\n<body>\n<header>\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</header>\n<div>\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nPut this in the home.html:\n<!-- templates/home.html -->\n{% extends \"base.html\" %}\n{% block content %}\n{% for post in post_list %}\n<div class=\"post-entry\">\n<h2><a href=\"\">{{ post.title }}</a></h2>\n<p>{{ post.body }}</p>\n</div>\n{% endfor %}\n{% endblock content %}\nIf you run python manage.py runserver again and then reload the homepage,\nwe will notice that the Django server is up and running.",
      "sentence_number": 1789,
      "word_count": 109
    },
    {
      "text": "Now, that is our first website.",
      "sentence_number": 1790,
      "word_count": 6
    },
    {
      "text": "But it looks ugly!",
      "sentence_number": 1791,
      "word_count": 4
    },
    {
      "text": "Let’s fix that.",
      "sentence_number": 1792,
      "word_count": 3
    },
    {
      "text": "Add some Style!",
      "sentence_number": 1793,
      "word_count": 3
    },
    {
      "text": "We need to add some CSS to our project to enhance the styling.",
      "sentence_number": 1794,
      "word_count": 13
    },
    {
      "text": "A\nfundamental component of any contemporary web application is CSS,\nJavaScript, and pictures, which are referred to as \"static files\" in the Django\necosystem.",
      "sentence_number": 1795,
      "word_count": 24
    },
    {
      "text": "Although Django offers enormous flexibility in terms of how\nthese files are used, this can be very confusing for beginners.",
      "sentence_number": 1796,
      "word_count": 20
    },
    {
      "text": "Django will, by default, search each app for a subfolder called static.",
      "sentence_number": 1797,
      "word_count": 12
    },
    {
      "text": "Or a\nfolder with the name static in the blog folder.",
      "sentence_number": 1798,
      "word_count": 11
    },
    {
      "text": "If you remember, this is also\nhow the templates folder was created.",
      "sentence_number": 1799,
      "word_count": 12
    },
    {
      "text": "Stop the local server, then use the following line to create a static folder in the\nmanage.py file's location.",
      "sentence_number": 1800,
      "word_count": 19
    },
    {
      "text": "mkdir static\nWe must instruct Django to look in this new folder when loading static files.",
      "sentence_number": 1801,
      "word_count": 16
    },
    {
      "text": "There is already one line of configuration in the settings.py file, which you\ncan find at the bottom:\nNow, below that, we add the following line:\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\nWe instruct Django to look for static files in the newly formed static\nsubfolder.",
      "sentence_number": 1802,
      "word_count": 45
    },
    {
      "text": "Use this line to create a CSS subfolder:\nmkdir static/css\nUse your text editor to create a new file within this folder called base.css\ninside the new CSS subfolder.",
      "sentence_number": 1803,
      "word_count": 29
    },
    {
      "text": "Then fill it with this code to create a page title\nand color it red!",
      "sentence_number": 1804,
      "word_count": 15
    },
    {
      "text": "Almost there!",
      "sentence_number": 1805,
      "word_count": 2
    },
    {
      "text": "Add % load static % to the top of base.html to include the\nstatic files in the templates.",
      "sentence_number": 1806,
      "word_count": 18
    },
    {
      "text": "We only need to include it once because all of our\nother templates inherit from base.html.",
      "sentence_number": 1807,
      "word_count": 16
    },
    {
      "text": "Insert a new line after closing the\n<head> tag to include a direct link to the base.css file we just created.",
      "sentence_number": 1808,
      "word_count": 21
    },
    {
      "text": "<!-- templates/base.html -->\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\">\n<head>\n<title>Django blog</title>\n</head>\n<body>\n<header>\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</header>\n<div>\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nStart up the server again and check the URL.",
      "sentence_number": 1809,
      "word_count": 51
    },
    {
      "text": "We can also customize other things like font size, type, etc., by tweaking the\ncss file.",
      "sentence_number": 1810,
      "word_count": 16
    },
    {
      "text": "Individual Blog Pages\nIndividual blog posts can now have their stated features implemented.",
      "sentence_number": 1811,
      "word_count": 13
    },
    {
      "text": "A new\nview, URL, and template will have to be developed.",
      "sentence_number": 1812,
      "word_count": 11
    },
    {
      "text": "One must first take in the view.",
      "sentence_number": 1813,
      "word_count": 7
    },
    {
      "text": "To make things easier, we can utilize the\nDetailView, which is built on a generic class.",
      "sentence_number": 1814,
      "word_count": 16
    },
    {
      "text": "Add DetailView to the import\nat the top of the script and generate a new view named BlogDetailView.",
      "sentence_number": 1815,
      "word_count": 18
    },
    {
      "text": "from django.shortcuts import render\n# Create your views here.",
      "sentence_number": 1816,
      "word_count": 9
    },
    {
      "text": "from django.views.generic import ListView, DetailView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nLet's say we want to create a new URL path for our view.",
      "sentence_number": 1817,
      "word_count": 38
    },
    {
      "text": "Use the code seen\nbelow in the urls.py in the blog folder:\nfrom django.urls import path\nfrom .views import BlogListView, BlogDetailView\nurlpatterns = [\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nFor consistency, we've decided to prefix all blog post URLs with post/.",
      "sentence_number": 1818,
      "word_count": 43
    },
    {
      "text": "The\nnext thing to consider is the post entry's primary key, which we'll express as\nan integer, int:pk>.",
      "sentence_number": 1819,
      "word_count": 18
    },
    {
      "text": "I know what you're thinking: \"What is the main factor?\"\nOur database models already have an auto-incrementing primary key86\nbecause Django included it by default.",
      "sentence_number": 1820,
      "word_count": 25
    },
    {
      "text": "As a result, while we only stated the\nfields title, author, and body on our Post model, Django automatically added\nan additional field named id, which serves as our primary key.",
      "sentence_number": 1821,
      "word_count": 31
    },
    {
      "text": "Either an id or\na pk will work to get in.",
      "sentence_number": 1822,
      "word_count": 11
    },
    {
      "text": "For our first \"Hello, World!\" message, we'll use a pk of 1.",
      "sentence_number": 1823,
      "word_count": 12
    },
    {
      "text": "It's 2 for the\nsecond.",
      "sentence_number": 1824,
      "word_count": 5
    },
    {
      "text": "The URL structure of our initial post, which will lead us to its\nparticular entry page, will look like this: post/1/.",
      "sentence_number": 1825,
      "word_count": 21
    },
    {
      "text": "If you recall, the get absolute url method on our Post model accepts a pk\nargument in this case since the URL specifies it.",
      "sentence_number": 1826,
      "word_count": 24
    },
    {
      "text": "Primarily, new users often\nstruggle to grasp the relationship between primary keys and the get absolute\nurl method.",
      "sentence_number": 1827,
      "word_count": 18
    },
    {
      "text": "If you are still confused, it may help to read the previous two\nparagraphs again.",
      "sentence_number": 1828,
      "word_count": 15
    },
    {
      "text": "You'll get used to it after some repetition.",
      "sentence_number": 1829,
      "word_count": 8
    },
    {
      "text": "After running python manage.py runserver, our first blog post will have its\nown URL of http://127.0.0.1:8000/post/1/.",
      "sentence_number": 1830,
      "word_count": 16
    },
    {
      "text": "To view the second entry, please visit http://127.0.0.1:8000/post/2/.",
      "sentence_number": 1831,
      "word_count": 8
    },
    {
      "text": "The link on the homepage should be updated so that we can easily navigate to\ncertain blog entries.",
      "sentence_number": 1832,
      "word_count": 18
    },
    {
      "text": "Replace the current empty link with a href=\" % url 'post\ndetail' post.pk % \"> in home.html.",
      "sentence_number": 1833,
      "word_count": 17
    },
    {
      "text": "{% extends \"base.html\" %}\n{% block content %}\n{% for post in post_list %}\n<div class=\"post-entry\">\n<h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2>\n<p>{{ post.body }}</p>\n</div>\n{% endfor %}\n{% endblock content %}\nCheck and click the post from the home page.",
      "sentence_number": 1834,
      "word_count": 44
    },
    {
      "text": "Testing\nNew features have been added to our Blog project that we hadn't seen or tried\nbefore this section.",
      "sentence_number": 1835,
      "word_count": 19
    },
    {
      "text": "We now have a user, various views (a list view of all blog\nposts and a detail view for each article), and a Post model with numerous\nfields.",
      "sentence_number": 1836,
      "word_count": 28
    },
    {
      "text": "There is a lot to try out!",
      "sentence_number": 1837,
      "word_count": 7
    },
    {
      "text": "To start, we can prepare our test data and validate the Post model.",
      "sentence_number": 1838,
      "word_count": 13
    },
    {
      "text": "So, this is\nhow it may look in a nutshell:\nfrom django.test import TestCase\n# Create your tests here.",
      "sentence_number": 1839,
      "word_count": 19
    },
    {
      "text": "from django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom .models import Post\nclass BlogTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.user = get_user_model().objects.create_user(\nusername=\"testuser\", email=\"test@email.com\", password=\"secret\"\n)\ncls.post = Post.objects.create(\ntitle=\"A good title\",\nbody=\"Nice body content\",\nauthor=cls.user,\n)\ndef test_post_model(self):\nself.assertEqual(self.post.title, \"A good title\")\nself.assertEqual(self.post.body, \"Nice body content\")\nself.assertEqual(self.post.author.username, \"testuser\")\nself.assertEqual(str(self.post), \"A good title\")\nself.assertEqual(self.post.get_absolute_url(), \"/post/1/\")\ndef test_url_exists_at_correct_location_listview(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_exists_at_correct_location_detailview(self):\nresponse = self.client.get(\"/post/1/\")\nself.assertEqual(response.status_code, 200)\ndef test_post_listview(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nself.assertContains(response, \"Nice body content\")\nself.assertTemplateUsed(response, \"home.html\")\ndef test_post_detailview(self): # new\nresponse = self.client.get(reverse(\"post_detail\", kwargs={\"pk\": self.post.pk}))\nno_response = self.client.get(\"/post/100000/\")\nself.assertEqual(response.status_code, 200)\nself.assertEqual(no_response.status_code, 404)\nself.assertContains(response, \"A good title\")\nself.assertTemplateUsed(response, \"post_detail.html\")\nFirst, we test whether the requested URL exists in the correct folder for both\nviews.",
      "sentence_number": 1840,
      "word_count": 117
    },
    {
      "text": "Then, we ensure the home.html template is loaded, that the named\nURL is being utilized, that the right content is being returned, and that a\nsuccessful 200 status code is being returned by creating the test post listview.",
      "sentence_number": 1841,
      "word_count": 38
    },
    {
      "text": "To get a detail view of our test post, we must include the pk in response to\nthe test post - detailview method.",
      "sentence_number": 1842,
      "word_count": 23
    },
    {
      "text": "We keep using the same template but\nexpand our tests to cover more edge cases.",
      "sentence_number": 1843,
      "word_count": 15
    },
    {
      "text": "Since we haven't written\ntwo articles, we don't want a response at /post/100000/, for example.",
      "sentence_number": 1844,
      "word_count": 15
    },
    {
      "text": "We also\nprefer to avoid an HTTP status code of 404.",
      "sentence_number": 1845,
      "word_count": 11
    },
    {
      "text": "Incorrect examples of tests that\nshould fail should be sprinkled in from time to time to ensure that your tests\naren't all passing by accident.",
      "sentence_number": 1846,
      "word_count": 25
    },
    {
      "text": "Run the new tests to make sure everything is working as it should.",
      "sentence_number": 1847,
      "word_count": 13
    },
    {
      "text": "Git\nNow, let us do our first Git commit.",
      "sentence_number": 1848,
      "word_count": 9
    },
    {
      "text": "First, initialize our folder, create the\n.gitignore and review all the content we’ve added by checking the git status.",
      "sentence_number": 1849,
      "word_count": 19
    },
    {
      "text": "(.venv) > git status\n(.venv) > git add -A\n(.venv) > git commit -m \"initial commit\"\nWe have successfully created a working blog application from scratch.",
      "sentence_number": 1850,
      "word_count": 26
    },
    {
      "text": "Django's admin panel allows us to quickly generate, modify, and remove\ncontent.",
      "sentence_number": 1851,
      "word_count": 12
    },
    {
      "text": "For the first time, we were able to create a detailed view of each blog\npost separately by employing DetailView.",
      "sentence_number": 1852,
      "word_count": 20
    },
    {
      "text": "C 6 – D W F\nHAPTER JANGO EB ORMS\nIn this chapter, we'll continue developing the Blog application we started in\nChapter 5 by adding the necessary forms for users to add, modify, or remove\nentries from their blogs.",
      "sentence_number": 1853,
      "word_count": 40
    },
    {
      "text": "To accept user input raises security problems,\nmaking HTML forms one of the more complex and error-prone components\nof online development.",
      "sentence_number": 1854,
      "word_count": 21
    },
    {
      "text": "All submitted forms must be rendered correctly,\nvalidated, and stored in the database.",
      "sentence_number": 1855,
      "word_count": 13
    },
    {
      "text": "Django's powerful in-built Forms abstract away much of the difficulties,\nmaking it unnecessary to write this code from scratch.",
      "sentence_number": 1856,
      "word_count": 19
    },
    {
      "text": "Displaying, making\nchanges to, or removing a form are some of the many commonplace actions\nthat Django's built-in generic editing views are catered to.",
      "sentence_number": 1857,
      "word_count": 24
    },
    {
      "text": "CreateView\nThe first step is to provide a link to a website where new blog entries may be\nentered into our primary template.",
      "sentence_number": 1858,
      "word_count": 23
    },
    {
      "text": "It will look like this: <a href=\"% url \"post\nnew\"%></a>.",
      "sentence_number": 1859,
      "word_count": 10
    },
    {
      "text": "Your revised script should now look like this:\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link href=\"https://fonts.googleapis.com/css?family=\\\nSource+Sans+Pro:400\" rel=\"stylesheet\">\n<link href=\"{% static 'css/base.css' %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div>\n<header>\n<div class=\"nav-left\">\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</div>\n<div class=\"nav-right\">\n<a href=\"{% url 'post_new' %}\">+ New Blog Post</a>\n</div>\n</header>\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nWith this code, we have added the feature to post new content.",
      "sentence_number": 1860,
      "word_count": 74
    },
    {
      "text": "But now, we\nneed to add a new URL for the post_new feature.",
      "sentence_number": 1861,
      "word_count": 13
    },
    {
      "text": "We need to import\nBlogCreateView in the urls.py file and add a URL path for post/new/.",
      "sentence_number": 1862,
      "word_count": 16
    },
    {
      "text": "from django.urls import path\nfrom .views import BlogListView, BlogDetailView, BlogCreateView\nurlpatterns = [\npath(\"post/new/\", BlogCreateView.as_view(), name=\"post_new\"),\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nWe have seen this URL, views, and template pattern before.",
      "sentence_number": 1863,
      "word_count": 33
    },
    {
      "text": "To build our\nview, we'll import the general class CreateView at the top and then subclass it\nto make a new view called BlogCreateView.",
      "sentence_number": 1864,
      "word_count": 24
    },
    {
      "text": "Now in the views.py file, update the code to be the following:\nfrom django.views.generic import ListView, DetailView\nfrom django.views.generic.edit import CreateView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nclass BlogCreateView(CreateView):\nmodel = Post\ntemplate_name = \"post_new.html\"\nfields = [\"title\", \"author\", \"body\"]\nThe BlogCreateView class is where we define the Post database model, name\nour template post new.html, and establish the visibility of the title, author,\nand body fields in the underlying Post database table.",
      "sentence_number": 1865,
      "word_count": 87
    },
    {
      "text": "The final action is to make a template in the text editor and name it\npost_new.html.",
      "sentence_number": 1866,
      "word_count": 16
    },
    {
      "text": "Then, add the following code to your file:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>New post</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<input type=\"submit\" value=\"Save\">\n</form>\n{% endblock content %}\nLet’s break it down:\nIn the first line, we must inherit features from our base template.",
      "sentence_number": 1867,
      "word_count": 50
    },
    {
      "text": "We are using an HTML form, so the <form> tags with the POST\nmethod are essential because we are sending.",
      "sentence_number": 1868,
      "word_count": 20
    },
    {
      "text": "If it was to receive, like\na search box, for example, instead of POST, we would use GET.",
      "sentence_number": 1869,
      "word_count": 18
    },
    {
      "text": "Add a {% csrf_token %} from Django provides to protect our form\nfrom bots.",
      "sentence_number": 1870,
      "word_count": 14
    },
    {
      "text": "We use {{ form.as_p }} to render the specified fields within\nparagraph <p> tags.",
      "sentence_number": 1871,
      "word_count": 14
    },
    {
      "text": "Lastly, set the value \"Save\" for a submit type input.",
      "sentence_number": 1872,
      "word_count": 10
    },
    {
      "text": "Launch the server with python manage.py runserver and navigate to the\nhomepage to check at http://127.0.0.1:8000/.",
      "sentence_number": 1873,
      "word_count": 16
    },
    {
      "text": "Click the \"+ New Blog Post\" option to add a new blog post.",
      "sentence_number": 1874,
      "word_count": 13
    },
    {
      "text": "If you click it,\nyou'll be taken to a new page at http://127.0.0.1:8000/post/new/.",
      "sentence_number": 1875,
      "word_count": 13
    },
    {
      "text": "Try your hand at writing a new blog entry and publishing it by selecting\n\"Save\" from the file menu.",
      "sentence_number": 1876,
      "word_count": 19
    },
    {
      "text": "When it's done, it'll take you to a post-specific detail page at\nhttp://127.0.0.1:8000/post/3/.",
      "sentence_number": 1877,
      "word_count": 13
    },
    {
      "text": "Let Anyone Edit The Blog\nDeveloping an edit form for blog entries should follow a similar pattern.",
      "sentence_number": 1878,
      "word_count": 17
    },
    {
      "text": "To\ngenerate the necessary template, url, and view, we'll again leverage a built-in\nDjango class-based generic view, UpdateView.",
      "sentence_number": 1879,
      "word_count": 18
    },
    {
      "text": "To begin, on each blog page there should be a link to post detail.html where\nthe post can be edited.",
      "sentence_number": 1880,
      "word_count": 20
    },
    {
      "text": "The following is the update:\n{% extends \"base.html\" %}\n{% block content %}\n<div class=\"post-entry\">\n<h2>{{ post.title }}</h2>\n<p>{{ post.body }}</p>\n</div>\n<a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a>\n{% endblock content %}\nWe use <a href>...</a> and {% url .",
      "sentence_number": 1881,
      "word_count": 43
    },
    {
      "text": "%} tag to add the link.",
      "sentence_number": 1882,
      "word_count": 6
    },
    {
      "text": "Within the tags,\nwe specified the name of the new url, which we will call post_edit, and we\nalso passed the needed argument, which is the primary key of the post.pk.",
      "sentence_number": 1883,
      "word_count": 31
    },
    {
      "text": "Now, let us create a template file for the new edit page.",
      "sentence_number": 1884,
      "word_count": 12
    },
    {
      "text": "Call it post_edit.html\nand add the following code:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>Edit post</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<input type=\"submit\" value=\"Update\">\n</form>\n{% endblock content %}\nFor the view.",
      "sentence_number": 1885,
      "word_count": 37
    },
    {
      "text": "Open the views.py file and import UpdateView on the second-\nfrom-the-top line and then subclass it in the new view BlogUpdateView.",
      "sentence_number": 1886,
      "word_count": 21
    },
    {
      "text": "Here is the updated code:\nfrom django.views.generic import ListView, DetailView\nfrom django.views.generic.edit import CreateView, UpdateView\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nclass BlogCreateView(CreateView):\nmodel = Post\ntemplate_name = \"post_new.html\"\nfields = [\"title\", \"author\", \"body\"]\nclass BlogUpdateView(UpdateView):\nmodel = Post\ntemplate_name = \"post_edit.html\"\nfields = [\"title\", \"body\"]\nThe final action is to modify the file urls.py in the way described below.",
      "sentence_number": 1887,
      "word_count": 74
    },
    {
      "text": "We\nrecommend placing the BlogUpdateView and the new route at the very top of\nthe old urlpatterns.",
      "sentence_number": 1888,
      "word_count": 17
    },
    {
      "text": "from django.urls import path\nfrom .views import (\nBlogListView,\nBlogDetailView,\nBlogCreateView,\nBlogUpdateView,\n)\nurlpatterns = [\npath(\"post/new/\", BlogCreateView.as_view(), name=\"post_new\"),\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"post/<int:pk>/edit/\", BlogUpdateView.as_view(), name=\"post_edit\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nNow, if you click on a blog post, the Edit button will show like this:\nIf you click “+ Edit Blog Post,” it will redirect you to /post/3/edit/.",
      "sentence_number": 1889,
      "word_count": 57
    },
    {
      "text": "You can\nedit anything.",
      "sentence_number": 1890,
      "word_count": 4
    },
    {
      "text": "When we modify and click the \"Update\" button, we're taken to the post's\ndetail page, where we can see the update.",
      "sentence_number": 1891,
      "word_count": 21
    },
    {
      "text": "This is due to our get_absolute_url\nconfiguration.",
      "sentence_number": 1892,
      "word_count": 7
    },
    {
      "text": "If you go to the homepage now, you'll see the updated\ninformation alongside the rest of the posts.",
      "sentence_number": 1893,
      "word_count": 18
    },
    {
      "text": "Let Users Delete Posts\nAs with the post-update form, the post-deletion form is created similarly.",
      "sentence_number": 1894,
      "word_count": 15
    },
    {
      "text": "To build the required view, url, and template, we'll employ another generic\nclass-based view, DeleteView.",
      "sentence_number": 1895,
      "word_count": 15
    },
    {
      "text": "To get started, go to post_detail.html to include a delete button on the page.",
      "sentence_number": 1896,
      "word_count": 14
    },
    {
      "text": "Use the following code:\n{% extends \"base.html\" %}\n{% block content %}\n<div class=\"post-entry\">\n<h2>{{ post.title }}</h2>\n<p>{{ post.body }}</p>\n</div>\n<p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p>\n<p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p>\n{% endblock content %}\nMake a new template for our post delete page.",
      "sentence_number": 1897,
      "word_count": 52
    },
    {
      "text": "A file with the following\ncontents will be created named post_delete.html:\n{% extends \"base.html\" %}\n{% block content %}\n<h1>Delete post</h1>\n<form action=\"\" method=\"post\">{% csrf_token %}\n<p>Are you sure you want to delete \"{{ post.title }}\"?</p>\n<input type=\"submit\" value=\"Confirm\">\n</form>\n{% endblock content %}\nIn this case, the title of our blog post is being shown via the post.title\nvariable.",
      "sentence_number": 1898,
      "word_count": 60
    },
    {
      "text": "Since object.title is also a feature of DetailView, we could use that\ninstead.",
      "sentence_number": 1899,
      "word_count": 13
    },
    {
      "text": "Create a new view that extends DeleteView, then update the views.py file to\nimport DeleteView and reverse lazy at the beginning.",
      "sentence_number": 1900,
      "word_count": 21
    },
    {
      "text": "from django.views.generic import ListView, DetailView\nfrom django.views.generic.edit import CreateView, UpdateView, DeleteView\nfrom django.urls import reverse_lazy\nfrom .models import Post\nclass BlogListView(ListView):\nmodel = Post\ntemplate_name = \"home.html\"\nclass BlogDetailView(DetailView):\nmodel = Post\ntemplate_name = \"post_detail.html\"\nclass BlogCreateView(CreateView):\nmodel = Post\ntemplate_name = \"post_new.html\"\nfields = [\"title\", \"author\", \"body\"]\nclass BlogUpdateView(UpdateView):\nmodel = Post\ntemplate_name = \"post_edit.html\"\nfields = [\"title\", \"body\"]\nclass BlogDeleteView(DeleteView):\nmodel = Post\ntemplate_name = \"post_delete.html\"\nsuccess_url = reverse_lazy(\"home\")\nDeleteView takes three parameters: a Post model, a post delete.html template,\nand a success url property.",
      "sentence_number": 1901,
      "word_count": 87
    },
    {
      "text": "Exactly what effect does this have?",
      "sentence_number": 1902,
      "word_count": 6
    },
    {
      "text": "After deleting\na blog article, we want to send the user to the homepage.",
      "sentence_number": 1903,
      "word_count": 14
    },
    {
      "text": "In addition to CreateView, UpdateView also has redirects, but we did not\nneed to supply a success url because of this.",
      "sentence_number": 1904,
      "word_count": 21
    },
    {
      "text": "Because if get absolute url() is\npresent on the model object, Django will utilize it by default.",
      "sentence_number": 1905,
      "word_count": 17
    },
    {
      "text": "In addition, this\nattribute is only shown to those that take the time to study and memorize the\ndocumentation, namely the sections on model forms and success url.",
      "sentence_number": 1906,
      "word_count": 28
    },
    {
      "text": "Or the likelihood of an error occurring and subsequent backtracking to\nresolve this Django-specific behavior is increased.",
      "sentence_number": 1907,
      "word_count": 17
    },
    {
      "text": "In this case, we use reverse_lazy rather than just reverse to delay the URL\nredirect's execution until after our view has completed removing the blog\narticle.",
      "sentence_number": 1908,
      "word_count": 26
    },
    {
      "text": "Final step: Make a URL by importing our view BlogDeleteView and\nappending a new pattern:\nfrom django.urls import path\nfrom .views import (\nBlogListView,\nBlogDetailView,\nBlogCreateView,\nBlogUpdateView,\nBlogDeleteView,\n)\nurlpatterns = [\npath(\"post/new/\", BlogCreateView.as_view(), name=\"post_new\"),\npath(\"post/<int:pk>/\", BlogDetailView.as_view(), name=\"post_detail\"),\npath(\"post/<int:pk>/edit/\", BlogUpdateView.as_view(), name=\"post_edit\"),\npath(\"post/<int:pk>/delete/\", BlogDeleteView.as_view(), name=\"post_delete\"),\npath(\"\", BlogListView.as_view(), name=\"home\"),\n]\nOnce you've restarted the server with the python manage.py runserver\ncommand, you can refresh any post page to reveal our \"Delete Blog Post\"\noption.",
      "sentence_number": 1909,
      "word_count": 72
    },
    {
      "text": "The new page will show if you click it, asking you to confirm.",
      "sentence_number": 1910,
      "word_count": 13
    },
    {
      "text": "Click confirm, and the post is gone!",
      "sentence_number": 1911,
      "word_count": 7
    },
    {
      "text": "Testing Program\nWe have added so many features.",
      "sentence_number": 1912,
      "word_count": 8
    },
    {
      "text": "Let us test everything to see that they will\ncontinue to work as expected.",
      "sentence_number": 1913,
      "word_count": 14
    },
    {
      "text": "We have new views for creating, updating, and\ndeleting posts.",
      "sentence_number": 1914,
      "word_count": 10
    },
    {
      "text": "We will use three new tests:\ndef test_post_createview\ndef test_post_updateview\ndef test_post_deleteview\nThe updated script in your tests.py file will be as follows.",
      "sentence_number": 1915,
      "word_count": 23
    },
    {
      "text": "from django.test import TestCase\n# Create your tests here.",
      "sentence_number": 1916,
      "word_count": 9
    },
    {
      "text": "from django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom .models import Post\nclass BlogTests(TestCase):\n@classmethod\ndef setUpTestData(cls):\ncls.user = get_user_model().objects.create_user(\nusername=\"testuser\", email=\"test@email.com\", password=\"secret\"\n)\ncls.post = Post.objects.create(\ntitle=\"A good title\",\nbody=\"Nice body content\",\nauthor=cls.user,\n)\ndef test_post_model(self):\nself.assertEqual(self.post.title, \"A good title\")\nself.assertEqual(self.post.body, \"Nice body content\")\nself.assertEqual(self.post.author.username, \"testuser\")\nself.assertEqual(str(self.post), \"A good title\")\nself.assertEqual(self.post.get_absolute_url(), \"/post/1/\")\ndef test_url_exists_at_correct_location_listview(self):\nresponse = self.client.get(\"/\")\nself.assertEqual(response.status_code, 200)\ndef test_url_exists_at_correct_location_detailview(self):\nresponse = self.client.get(\"/post/1/\")\nself.assertEqual(response.status_code, 200)\ndef test_post_listview(self):\nresponse = self.client.get(reverse(\"home\"))\nself.assertEqual(response.status_code, 200)\nself.assertContains(response, \"Nice body content\")\nself.assertTemplateUsed(response, \"home.html\")\ndef test_post_detailview(self):\nresponse = self.client.get(reverse(\"post_detail\", kwargs={\"pk\": self.post.pk}))\nno_response = self.client.get(\"/post/100000/\")\nself.assertEqual(response.status_code, 200)\nself.assertEqual(no_response.status_code, 404)\nself.assertContains(response, \"A good title\")\nself.assertTemplateUsed(response, \"post_detail.html\")\ndef test_post_createview(self):\nresponse = self.client.post(\nreverse(\"post_new\"),\n{\n\"title\": \"New title\",\n\"body\": \"New text\",\n\"author\": self.user.id,\n},\n)\nself.assertEqual(response.status_code, 302)\nself.assertEqual(Post.objects.last().title, \"New title\")\nself.assertEqual(Post.objects.last().body, \"New text\")\ndef test_post_updateview(self):\nresponse = self.client.post(\nreverse(\"post_edit\", args=\"1\"),\n{\n\"title\": \"Updated title\",\n\"body\": \"Updated text\",\n},\n)\nself.assertEqual(response.status_code, 302)\nself.assertEqual(Post.objects.last().title, \"Updated title\")\nself.assertEqual(Post.objects.last().body, \"Updated text\")\ndef test_post_deleteview(self):\nresponse = self.client.post(reverse(\"post_delete\", args=\"1\"))\nself.assertEqual(response.status_code, 302)\nFor test_post_createview, we make a fresh response and make sure it\ncorresponds to the last() object on our model, checking that the page has a\n302 redirect status code.",
      "sentence_number": 1917,
      "word_count": 186
    },
    {
      "text": "The test_post_updateview function checks to\ndetermine if the initial post made in setUpTestData may be updated.",
      "sentence_number": 1918,
      "word_count": 16
    },
    {
      "text": "Test\n_post_deleteview, the last newly added test, verifies that a 302 redirect is\nissued when a post is deleted.",
      "sentence_number": 1919,
      "word_count": 19
    },
    {
      "text": "Even while we have some coverage for our new features, we know there is\nroom for improvement in terms of the number of tests we've run.",
      "sentence_number": 1920,
      "word_count": 26
    },
    {
      "text": "Press\nControl+c to terminate the local web server, then proceed with the testing.",
      "sentence_number": 1921,
      "word_count": 13
    },
    {
      "text": "Every single one of them ought to be okay.",
      "sentence_number": 1922,
      "word_count": 9
    },
    {
      "text": "We've developed a Blog app with minimal code that supports adding, editing,\nand removing blog entries.",
      "sentence_number": 1923,
      "word_count": 16
    },
    {
      "text": "CreateRead-Update-Delete (or CRUD for short)\ndescribes these fundamental actions.",
      "sentence_number": 1924,
      "word_count": 9
    },
    {
      "text": "While there may be other ways to\naccomplish this same goal (such as using function-based views or custom\nclass-based views), we've shown how little code is required in Django to do\nthis.",
      "sentence_number": 1925,
      "word_count": 32
    },
    {
      "text": "C 7- U A\nHAPTER SER CCOUNTS\nWe have a functional blog app with forms, but we lack a crucial component\nof most web apps: user authentication.",
      "sentence_number": 1926,
      "word_count": 27
    },
    {
      "text": "Proper user authentication is notoriously difficult to accomplish, and several\nsecurity gotchas are along the way.",
      "sentence_number": 1927,
      "word_count": 16
    },
    {
      "text": "Django already has a robust\nauthentication system98 built in, which we can modify to meet our needs.",
      "sentence_number": 1928,
      "word_count": 17
    },
    {
      "text": "Django's default settings include the auth app, which provides us with a User\nobject that consists of the following fields: username, password, email, first\nname, and last name.",
      "sentence_number": 1929,
      "word_count": 28
    },
    {
      "text": "We'll use this User object to log in, log out, and sign up on our blog.",
      "sentence_number": 1930,
      "word_count": 16
    },
    {
      "text": "User Login Access\nDjango's LoginView offers us a ready-made login screen.",
      "sentence_number": 1931,
      "word_count": 11
    },
    {
      "text": "There are only a\nfew things left to do, like updating our settings.py file and adding a URL\npattern for the auth system and a log in template.",
      "sentence_number": 1932,
      "word_count": 28
    },
    {
      "text": "The django project/urls.py file must be modified first.",
      "sentence_number": 1933,
      "word_count": 8
    },
    {
      "text": "The accounts/ URL is\nwhere you may access the login and logout pages.",
      "sentence_number": 1934,
      "word_count": 13
    },
    {
      "text": "This modification involves\nadding a single line to the text on the second-to-last line.",
      "sentence_number": 1935,
      "word_count": 14
    },
    {
      "text": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath(\"accounts/\", include(\"django.contrib.auth.urls\")),\npath(\"\", include(\"blog.urls\")),\n]\nBy default, Django looks for a log in form in a templates directory called\nregistration called login.html.",
      "sentence_number": 1936,
      "word_count": 36
    },
    {
      "text": "Therefore, we must make a new folder named\n\"registration\" and place the necessary file within it.",
      "sentence_number": 1937,
      "word_count": 16
    },
    {
      "text": "To end our local server,\nuse Control+c at the command prompt.",
      "sentence_number": 1938,
      "word_count": 11
    },
    {
      "text": "The next step is to make the new\nfolder.",
      "sentence_number": 1939,
      "word_count": 9
    },
    {
      "text": "mkdir templates/registration\nCreate a new template file in the new registration folder called login.html.",
      "sentence_number": 1940,
      "word_count": 14
    },
    {
      "text": "This is the code for the login.html file:\n{% extends \"base.html\" %}\n{% block content %}\n<h2>Log In</h2>\n<form method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<button type=\"submit\">Log In</button>\n</form>\n{% endblock content %}\nAfter a successful login, we must tell the system where to send the user.",
      "sentence_number": 1941,
      "word_count": 47
    },
    {
      "text": "With\nthe LOGIN REDIRECT URL setting, we can do this.",
      "sentence_number": 1942,
      "word_count": 10
    },
    {
      "text": "Just add the following\nat the end of the settings.py file in django_project:\nLOGIN_REDIRECT_URL = \"home\"\nNow the user is redirected to our homepage, 'home'.",
      "sentence_number": 1943,
      "word_count": 25
    },
    {
      "text": "And at this moment, our\nwork is complete.",
      "sentence_number": 1944,
      "word_count": 8
    },
    {
      "text": "Once you've restarted the Django server with python\nmanage.py runserver, you should be able to see our login page at\nhttp://127.0.0.1:8000/accounts/login/.",
      "sentence_number": 1945,
      "word_count": 21
    },
    {
      "text": "After entering our superuser credentials, we were sent back to the main page.",
      "sentence_number": 1946,
      "word_count": 13
    },
    {
      "text": "Remember that we didn't have to manually develop a database model or\nimplement any view logic because Django's authentication system already\ndid that for us.",
      "sentence_number": 1947,
      "word_count": 25
    },
    {
      "text": "Calling the User’s Name on The HomePage\nIt would be a good idea to make a change to our base.html template that\nwould show a message to all visitors, whether they are signed in or not.",
      "sentence_number": 1948,
      "word_count": 36
    },
    {
      "text": "The\nis_authenticated attribute can be used for this purpose.",
      "sentence_number": 1949,
      "word_count": 9
    },
    {
      "text": "It will do for now to simply make this code easy to find.",
      "sentence_number": 1950,
      "word_count": 13
    },
    {
      "text": "We can give it a\nbetter look later on when we have more time.",
      "sentence_number": 1951,
      "word_count": 14
    },
    {
      "text": "Modify the base.html file by\ninserting new code behind the </header> tag.",
      "sentence_number": 1952,
      "word_count": 12
    },
    {
      "text": "This is the updated base.html file:\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\">\n<link href=\"{% static 'css/base.css' %}\" rel=\"stylesheet\" s>\n</head>\n<body>\n<div>\n<header>\n<div class=\"nav-left\">\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</div>\n<div class=\"nav-right\">\n<a href=\"{% url 'post_new' %}\">+ New Blog Post</a>\n</div>\n</header>\n{% if user.is_authenticated %}\n<p>Hi {{ user.username }}!</p>\n{% else %}\n<p>You are not logged in.</p>\n<a href=\"{% url 'login' %}\">Log In</a>\n{% endif %}\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nThis code will say a user’s name and display Hello if they are logged in.",
      "sentence_number": 1953,
      "word_count": 100
    },
    {
      "text": "Otherwise, it will be a link to our new login page.",
      "sentence_number": 1954,
      "word_count": 11
    },
    {
      "text": "User Log Out Access\nWe included logout template page logic, but how do we log out?",
      "sentence_number": 1955,
      "word_count": 16
    },
    {
      "text": "We can do\nit manually in the Admin panel, but there's a better approach.",
      "sentence_number": 1956,
      "word_count": 14
    },
    {
      "text": "Let's add a log\nout link that goes to the home page.",
      "sentence_number": 1957,
      "word_count": 12
    },
    {
      "text": "With Django auth, this is easy.",
      "sentence_number": 1958,
      "word_count": 6
    },
    {
      "text": "Just below our user greeting, add a % url 'logout' % link in our base.html file.",
      "sentence_number": 1959,
      "word_count": 16
    },
    {
      "text": "This is the updated script:\n{% load static %}\n<html>\n<head>\n<title>Django blog</title>\n<link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\">\n<link href=\"{% static 'css/base.css' %}\" rel=\"stylesheet\" s>\n</head>\n<body>\n<div>\n<header>\n<div class=\"nav-left\">\n<h1><a href=\"{% url 'home' %}\">Django blog</a></h1>\n</div>\n<div class=\"nav-right\">\n<a href=\"{% url 'post_new' %}\">+ New Blog Post</a>\n</div>\n</header>\n{% if user.is_authenticated %}\n<p>Hi {{ user.username }}!</p>\n<p><a href=\"{% url 'logout' %}\">Log out</a></p>\n{% else %}\n<p>You are not logged in.</p>\n<a href=\"{% url 'login' %}\">Log In</a>\n{% endif %}\n{% block content %}\n{% endblock content %}\n</div>\n</body>\n</html>\nDjango auth app provides the essential view.",
      "sentence_number": 1960,
      "word_count": 97
    },
    {
      "text": "We must indicate where to send\nlogged-out users.",
      "sentence_number": 1961,
      "word_count": 8
    },
    {
      "text": "Update django project/settings.py with LOGOUT REDIRECT URL.",
      "sentence_number": 1962,
      "word_count": 7
    },
    {
      "text": "We can\nadd it next to our login redirect, so the file should look like this:\nLOGOUT_REDIRECT_URL = \"home\"\nYou'll see a \"log out\" link if you refresh the homepage.",
      "sentence_number": 1963,
      "word_count": 30
    },
    {
      "text": "Go ahead.",
      "sentence_number": 1964,
      "word_count": 2
    },
    {
      "text": "Click it and see where it leads.",
      "sentence_number": 1965,
      "word_count": 7
    },
    {
      "text": "Allow Users to Sign Up\nTo register new users, we need to create our own view.",
      "sentence_number": 1966,
      "word_count": 16
    },
    {
      "text": "However, Django\nsupplies us with a form class called UserCreationForm to make this process\neasier.",
      "sentence_number": 1967,
      "word_count": 15
    },
    {
      "text": "By default, it has three fields: username, password1, and password2.",
      "sentence_number": 1968,
      "word_count": 10
    },
    {
      "text": "Code and URL structure can be organized in numerous ways for user\nauthentication.",
      "sentence_number": 1969,
      "word_count": 13
    },
    {
      "text": "Stop the local server by pressing Ctrl + C, and make a new\napp called \"accounts\" for our sign-up page.",
      "sentence_number": 1970,
      "word_count": 20
    },
    {
      "text": "python manage.py startapp accounts\nAdd the app to django_project under INSTALLED APPS in the settings.py\nfile.",
      "sentence_number": 1971,
      "word_count": 16
    },
    {
      "text": "Add a new URL path to this app in urls.py of the django project folder below\nthe built-in auth app.",
      "sentence_number": 1972,
      "word_count": 20
    },
    {
      "text": "path(\"accounts/\", include(\"accounts.urls\")),\nDjango reads this script top-to-bottom.",
      "sentence_number": 1973,
      "word_count": 7
    },
    {
      "text": "Thus url order matters.",
      "sentence_number": 1974,
      "word_count": 4
    },
    {
      "text": "When we\nrequest /accounts/signup, Django first looks in auth, then accounts.",
      "sentence_number": 1975,
      "word_count": 11
    },
    {
      "text": "Create a urls.py file in the new accounts folder using your text editor.",
      "sentence_number": 1976,
      "word_count": 13
    },
    {
      "text": "Fill it\nwith the following code:\nfrom django.urls import path\nfrom .views import SignUpView\nurlpatterns = [\npath(\"signup/\", SignUpView.as_view(), name=\"signup\"),\n]\nNow let’s create the view.",
      "sentence_number": 1977,
      "word_count": 26
    },
    {
      "text": "The view implements UserCreationForm and\nCreateView.",
      "sentence_number": 1978,
      "word_count": 6
    },
    {
      "text": "Go to accounts/views.py and fill in with the following code:\nWe subclass CreateView in SignUpView.",
      "sentence_number": 1979,
      "word_count": 15
    },
    {
      "text": "We use signup.html's built-in\nUserCreationForm and uncreated template.",
      "sentence_number": 1980,
      "word_count": 8
    },
    {
      "text": "After successful registration,\nreverse lazy redirects the user to the login page.",
      "sentence_number": 1981,
      "word_count": 12
    },
    {
      "text": "Why is reverse lazy used here rather than reverse?",
      "sentence_number": 1982,
      "word_count": 9
    },
    {
      "text": "All generic class-based\nviews don't load URLs when the file is imported.",
      "sentence_number": 1983,
      "word_count": 12
    },
    {
      "text": "Therefore we use reverse's\nlazy form to load them afterward.",
      "sentence_number": 1984,
      "word_count": 10
    },
    {
      "text": "Create signup.html in the templates/registration/ folder.",
      "sentence_number": 1985,
      "word_count": 6
    },
    {
      "text": "Add the following\ncode.",
      "sentence_number": 1986,
      "word_count": 4
    },
    {
      "text": "{% extends \"base.html\" %}\n{% block content %}\n<h2>Sign Up</h2>\n<form method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<button type=\"submit\">Sign Up</button>\n</form>\n{% endblock content %}\nThis format is familiar.",
      "sentence_number": 1987,
      "word_count": 29
    },
    {
      "text": "We extend our base template at the top, add our logic\nbetween <form></form> tags, use the csrf token for security, and provide a\nsubmit button.",
      "sentence_number": 1988,
      "word_count": 25
    },
    {
      "text": "Finished!",
      "sentence_number": 1989,
      "word_count": 1
    },
    {
      "text": "To test it, run python manage.py runserver and visit\nhttp://127.0.0.1:8000/accounts/signup.",
      "sentence_number": 1990,
      "word_count": 10
    },
    {
      "text": "Link to Sign Up\nAdd a signup link on the logged-out homepage.",
      "sentence_number": 1991,
      "word_count": 12
    },
    {
      "text": "Our users can't know the\nexact URL.",
      "sentence_number": 1992,
      "word_count": 7
    },
    {
      "text": "We may add the URL to our template.",
      "sentence_number": 1993,
      "word_count": 8
    },
    {
      "text": "In accounts/urls.py, we\ngave it the name signup, so that's all we need to add to base.html with the url\ntemplate tag, exactly like our other links.",
      "sentence_number": 1994,
      "word_count": 27
    },
    {
      "text": "Add \"Sign Up\" underneath \"Log In\"\n<a href=\"{% url 'signup' %}\">Sign Up</a>\nLooks much better!",
      "sentence_number": 1995,
      "word_count": 15
    },
    {
      "text": "GitHub\nWe haven't made a git commit in a while.",
      "sentence_number": 1996,
      "word_count": 10
    },
    {
      "text": "Do that, then push our code to\nGitHub.",
      "sentence_number": 1997,
      "word_count": 8
    },
    {
      "text": "First, check git status for new changes.",
      "sentence_number": 1998,
      "word_count": 7
    },
    {
      "text": "git status\ngit add -A\ngit commit -m \"forms and user accounts\"\nCreate a new repo on GitHub.",
      "sentence_number": 1999,
      "word_count": 18
    },
    {
      "text": "I'll call it blog.",
      "sentence_number": 2000,
      "word_count": 4
    },
    {
      "text": "After creating a new GitHub\nrepo, I can input the following commands.",
      "sentence_number": 2001,
      "word_count": 12
    },
    {
      "text": "Replace macvicquayns with your\nGitHub username.",
      "sentence_number": 2002,
      "word_count": 6
    },
    {
      "text": "git remote add origin https://github.com/MacVicquayns/blog.git\ngit branch -M main\ngit push -u origin main\nStatic Files\nPreviously, we configured our static files by establishing a static folder,\ndirecting STATICFILES DIRS to it, and adding % load static % to our\nbase.html template.",
      "sentence_number": 2003,
      "word_count": 42
    },
    {
      "text": "We need a few extra steps because Django won't support\nstatic files in production.",
      "sentence_number": 2004,
      "word_count": 14
    },
    {
      "text": "First, use Django's collectstatic command to assemble all static files into a\ndeployable folder.",
      "sentence_number": 2005,
      "word_count": 14
    },
    {
      "text": "Second, set the STATIC_ROOT setting to the staticfiles\nfolder.",
      "sentence_number": 2006,
      "word_count": 9
    },
    {
      "text": "Third, set STATICFILES_STORAGE, collectstatic's file storage\nengine.",
      "sentence_number": 2007,
      "word_count": 7
    },
    {
      "text": "Here's what the revised django project/settings.py file looks like:\nNow go to the command line and run python manage.py collectstatic:\nA new staticfiles folder containing an admin and a css folder has been added\nto your project folder.",
      "sentence_number": 2008,
      "word_count": 38
    },
    {
      "text": "The admin is the static files from the default admin,\nand the css is our own.",
      "sentence_number": 2009,
      "word_count": 16
    },
    {
      "text": "The collectstatic command must be executed before\neach new deployment in order to compile the files into the staticfiles folder\nthat is then utilized in production.",
      "sentence_number": 2010,
      "word_count": 26
    },
    {
      "text": "To avoid overlooking it, this process is\ncommonly automated in larger projects, but that is outside the scope of our\ncurrent work.",
      "sentence_number": 2011,
      "word_count": 22
    },
    {
      "text": "There are a number of methods for delivering these precompiled static files in\nproduction, but we'll be using the WhiteNoise package, which is currently the\nmost popular option.",
      "sentence_number": 2012,
      "word_count": 28
    },
    {
      "text": "To begin, install the newest version with pip:\npython -m pip install whitenoise==5.3.0\nThen update django project/settings.py:\nAdd whitenoise above staticfiles in INSTALLED APPS\nAdd WhiteNoiseMiddleware to MIDDLEWARE.",
      "sentence_number": 2013,
      "word_count": 28
    },
    {
      "text": "Swap WhiteNoise for STATICFILES STORAGE\nThe updated file should look like this:\nAfter all, these, rerun python manage.py collectstatic.",
      "sentence_number": 2014,
      "word_count": 19
    },
    {
      "text": "There will be a small warning.",
      "sentence_number": 2015,
      "word_count": 6
    },
    {
      "text": "This will overwrite existing files!",
      "sentence_number": 2016,
      "word_count": 5
    },
    {
      "text": "You sure?",
      "sentence_number": 2017,
      "word_count": 2
    },
    {
      "text": "Enter \"yes\" WhiteNoise regenerates the static files in the same folder.",
      "sentence_number": 2018,
      "word_count": 11
    },
    {
      "text": "Static files are difficult for newbies, so here's a quick recap of our Blog site's\nstages.",
      "sentence_number": 2019,
      "word_count": 16
    },
    {
      "text": "In Chapter 5, we built a top-level static folder for local development\nand changed STATICFILES DIRS.",
      "sentence_number": 2020,
      "word_count": 16
    },
    {
      "text": "In this chapter, we added STATIC\nROOT and STATICFILES STORAGE parameters before running\ncollectstatic, which assembled all static files into a single staticfiles folder.",
      "sentence_number": 2021,
      "word_count": 24
    },
    {
      "text": "Installed whitenoise, updated INSTALLED APPS, MIDDLEWARE, and\nSTATICFILES STORAGE, then ran collectstatic.",
      "sentence_number": 2022,
      "word_count": 12
    },
    {
      "text": "Most developers, like myself, have difficulties remembering these procedures\nand rely on notes.",
      "sentence_number": 2023,
      "word_count": 13
    },
    {
      "text": "Time for Heroku\nHere we are, at the third attempt at using Heroku to launch a website.",
      "sentence_number": 2024,
      "word_count": 17
    },
    {
      "text": "Set up\nGunicorn as your primary web server:\npython -m pip install gunicorn==20.1.0\nCreate a requirements.txt file to store the current virtual environment's\ncontents with this command.",
      "sentence_number": 2025,
      "word_count": 27
    },
    {
      "text": "python -m pip freeze > requirements.txt\nIn django project/settings.py, update ALLOWED HOSTS.",
      "sentence_number": 2026,
      "word_count": 12
    },
    {
      "text": "ALLOWED_HOSTS = [\".herokuapp.com\", \"localhost\", \"127.0.0.1\"]\nAlso, make sure you have a manage.py file and a Procfile and runtime.txt file\nin the root folder of our project.",
      "sentence_number": 2027,
      "word_count": 26
    },
    {
      "text": "Put this code in the Procfile:\nweb: gunicorn django_project.wsgi --log-file –\nPut your current version of Python in the runtime.txt file and save.",
      "sentence_number": 2028,
      "word_count": 23
    },
    {
      "text": "Now, check the git status, and push everything to your GitHub.",
      "sentence_number": 2029,
      "word_count": 11
    },
    {
      "text": "Run these\ncommands in this order:\ngit status\ngit add -A\ngit commit -m \"Heroku config\"\ngit push -u origin main\nDeploy to Heroku\nLog in to your Heroku account from the command line.",
      "sentence_number": 2030,
      "word_count": 34
    },
    {
      "text": "heroku login\nHeroku will then create a new container where our application will reside\nonce the create command has been executed.",
      "sentence_number": 2031,
      "word_count": 21
    },
    {
      "text": "If you don't specify a name and\njust run heroku create, Heroku will come up with one for you at random;\nhowever, you are free to choose your own name, provided it is unique on\nHeroku.",
      "sentence_number": 2032,
      "word_count": 36
    },
    {
      "text": "You can't use the name d12-blog because I've already used it.",
      "sentence_number": 2033,
      "word_count": 11
    },
    {
      "text": "You\nmust use a different alphabetic and numeric sequence.",
      "sentence_number": 2034,
      "word_count": 9
    },
    {
      "text": "heroku create d12-blog\nThe prior apps did not have static file configurations.",
      "sentence_number": 2035,
      "word_count": 12
    },
    {
      "text": "Thus we used heroku\nconfig:set DISABLE COLLECTSTATIC=1 to prevent Heroku from running\nthe Django collectstatic command automatically.",
      "sentence_number": 2036,
      "word_count": 17
    },
    {
      "text": "But now that we have static\nfiles set up, we can relax and let this happen automatically during\ndeployment.",
      "sentence_number": 2037,
      "word_count": 19
    },
    {
      "text": "Adding a web process to Heroku and pushing our code there will get the\ndyno up and running.",
      "sentence_number": 2038,
      "word_count": 18
    },
    {
      "text": "git push heroku main\nheroku ps:scale web=1\nYour new app's URL can be found in the terminal output or by typing\n\"heroku open.\"\nPostgreSQL vs SQLite\nWe have been using Django's preconfigured SQLite database on our local\nmachines and in production so far in this book.",
      "sentence_number": 2039,
      "word_count": 46
    },
    {
      "text": "It's far simpler to set up and\nuse than a server-based database.",
      "sentence_number": 2040,
      "word_count": 12
    },
    {
      "text": "Although it's convenient, there is a price to\npay for it.",
      "sentence_number": 2041,
      "word_count": 11
    },
    {
      "text": "Because Heroku uses a transient file system, any modifications\nmade to the cloud-based db.sqlite3 file are lost anytime a new deployment or\nserver restart takes place.",
      "sentence_number": 2042,
      "word_count": 26
    },
    {
      "text": "On the free tier that we are now using, the servers\nmay be rebooted as frequently as once every 24 hours.",
      "sentence_number": 2043,
      "word_count": 21
    },
    {
      "text": "This ensures that any changes made to the database in a development\nenvironment may be replicated in a production environment with a simple\npush.",
      "sentence_number": 2044,
      "word_count": 24
    },
    {
      "text": "However, new blog posts or changes you make to the live website\nwon't last forever.",
      "sentence_number": 2045,
      "word_count": 15
    },
    {
      "text": "Thanks to some spare code, our Blog site now has sign up, log in, and log out\ncapabilities.",
      "sentence_number": 2046,
      "word_count": 18
    },
    {
      "text": "Several potential security issues can arise when developing a custom user\nauthentication method, but Django has already dealt with them.",
      "sentence_number": 2047,
      "word_count": 20
    },
    {
      "text": "We deployed\nour site to Heroku with the static files set up correctly for production.",
      "sentence_number": 2048,
      "word_count": 15
    },
    {
      "text": "Well\ndone!",
      "sentence_number": 2049,
      "word_count": 2
    },
    {
      "text": "C\nONCLUSION\nThe completion of this fantastic Django course is a cause for celebration.",
      "sentence_number": 2050,
      "word_count": 14
    },
    {
      "text": "We\nbegan with nothing and have already completed five separate web apps from\nscratch using all of the primary capabilities of Django, including templates,\nviews, urls, users, models, security, testing, and deployment.",
      "sentence_number": 2051,
      "word_count": 32
    },
    {
      "text": "You should now\nfeel confident creating your own cutting-edge websites with Django.",
      "sentence_number": 2052,
      "word_count": 12
    },
    {
      "text": "Putting what you've learned into practice is essential if you want to become\nproficient at it.",
      "sentence_number": 2053,
      "word_count": 16
    },
    {
      "text": "Our Blog and Newspaper sites share a feature known as\nCRUD (Create-Read-Update-Delete) with a wide variety of other web apps.",
      "sentence_number": 2054,
      "word_count": 20
    },
    {
      "text": "Can you, for instance, develop a web-based to-do list?",
      "sentence_number": 2055,
      "word_count": 9
    },
    {
      "text": "Will you create an app\nsimilar to Twitter or Facebook?",
      "sentence_number": 2056,
      "word_count": 10
    },
    {
      "text": "You don't need anything else because you\nalready have it all.",
      "sentence_number": 2057,
      "word_count": 11
    },
    {
      "text": "The ideal way to learn the ropes is to construct many\nsimple projects and gradually increase their complexity as you gain\nexperience and knowledge.",
      "sentence_number": 2058,
      "word_count": 24
    },
    {
      "text": "Follow-Up Actions\nThere is a lot more to learn about Django than what we covered in this book.",
      "sentence_number": 2059,
      "word_count": 18
    },
    {
      "text": "This is crucial if you plan on creating massive websites with hundreds of\nthousands or even millions of monthly visitors.",
      "sentence_number": 2060,
      "word_count": 20
    },
    {
      "text": "There's no need to look\nfurther than Django itself for this.",
      "sentence_number": 2061,
      "word_count": 11
    },
    {
      "text": "Django for Professionals is a follow-up\nbook I wrote that covers topics like using Docker, installing a production\ndatabase locally like PostgreSQL, registering advanced users, securing the\nsite, optimizing performance, and much more.",
      "sentence_number": 2062,
      "word_count": 33
    },
    {
      "text": "When building mobile apps (iOS/Android) or websites with a dedicated\nJavaScript front-end framework like Vue, React, or Angular, Django is often\nutilized as the back-end API.",
      "sentence_number": 2063,
      "word_count": 26
    },
    {
      "text": "Django REST Framework181, a third-party\nprogram that is tightly integrated with Django itself, makes it possible to\nconvert any preexisting Django website into an API with no additional\ncoding.",
      "sentence_number": 2064,
      "word_count": 29
    },
    {
      "text": "If you're interested in reading more, I've devoted a complete book to\nthe subject, entitled Django for APIs.",
      "sentence_number": 2065,
      "word_count": 18
    },
    {
      "text": "Third-party bundles\nAs we’ve seen in this book, 3rd party packages are an essential element of the\nDjango ecosystem, especially regarding deployment or enhancements\nsurrounding user registration.",
      "sentence_number": 2066,
      "word_count": 27
    },
    {
      "text": "It’s not uncommon for a professional Django\nwebsite to rely on dozens of such packages.",
      "sentence_number": 2067,
      "word_count": 15
    },
    {
      "text": "Caution: don't install 3rd party packages only to save a little time now.",
      "sentence_number": 2068,
      "word_count": 13
    },
    {
      "text": "Any\nadditional packages increase the chances that their maintainer won't fix all\nbugs or upgrade to the newest version of Django.",
      "sentence_number": 2069,
      "word_count": 21
    },
    {
      "text": "Learn its uses.",
      "sentence_number": 2070,
      "word_count": 3
    },
    {
      "text": "Django Packages is a complete database of all available third-party apps if\nyou're interested in viewing additional packages.",
      "sentence_number": 2071,
      "word_count": 18
    }
  ],
  "metadata": {
    "total_paragraphs": 2071,
    "total_words": 39624,
    "chapters": [],
    "sections": [],
    "content_types": {},
    "extracted_concepts_count": 10,
    "concept_types": [
      "Key Definition",
      "Main Idea"
    ],
    "contextgem_processed": true,
    "original_tokens": 57001,
    "was_chunked": true,
    "chunks_processed": 10
  },
  "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
  "format": "pdf",
  "extracted_concepts": [
    {
      "content": "Flask application organization",
      "concept_name": "Main Idea",
      "type": "concept",
      "source_sentence": "The text discusses the importance of organizing a Flask application's code for efficient development and deployment, using patterns such as packages and modules.\n\n  2. CONCEPT: Repository\n     TYPE: Key Definition\n     SOURCE: The repository is the folder for a program on the server, often managed by version control systems.\n\n  3. CONCEPT: Package\n     TYPE: Key Definition\n     SOURCE: A package is a Python library that holds the code for an application, consisting of related modules.\n\n  4. CONCEPT: Module\n     TYPE: Key Definition\n     SOURCE: A module is one Python file that other Python files can import. A package is nothing more than a collection of related modules.\n\n  5. CONCEPT: Run script (run.py)\n     TYPE: Important Fact\n     SOURCE: The run script is executed to launch a development server and obtains a copy of the application from the package.\n\n  6. CONCEPT: Requirements file (requirements.txt)\n     TYPE: Key Definition\n     SOURCE: The requirements file lists all Python packages on which your application depends, with different files for development and production dependencies.\n\n  7. CONCEPT: Configuration file (config.py)\n     TYPE: Key Definition\n     SOURCE: The configuration file contains variables your project needs for configuration, including API keys and database URIs with embedded passwords.\n\n  8. CONCEPT: Instance-specific configuration file (instance/config.py)\n     TYPE: Key Definition\n     SOURCE: The instance-specific configuration file contains variables unique to this instance of your program, such as DEBUG = True on a local development system.\n\n  9. CONCEPT: Application initialization\n     TYPE: Main Idea\n     SOURCE: All Flask applications need to create an application instance using the Flask class and provide it with the name of the main module or package.\n\n  10. CONCEPT: WSGI protocol\n     TYPE: Key Definition\n     SOURCE: The WSGI (pronounced \"wiz-ghee\") protocol is a method used by the web server to send all requests from clients to the application instance for handling.",
      "chunk_index": 0,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Main Idea",
        "chunk_index": 0,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Flask is a web framework for Python.",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "The text mentions that Flask is a web framework for Python.\n\n  2. CONCEPT: Jinja2 is a template engine used by Flask.\n     TYPE: Key Definition\n     SOURCE: The text states that Jinja2 is built into the application by the Flask function render_template().\n\n  3. CONCEPT: Templates are files containing both static and dynamic data placeholders.\n     TYPE: Key Definition\n     SOURCE: The text explains that templates are files that contain both static and dynamic data placeholders.\n\n  4. CONCEPT: Variables in Jinja2 templates are marked with double curly brackets ({{ }} ).\n     TYPE: Important Fact\n     SOURCE: The text mentions that variables in Jinja2 templates are marked with double curly brackets.\n\n  5. CONCEPT: Filters in Jinja2 can change parts of values in the template when they come on.\n     TYPE: Main Idea\n     SOURCE: The text explains that filters in Jinjia2 work like pipes in Linux commands and can change parts of values in the template.\n\n  6. CONCEPT: Control structures in Jinja2 can be used to change how the template is run.\n     TYPE: Key Definition\n     SOURCE: The text mentions that control structures in Jinja2 can be used to change how the template is run.\n\n  7. CONCEPT: Conditions in Jinja2 are if-else statements used in templates.\n     TYPE: Important Fact\n     SOURCE: The text provides an example of using an if-else statement in a Jinja2 template.\n\n  8. CONCEPT: Loops in Jinja2 are for loops used to iterate over lists or other data structures.\n     TYPE: Main Idea\n     SOURCE: The text explains that loops in Jinja2 are for loops used to iterate over lists or other data structures.\n\n  9. CONCEPT: Bootstrap is a popular CSS framework.\n     TYPE: Key Definition\n     SOURCE: The text mentions that Bootstrap is the most common CSS framework.\n\n  10. CONCEPT: Flask can be integrated with Bootstrap for styling web pages.\n      TYPE: Main Idea\n      SOURCE: The text states that this chapter will look at an open-source Flask project with a beautiful UI styled with Bootstrap.",
      "chunk_index": 1,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 1,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Templates in Flask",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "The templates you worked with in this course are one-way, meaning that information can only flow from the server to the user.\n\n  2. CONCEPT: HTTP Methods (GET/POST)\n     TYPE: Important Fact\n     SOURCE: The standard way to send and receive information from and to a web server is through HTTP methods. GET and POST are often used.\n\n  3. CONCEPT: GET Method\n     TYPE: Key Definition\n     SOURCE: GET is the most common way of getting or sending information to a website. It is typically used for retrieving information from a web server.\n\n  4. CONCEPT: POST Method\n     TYPE: Key Definition\n     SOURCE: POST is a way of doing this securely, so GET is an insecure way of getting the most commonly used information. People often use the POST method to send information to a web server.\n\n  5. CONCEPT: Web Forms\n     TYPE: Main Idea\n     SOURCE: Web forms are a way to send information to a website, typically using the POST method for secure transmission.\n\n  6. CONCEPT: Flask Request Object\n     TYPE: Key Definition\n     SOURCE: The request object in Flask can be used to determine whether a GET or POST request was made.\n\n  7. CONCEPT: Handling Form Submissions in Flask\n     TYPE: Main Idea\n     SOURCE: In Flask, you can handle form submissions by using the request object to check for a POST request and then processing the submitted data accordingly.\n\n  8. CONCEPT: Using if-else clauses in Flask\n     TYPE: Important Fact\n     SOURCE: You can use if-else clauses in Flask to handle different types of requests, such as GET and POST.\n\n  9. CONCEPT: Dynamic Routing in Flask\n     TYPE: Key Definition\n     SOURCE: In Flask, you can create dynamic routes by using the <> syntax in your route decorator. This allows you to pass variables from the URL to your function.\n\n 10. CONCEPT: Flask Form Data Access\n     TYPE: Important Fact\n     SOURCE: You can access form data submitted through a POST request in Flask by using the request.form dictionary. The keys in this dictionary correspond to the names of the input fields in your HTML form.",
      "chunk_index": 2,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 2,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Flask Application Object",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "app = Flask (__name__)\n\n  2. CONCEPT: SQLALCHEMY_DATABASE_URI\n     TYPE: Configuration Setting\n     SOURCE: app.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.sqlite3'\n\n  3. CONCEPT: SQLAlchemy\n     TYPE: Library\n     SOURCE: db = SQLAlchemy(app)\n\n  4. CONCEPT: Object Relation Mapping (ORM)\n     TYPE: Methodology\n     SOURCE: Object Relation Mapping is used to identify and store objects.\n\n  5. CONCEPT: RDBMS (Relational Database Management System)\n     TYPE: System\n     SOURCE: A relational database management system (RDBMS) is a group of programs experts use to create, update, administer and otherwise interact with a relational database like SQL.\n\n  6. CONCEPT: CRUD Operations\n     TYPE: Operations\n     SOURCE: SQLAlchemy helps you do CRUD operations without having to write SQL statements.\n\n  7. CONCEPT: Table Structure in RDBMS\n     TYPE: Representation of Data\n     SOURCE: The objects are referenced by tables like Ms Excel. Tables hold the information in the RDBMS server.\n\n  8. CONCEPT: Columns and Rows in a Database\n     TYPE: Structural Elements\n     SOURCE: We want to store users, and our users are going to have columns for name and email of a user. The columns will represent pieces of information, and the rows will represent individual items.\n\n  9. CONCEPT: students Model\n     TYPE: Database Model\n     SOURCE: class students(db.Model):\n\n  10. CONCEPT: Primary Key\n     TYPE: Identifier\n     SOURCE: _id = db.Column('id', db.Integer, primary_key = True)",
      "chunk_index": 3,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 3,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Flask app deployment on various web hosting platforms (Amazon Web Services EC2, Heroku, Digital Ocean)",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "The text provides information about deploying a Flask app on different web hosting platforms such as Amazon Web Services EC2, Heroku, and Digital Ocean.\n\n  2. CONCEPT: AWS Elastic Compute Cloud (EC2)\n     TYPE: Important Fact\n     SOURCE: AWS EC2 is a service provided by Amazon Web Services that allows users to easily create virtual servers or instances.\n\n  3. CONCEPT: Heroku\n     TYPE: Key Definition\n     SOURCE: Heroku is a platform for hosting applications developed on top of existing AWS capabilities, such as Elastic Compute Cloud (EC2).\n\n  4. CONCEPT: Digital Ocean\n     TYPE: Important Fact\n     SOURCE: Digital Ocean is an alternative to Amazon Web Services EC2 that provides similar benefits but with a simpler interface and ease of use compared to the AWS control panel.\n\n  5. CONCEPT: Requirements for deployment\n     TYPE: Main Idea\n     SOURCE: To deploy to Heroku, you need to add two files (requirements.txt and Procfile) and install Gunicorn.\n\n  6. CONCEPT: Gunicorn\n     TYPE: Key Definition\n     SOURCE: Gunicorn is a web server that can be used to run Flask applications in production environments.\n\n  7. CONCEPT: Git repository\n     TYPE: Important Fact\n     SOURCE: A git repository should have been created for your project's directory before deploying to Heroku.\n\n  8. CONCEPT: Procfile\n     TYPE: Key Definition\n     SOURCE: The Procfile is a special file used by Heroku to determine how to launch your Flask application.\n\n  9. CONCEPT: Django\n     TYPE: Key Definition\n     SOURCE: Django is a Python web framework that allows developers to create complex, database-driven websites quickly and easily.\n\n  10. CONCEPT: Command Line\n     TYPE: Important Fact\n     SOURCE: Developers use the Command Line to install and configure Django projects.",
      "chunk_index": 4,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 4,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Django is a web framework used for building dynamic websites.",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "The first paragraph of the text.\n\n  2. CONCEPT: HTTP Request/Response Cycle\n     TYPE: Main Idea\n     SOURCE: The section titled \"HTTP Request/Response Cycle\".\n\n  3. CONCEPT: Model-View-Controller (MVC) and Model-View-Template (MVT)\n     TYPE: Key Definition\n     SOURCE: The section titled \"Model-View-Controller (MVC) and Model-View-Template (MVT)\".\n\n  4. CONCEPT: Django's approach to MVC is called MVTU, with four main parts: Model, View, Template, URL Configuration.\n     TYPE: Key Definition\n     SOURCE: The section titled \"Model-View-Controller (MVC) and Model-View-Template (MVT)\".\n\n  5. CONCEPT: A Django project can have multiple apps, each with a specific set of functions.\n     TYPE: Key Fact\n     SOURCE: The section titled \"Creating A Blank App\".\n\n  6. CONCEPT: To make a dynamic web page in Django, you need four separate files that follow the MVT pattern: models.py, views.py, templates.html, and urls.py.\n     TYPE: Key Fact\n     SOURCE: The section titled \"Designing Pages\".\n\n  7. CONCEPT: In this text's example, the data is hardcoded into a view instead of being connected to a database.\n     TYPE: Important Fact\n     SOURCE: The paragraph starting with \"Since our project today does not need to connect to a database...\".\n\n  8. CONCEPT: To display a response in Django, you can use the built-in HttpResponse method.\n     TYPE: Key Fact\n     SOURCE: The paragraph starting with \"Basically, we're saying that whenever we call the function homePageView...\".\n\n  9. CONCEPT: In this text, a new app called 'webpages' is created within an existing Django project.\n     TYPE: Important Fact\n     SOURCE: The section titled \"Creating A Blank App\".\n\n  10. CONCEPT: To make the new app part of the Django project, you must add it to the my_project/settings.py file under 'INSTALLED APPS'.\n      TYPE: Key Fact\n      SOURCE: The paragraph starting with \"Designing Pages\".",
      "chunk_index": 5,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 5,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Django project deployment to production",
      "concept_name": "Main Idea",
      "type": "concept",
      "source_sentence": "The text discusses the process of deploying a Django project to a production environment, which involves moving the code to an external server and database so that it can be accessed by everyone.\n\n  2. CONCEPT: Gunicorn\n     TYPE: Key Definition\n     SOURCE: Gunicorn is a web server for the Django project that is ready for production. It will replace the lightweight server used for local testing.\n\n  3. CONCEPT: Heroku\n     TYPE: Key Definition\n     SOURCE: Heroku is a hosting service that will be used to deploy the Django project online. It's free for small projects and easy to set up.\n\n  4. CONCEPT: Heroku Command Line Interface (CLI)\n     TYPE: Key Definition\n     SOURCE: The Heroku CLI needs to be installed so that deployment can be done from the command line.\n\n  5. CONCEPT: ALLOWED_HOSTS setting in Django settings.py\n     TYPE: Important Fact\n     SOURCE: The ALLOWED_HOSTS setting in the Django settings.py file tells us which host/domain names our Django site can serve, helping to prevent HTTP Host header attacks.\n\n  6. CONCEPT: Procfile\n     TYPE: Key Definition\n     SOURCE: The Procfile is unique to Heroku and tells you how to run the app in their bundle. It specifies the web function, WSGI configuration file, and logging options.\n\n  7. CONCEPT: runtime.txt file\n     TYPE: Key Definition\n     SOURCE: The runtime.txt file tells Heroku which version of Python to use for the project.\n\n  8. CONCEPT: Static file collection (disabled in Heroku)\n     TYPE: Important Fact\n     SOURCE: In Heroku, static files need to be disabled during deployment because it handles them differently than a local environment.\n\n  9. CONCEPT: gitignore file\n    TYPE: Key Definition\n    SOURCE: The .gitignore file in the project folder is used to keep certain files out of version control, such as the virtual environment folder.\n\n  10. CONCEPT: Don't Repeat Yourself (DRY) principle\n     TYPE: Main Idea\n     SOURCE: In Django coding, there is a rule called Don't Repeat Yourself (DRY), which encourages code cleanliness by avoiding repetition in tests and other areas of the code. However, unit tests work best when they are self-contained and very verbose. As a test suite grows, it might be better for performance to combine multiple assertions into fewer tests. This is an advanced topic that may not always apply in every situation.",
      "chunk_index": 6,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Main Idea",
        "chunk_index": 6,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Creating a new Django project and app",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "The first six steps in the development course involve creating a new base folder, setting up a new virtual environment, installing Django, starting a new Django project, and starting a new app.\n\n  2. CONCEPT: Database models for blog posts\n     TYPE: Important Fact\n     SOURCE: The Post model in the blog app's models.py file includes fields for title, author (a foreign key), body, and provides methods for string representation and getting an absolute URL.\n\n  3. CONCEPT: Migrating database changes\n     TYPE: Key Definition\n     SOURCE: After creating a new database model, a migration record can be made, and the database can be updated with the `python manage.py migrate` command.\n\n  4. CONCEPT: Superuser account creation\n     TYPE: Important Fact\n     SOURCE: A superuser account is created using the `python manage.py createsuperuser` command to access the data in Django's backend admin.\n\n  5. CONCEPT: URL configuration for blog app\n     TYPE: Key Definition\n     SOURCE: The urls.py file in the django_project folder needs to include the blog app's URL patterns, and a new file named urls.py should be created in the blog app to define its URL patterns.\n\n  6. CONCEPT: Class-based views for blog posts\n     TYPE: Main Idea\n     SOURCE: The views for displaying blog posts will use class-based views, such as ListView, and a few lines of code in the views file are needed to see the results of the Post model.\n\n  7. CONCEPT: Template inheritance for blog app\n     TYPE: Key Definition\n     SOURCE: To keep the code tidy, templates will be created using template inheritance, with a base.html file and an inherited home.html file.\n\n  8. CONCEPT: Directing Django to find templates\n     TYPE: Important Fact\n     SOURCE: The settings.py file needs to be edited to direct Django to the appropriate folder to find our templates.\n\n  9. CONCEPT: Creating a folder for new template files\n     TYPE: Key Definition\n     SOURCE: A folder should be created to store the new template files for the blog app.\n\n  10. CONCEPT: Static file handling in Django\n     TYPE: Main Idea\n     SOURCE: In future chapters, we will learn about styling using CSS and how Django handles static files, which are essential for creating a visually appealing and functional web application.",
      "chunk_index": 7,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 7,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Django's built-in authentication system",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "\"Django already has a robust authentication system built in, which we can modify to meet our needs.\"\n\n  2. CONCEPT: User object\n     TYPE: Key Definition\n     SOURCE: \"We'll use this User object to log in, log out, and sign up on our blog.\"\n\n  3. CONCEPT: LoginView\n     TYPE: Key Definition\n     SOURCE: \"Django's LoginView offers us a ready-made login screen.\"\n\n  4. CONCEPT: Template for login form\n     TYPE: Important Fact\n     SOURCE: \"By default, Django looks for a log in form in a templates directory called registration called login.html.\"\n\n  5. CONCEPT: LOGIN REDIRECT URL setting\n     TYPE: Key Definition\n     SOURCE: \"Just add the following at the end of the settings.py file in django_project: LOGIN_REDIRECT_URL = \"home\"\"\n\n  6. CONCEPT: Django's accounts/ URL\n     TYPE: Important Fact\n     SOURCE: \"This modification involves adding a single line to the text on the second-to-last line: from django.contrib import admin, from django.urls import path, include; urlpatterns = [path(\"admin/\", admin.site.urls), path(\"accounts/\", include(\"django.contrib.auth.urls\")), path(\"\", include(\"blog.urls\"))]\"\n\n  7. CONCEPT: Registration folder and login.html file creation\n     TYPE: Important Fact\n     SOURCE: \"Create a new folder named 'registration' and place the necessary file within it. To end our local server, use Control+c at the command prompt. The next step is to make the new folder.\"\n\n  8. CONCEPT: Default login form location\n     TYPE: Important Fact\n     SOURCE: \"By default, Django looks for a log in form in a templates directory called registration called login.html.\"\n\n  9. CONCEPT: LOGIN_REDIRECT_URL setting\n     TYPE: Key Definition\n     SOURCE: \"Now the user is redirected to our homepage, 'home'. And at this moment, our work is complete. Once you've restarted the Django server with python manage.py runserver, you should be able to see our login page at http://127.0.0.1:8000/accounts/login/.\"\n\n  10. CONCEPT: Default settings for log in form and redirect URL\n     TYPE: Main Idea\n     SOURCE: \"By default, Django looks for a log in form in a templates directory called registration called login.html. Just add the following at the end of the settings.py file in django_project: LOGIN_REDIRECT_URL = \"home\"\"",
      "chunk_index": 8,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 8,
        "extraction_method": "fallback"
      }
    },
    {
      "content": "Django's authentication system",
      "concept_name": "Key Definition",
      "type": "concept",
      "source_sentence": "\"Remember that we didn't have to manually develop a database model or implement any view logic because Django's authentication system already did that for us.\"\n\n   CONCEPT: is_authenticated attribute\n     TYPE: Important Fact\n     SOURCE: \"It will do for now to simply make this code easy to find. We can give it a better look later on when we have more time.\"\n\n   CONCEPT: base.html template modification\n     TYPE: Main Idea\n     SOURCE: \"Modify the base.html file by inserting new code behind the </header> tag.\"\n\n   CONCEPT: logout link and page logic\n     TYPE: Key Definition\n     SOURCE: \"We included logout template and page logic, but it is not shown in the text.\"\n\n   CONCEPT: WhiteNoise package\n     TYPE: Important Fact\n     SOURCE: \"To begin, install the newest version with pip: python -m pip install whitenoise==5.3.0\"\n\n   CONCEPT: Heroku deployment\n     TYPE: Main Idea\n     SOURCE: \"Deploy to Heroku by running these commands in this order: git status, git add -A, git commit -m 'Heroku config', git push -u origin main, heroku ps:scale web=1, heroku open.\"\n\n   CONCEPT: PostgreSQL vs SQLite\n     TYPE: Key Definition\n     SOURCE: \"We have been using Django's preconfigured SQLite database on our local machines and in production so far in this book. However, there is a price to pay for it. Because Heroku uses a transient file system, any modifications made to the cloud-based db.sqlite3 file are lost anytime a new deployment or server restart takes place.\"\n\n   CONCEPT: Django for Professionals and Django for APIs books\n     TYPE: Important Fact\n     SOURCE: \"Django for Professionals is a follow-up book I wrote that covers topics like using Docker, installing a production database locally like PostgreSQL, registering advanced users, securing the site, optimizing performance, and much more. When building mobile apps (iOS/Android) or websites with a dedicated JavaScript front-end framework like Vue, React, or Angular, Django is often utilized as the back-end API.\"\n\n   CONCEPT: Django Packages database\n     TYPE: Important Fact\n     SOURCE: \"Django Packages is a complete database of all available third-party apps if you're interested in viewing additional packages.\"",
      "chunk_index": 9,
      "metadata": {
        "filename": "python-flask-and-django-full-stack-python-for-web-development-build-web-applications-in-python-using-flask-and-django-frameworks_compress.pdf",
        "format": "pdf",
        "concept_name": "Key Definition",
        "chunk_index": 9,
        "extraction_method": "fallback"
      }
    }
  ]
}